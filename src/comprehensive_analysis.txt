=== COMPREHENSIVE PROJECT ANALYSIS ===
Generated at: Wed Aug  6 16:03:14 CEST 2025

=== FILE STRUCTURE ===
.
├── app
│   ├── App.tsx
│   ├── config
│   │   └── cacheConfig.ts
│   ├── lib
│   │   └── queryClient.ts
│   └── main.tsx
├── assets
│   ├── icons
│   ├── images
│   ├── react.svg
│   └── styles
├── components
│   ├── ImageUploader.tsx
│   ├── PriceHistoryDisplay.tsx
│   ├── debug
│   │   ├── PerformanceMonitor.tsx
│   │   ├── ReactProfiler.tsx
│   │   └── profilerUtils.ts
│   ├── error
│   │   ├── ErrorBoundary.tsx
│   │   └── errorBoundaryUtils.ts
│   ├── lists
│   │   ├── .gitkeep
│   │   ├── CollectionExportModal.tsx
│   │   ├── CollectionItemCard.tsx
│   │   ├── CollectionStats.tsx
│   │   ├── CollectionTabs.tsx
│   │   ├── ItemOrderingSection.tsx
│   │   └── UnifiedCategoryList.tsx
│   ├── modals
│   │   ├── AddItemToAuctionModal.tsx
│   │   └── ItemSelectorModal.tsx
│   └── routing
│       ├── Router.tsx
│       ├── types
│       │   └── RouterTypes.ts
│       └── utils
│           └── routeUtils.ts
├── comprehensive_analysis.txt
├── features
│   ├── analytics
│   │   ├── components
│   │   │   └── analytics
│   │   │       ├── ActivityTimeline.tsx
│   │   │       ├── AnalyticsBackground.tsx
│   │   │       ├── AnalyticsHeader.tsx
│   │   │       ├── CategoryStats.tsx
│   │   │       ├── MetricsGrid.tsx
│   │   │       └── index.ts
│   │   ├── hooks
│   │   ├── pages
│   │   │   ├── Activity.tsx
│   │   │   ├── Analytics.tsx
│   │   │   └── SalesAnalytics.tsx
│   │   ├── services
│   │   └── types
│   ├── auction
│   │   ├── components
│   │   │   └── auction
│   │   │       ├── AuctionEditLayout.tsx
│   │   │       ├── AuctionItemCard.tsx
│   │   │       ├── RefactoredAuctionContent.tsx
│   │   │       ├── index.ts
│   │   │       └── sections
│   │   │           └── AuctionItemsSection.tsx
│   │   ├── hooks
│   │   ├── pages
│   │   │   ├── AuctionDetail.tsx
│   │   │   ├── AuctionEdit.tsx
│   │   │   ├── Auctions.tsx
│   │   │   └── CreateAuction.tsx
│   │   ├── services
│   │   └── types
│   ├── collection
│   │   ├── components
│   │   │   └── collection
│   │   │       ├── CollectionItemHeader.tsx
│   │   │       ├── ItemDetailSection.tsx
│   │   │       ├── ItemEssentialDetails.tsx
│   │   │       ├── ItemImageGallery.tsx
│   │   │       ├── ItemPriceHistory.tsx
│   │   │       ├── ItemSaleDetails.tsx
│   │   │       └── index.ts
│   │   ├── hooks
│   │   ├── pages
│   │   │   ├── AddEditItem.tsx
│   │   │   ├── Collection.tsx
│   │   │   └── CollectionItemDetail.tsx
│   │   ├── services
│   │   └── types
│   ├── dashboard
│   │   ├── components
│   │   │   ├── dashboard
│   │   │   │   ├── DashboardStatCard.tsx
│   │   │   │   └── index.ts
│   │   │   └── dba
│   │   │       ├── DbaCosmicBackground.tsx
│   │   │       ├── DbaCustomDescriptionInput.tsx
│   │   │       ├── DbaEmptyState.tsx
│   │   │       ├── DbaEmptyStateCosmic.tsx
│   │   │       ├── DbaExportActions.tsx
│   │   │       ├── DbaExportActionsCosmic.tsx
│   │   │       ├── DbaExportConfiguration.tsx
│   │   │       ├── DbaExportSuccess.tsx
│   │   │       ├── DbaHeaderActions.tsx
│   │   │       ├── DbaHeaderGalaxy.tsx
│   │   │       ├── DbaHeaderGalaxyCosmic.tsx
│   │   │       ├── DbaItemCustomizer.tsx
│   │   │       ├── DbaItemsWithTimers.tsx
│   │   │       ├── DbaItemsWithoutTimers.tsx
│   │   │       ├── UnifiedDbaEmptyState.tsx
│   │   │       └── itemDisplay
│   │   │           └── ItemCustomizationCard.tsx
│   │   ├── hooks
│   │   ├── pages
│   │   │   ├── Dashboard.tsx
│   │   │   └── DbaExport.tsx
│   │   ├── services
│   │   └── types
│   └── search
│       └── pages
│           ├── SealedProductSearch.tsx
│           └── SetSearch.tsx
├── generate_tree.sh
├── index.css
├── shared
│   ├── api
│   │   ├── .gitkeep
│   │   ├── TypeSafeApiClient.ts
│   │   ├── activityApi.ts
│   │   ├── auctionsApi.ts
│   │   ├── cardMarket
│   │   │   └── cardMarketApi.ts
│   │   ├── cardsApi.ts
│   │   ├── collectionApi.ts
│   │   ├── dbaSelectionApi.ts
│   │   ├── exportApi.ts
│   │   ├── genericApiOperations.ts
│   │   ├── productsApi.ts
│   │   ├── salesApi.ts
│   │   ├── searchApi.ts
│   │   ├── setProductsApi.ts
│   │   ├── setsApi.ts
│   │   ├── statusApi.ts
│   │   ├── unifiedApiClient.ts
│   │   └── uploadApi.ts
│   ├── components
│   │   ├── atoms
│   │   │   └── design-system
│   │   │       ├── PokemonBadge.tsx
│   │   │       ├── PokemonButton.tsx
│   │   │       ├── PokemonCard.tsx
│   │   │       ├── PokemonForm.tsx
│   │   │       ├── PokemonIcon.tsx
│   │   │       ├── PokemonInput.tsx
│   │   │       ├── PokemonModal.tsx
│   │   │       ├── PokemonPageContainer.tsx
│   │   │       ├── PokemonSearch.tsx
│   │   │       ├── PokemonSelect.tsx
│   │   │       └── index.ts
│   │   ├── forms
│   │   │   ├── .gitkeep
│   │   │   ├── AddEditCardForm.tsx
│   │   │   ├── AddEditSealedProductForm.tsx
│   │   │   ├── MarkSoldForm.tsx
│   │   │   ├── containers
│   │   │   │   ├── AuctionFormContainer.tsx
│   │   │   │   └── CardFormContainer.tsx
│   │   │   ├── fields
│   │   │   │   ├── CardInformationFields.tsx
│   │   │   │   ├── InformationFieldRenderer.tsx
│   │   │   │   ├── ProductInformationFields.tsx
│   │   │   │   ├── ValidationField.tsx
│   │   │   │   └── index.ts
│   │   │   ├── sections
│   │   │   │   ├── AuctionItemSelectionSection.tsx
│   │   │   │   ├── CardInformationDisplaySection.tsx
│   │   │   │   ├── GradingPricingSection.tsx
│   │   │   │   ├── HierarchicalCardSearch.tsx
│   │   │   │   ├── HierarchicalProductSearch.tsx
│   │   │   │   ├── ImageUploadSection.tsx
│   │   │   │   └── SaleDetailsSection.tsx
│   │   │   └── wrappers
│   │   │       └── FormSubmissionWrapper.tsx
│   │   ├── layout
│   │   │   └── layouts
│   │   │       ├── .gitkeep
│   │   │       ├── MainLayout.tsx
│   │   │       └── PageLayout.tsx
│   │   ├── molecules
│   │   │   └── common
│   │   │       ├── .gitkeep
│   │   │       ├── ActivityFilterHub.tsx
│   │   │       ├── ActivityListItem.tsx
│   │   │       ├── ActivityStatCard.tsx
│   │   │       ├── CategorySalesCard.tsx
│   │   │       ├── DateRangeFilter.tsx
│   │   │       ├── EmptyState.tsx
│   │   │       ├── FormActionButtons.tsx
│   │   │       ├── FormElements
│   │   │       │   ├── ErrorMessage.tsx
│   │   │       │   ├── FormWrapper.tsx
│   │   │       │   ├── Glow.tsx
│   │   │       │   ├── HelperText.tsx
│   │   │       │   ├── Label.tsx
│   │   │       │   ├── Shimmer.tsx
│   │   │       │   ├── UnifiedFormElement.tsx
│   │   │       │   └── index.ts
│   │   │       ├── FormHeader.tsx
│   │   │       ├── GlassmorphismHeader.tsx
│   │   │       ├── ImageAnalysisIndicator.tsx
│   │   │       ├── ImageProductView.tsx
│   │   │       ├── ImageSlideshow.tsx
│   │   │       ├── LoadingSpinner.tsx
│   │   │       ├── LoadingStates.tsx
│   │   │       ├── OptimizedImageView.tsx
│   │   │       ├── PaginationControls.tsx
│   │   │       ├── ProductCard.tsx
│   │   │       ├── ProductSearchFilters.tsx
│   │   │       ├── RecentSaleListItem.tsx
│   │   │       ├── SalesDateRangeFilter.tsx
│   │   │       ├── SalesStatCard.tsx
│   │   │       ├── SectionContainer.tsx
│   │   │       ├── UnifiedGradeDisplay.tsx
│   │   │       ├── UnifiedHeader.tsx
│   │   │       └── index.ts
│   │   ├── organisms
│   │   │   ├── effects
│   │   │   │   ├── Context7Background.tsx
│   │   │   │   ├── CosmicBackground.tsx
│   │   │   │   ├── FloatingGeometry.tsx
│   │   │   │   ├── GlassmorphismContainer.tsx
│   │   │   │   ├── HolographicBorder.tsx
│   │   │   │   ├── NeuralNetworkBackground.tsx
│   │   │   │   ├── ParticleSystem.tsx
│   │   │   │   ├── README.md
│   │   │   │   ├── UnifiedEffectSystem.tsx
│   │   │   │   └── index.ts
│   │   │   ├── theme
│   │   │   │   ├── AccessibilityControls.tsx
│   │   │   │   ├── AccessibilityTheme.tsx
│   │   │   │   ├── FocusManagementTheme.tsx
│   │   │   │   ├── HighContrastTheme.tsx
│   │   │   │   ├── README.md
│   │   │   │   ├── ReducedMotionTheme.tsx
│   │   │   │   ├── ThemeBackupManager.tsx
│   │   │   │   ├── ThemeDebugPanel.tsx
│   │   │   │   ├── ThemeDebugger.tsx
│   │   │   │   ├── ThemeExportManager.tsx
│   │   │   │   ├── ThemeExporter.tsx
│   │   │   │   ├── ThemeImporter.tsx
│   │   │   │   ├── ThemePerformanceMonitor.tsx
│   │   │   │   ├── ThemePicker.tsx
│   │   │   │   ├── index.ts
│   │   │   │   └── utils
│   │   │   │       ├── themeExportUtils.ts
│   │   │   │       └── themeValidationUtils.ts
│   │   │   └── ui
│   │   │       ├── ThemeToggle.tsx
│   │   │       └── toastNotifications.ts
│   │   └── templates
│   ├── constants
│   ├── contexts
│   │   ├── DragDropContext.tsx
│   │   ├── ThemeContext.tsx
│   │   └── theme
│   │       ├── AccessibilityThemeProvider.tsx
│   │       ├── AnimationThemeProvider.tsx
│   │       ├── ComposedThemeProvider.tsx
│   │       ├── LayoutThemeProvider.tsx
│   │       ├── ThemeStorageProvider.tsx
│   │       ├── UnifiedThemeProvider.tsx
│   │       ├── VisualThemeProvider.tsx
│   │       └── index.ts
│   ├── domain
│   │   ├── models
│   │   │   ├── .gitkeep
│   │   │   ├── auction.ts
│   │   │   ├── card.ts
│   │   │   ├── common.ts
│   │   │   ├── ordering.ts
│   │   │   ├── product.ts
│   │   │   ├── sale.ts
│   │   │   ├── sealedProduct.ts
│   │   │   └── setProduct.ts
│   │   └── services
│   │       ├── .gitkeep
│   │       └── SalesAnalyticsService.ts
│   ├── hooks
│   │   ├── .gitkeep
│   │   ├── collection
│   │   │   ├── useCollectionItem.ts
│   │   │   ├── useImageDownload.ts
│   │   │   ├── useItemOperations.ts
│   │   │   └── usePriceManagement.ts
│   │   ├── crud
│   │   │   ├── collectionEntityConfigs.ts
│   │   │   ├── entitySpecificHooks.ts
│   │   │   ├── index.ts
│   │   │   ├── useCollectionOperations.ts
│   │   │   └── useGenericCrudOperations.ts
│   │   ├── form
│   │   │   ├── useCardSelection.ts
│   │   │   └── useFormInitialization.ts
│   │   ├── index.ts
│   │   ├── theme
│   │   │   ├── useAccessibilityTheme.ts
│   │   │   ├── useAnimationTheme.ts
│   │   │   ├── useLayoutTheme.ts
│   │   │   ├── useTheme.ts
│   │   │   ├── useThemeStorage.ts
│   │   │   └── useVisualTheme.ts
│   │   ├── useAccessibilityTheme.ts
│   │   ├── useActivity.ts
│   │   ├── useAnalyticsData.ts
│   │   ├── useAsyncOperation.ts
│   │   ├── useAuction.ts
│   │   ├── useAuctionFormData.ts
│   │   ├── useAutocomplete.ts
│   │   ├── useBaseForm.ts
│   │   ├── useCollectionExport.ts
│   │   ├── useCollectionImageExport.ts
│   │   ├── useCollectionOperations.ts
│   │   ├── useCollectionState.ts
│   │   ├── useCollectionStats.ts
│   │   ├── useDataTable.ts
│   │   ├── useDbaExport.ts
│   │   ├── useDebounce.ts
│   │   ├── useDragAndDrop.ts
│   │   ├── useExportOperations.ts
│   │   ├── useFetchCollectionItems.ts
│   │   ├── useFormSubmission.ts
│   │   ├── useFormValidation.ts
│   │   ├── useGenericCrudOperations.ts
│   │   ├── useHierarchicalSearch.tsx
│   │   ├── useImageRemoval.ts
│   │   ├── useImageUpload.ts
│   │   ├── useItemActions.ts
│   │   ├── useItemDisplayData.ts
│   │   ├── useMarkSold.ts
│   │   ├── useModal.ts
│   │   ├── useModalManager.ts
│   │   ├── useOptimizedSearch.ts
│   │   ├── usePageLayout.ts
│   │   ├── usePageNavigation.ts
│   │   ├── usePriceHistory.ts
│   │   ├── usePsaCardOperations.ts
│   │   ├── useRawCardOperations.ts
│   │   ├── useSalesAnalytics.ts
│   │   ├── useSealedProductOperations.ts
│   │   ├── useSearch.ts
│   │   ├── useThemeSwitch.ts
│   │   └── useUnifiedSearch.ts
│   ├── interfaces
│   │   └── api
│   │       ├── ICollectionApiService.ts
│   │       ├── IExportApiService.ts
│   │       ├── ISearchApiService.ts
│   │       ├── ISetProductApiService.ts
│   │       └── IUploadApiService.ts
│   ├── services
│   │   ├── CollectionApiService.ts
│   │   ├── CompositeCollectionApiService.ts
│   │   ├── ExportApiService.ts
│   │   ├── SearchApiService.ts
│   │   ├── ServiceRegistry.ts
│   │   ├── SetProductApiService.ts
│   │   ├── UploadApiService.ts
│   │   ├── base
│   │   │   ├── BaseApiService.ts
│   │   │   ├── ErrorHandlingService.ts
│   │   │   ├── HttpClientInterface.ts
│   │   │   ├── UnifiedHttpClient.ts
│   │   │   └── index.ts
│   │   ├── collection
│   │   │   ├── PsaCardApiService.ts
│   │   │   ├── RawCardApiService.ts
│   │   │   ├── SealedProductApiService.ts
│   │   │   └── index.ts
│   │   └── forms
│   │       └── FormValidationService.ts
│   ├── types
│   │   ├── searchTypes.ts
│   │   └── themeTypes.ts
│   └── utils
│       ├── .gitkeep
│       ├── API_TRANSFORMATION_MIGRATION.md
│       ├── TODO.txt
│       ├── api
│       │   └── ZipImageUtility.ts
│       ├── file
│       │   ├── csvExport.ts
│       │   ├── exportFormats.ts
│       │   └── imageProcessing.ts
│       ├── helpers
│       │   ├── activityHelpers.ts
│       │   ├── auctionStatusUtils.ts
│       │   ├── common.ts
│       │   ├── constants.ts
│       │   ├── debounceUtils.ts
│       │   ├── errorHandler.ts
│       │   ├── exportUtils.ts
│       │   ├── fileOperations.ts
│       │   ├── formatting.ts
│       │   ├── itemDisplayHelpers.ts
│       │   ├── navigation.ts
│       │   ├── orderingUtils.ts
│       │   ├── performanceOptimization.ts
│       │   ├── performanceTest.ts
│       │   ├── searchHelpers.ts
│       │   ├── storageUtils.ts
│       │   ├── typeGuards
│       │   │   └── TypeGuards.ts
│       │   ├── unifiedUtilities.ts
│       │   └── validation
│       │       └── RuntimeValidator.ts
│       ├── performance
│       │   ├── apiLogger.ts
│       │   ├── lazyImports.ts
│       │   └── logger.ts
│       ├── theme
│       │   ├── ThemePropertyManager.ts
│       │   ├── debugging.ts
│       │   ├── performance.ts
│       │   └── validation.ts
│       ├── transformers
│       │   ├── apiOptimization.ts
│       │   ├── responseTransformer.ts
│       │   └── unifiedResponseTransformer.ts
│       ├── ui
│       │   ├── classNameUtils.ts
│       │   ├── context7Styles.ts
│       │   ├── cosmicEffects.ts
│       │   ├── imageUtils.ts
│       │   ├── themeConfig.ts
│       │   ├── themeDebug.ts
│       │   ├── themeExport.ts
│       │   └── themeUtils.ts
│       └── validation
│           └── formValidation.ts
├── styles
│   └── unified-design-system.css
├── theme
│   └── formThemes.ts
└── types
    ├── api
    │   └── ApiResponse.ts
    ├── collection
    │   └── CollectionTypes.ts
    └── form
        └── FormTypes.ts

107 directories, 346 files

=== DETAILED FILE ANALYSIS ===

--- FILE: ./features/search/pages/SetSearch.tsx ---
IMPORTS:
  import {
  import React, { useEffect, useState, useCallback } from 'react';
  import * as setsApi from '../../../shared/api/setsApi';
  import { searchSets } from '../../../shared/api/searchApi';
  import { PokemonInput } from '../../../shared/components/atoms/design-system/PokemonInput';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import { useFetchCollectionItems } from '../../../shared/hooks/useFetchCollectionItems';
  import { usePageLayout } from '../../../shared/hooks/usePageLayout';
  import { log } from '../../../shared/utils/performance/logger';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
FUNCTIONS/METHODS:
  const SetSearch: React.FC = () => {
TYPES/INTERFACES:
  interface SearchParams {
REACT COMPONENTS:
  const SetSearch: React.FC = () => {
USED HOOKS:
  useCallback
  useEffect
  useFetchCollectionItems
  usePageLayout
  useState
API CALLS/ENDPOINTS:

--- FILE: ./features/search/pages/SealedProductSearch.tsx ---
IMPORTS:
  import { Euro, Package, Search } from 'lucide-react';
  import React, { useEffect, useState, useCallback } from 'react';
  import {
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import ProductSearchFilters from '../../../shared/components/molecules/common/ProductSearchFilters';
  import ProductCard from '../../../shared/components/molecules/common/ProductCard';
  import PaginationControls from '../../../shared/components/molecules/common/PaginationControls';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import {
  import { ISetProduct } from '../../../shared/domain/models/setProduct';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { log } from '../../../shared/utils/performance/logger';
FUNCTIONS/METHODS:
  const ProductSearch: React.FC = () => {
TYPES/INTERFACES:
REACT COMPONENTS:
  const ProductSearch: React.FC = () => {
USED HOOKS:
  useCallback
  useEffect
  useState
API CALLS/ENDPOINTS:

--- FILE: ./features/auction/pages/Auctions.tsx ---
IMPORTS:
  import {
  import React, { useEffect, useState } from 'react';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import { useAuction } from '../../../shared/hooks/useAuction';
  import {
  import { formatDateWithTime } from '../../../shared/utils/helpers/formatting';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  import {
FUNCTIONS/METHODS:
  const Auctions: React.FC = () => {
TYPES/INTERFACES:
REACT COMPONENTS:
  const Auctions: React.FC = () => {
USED HOOKS:
  useAuction
  useEffect
  useState
API CALLS/ENDPOINTS:

--- FILE: ./features/auction/pages/AuctionDetail.tsx ---
IMPORTS:
  import React, { useState, useEffect } from 'react';
  import {
  import AuctionItemsSection from '../components/auction/sections/AuctionItemsSection';
  import {
  import { PokemonButton } from '../../../shared/components/atoms/design-system/PokemonButton';
  import { MarkSoldForm } from '../../../shared/components/forms/MarkSoldForm';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import AddItemToAuctionModal from '../../../components/modals/AddItemToAuctionModal';
  import { AuctionItemCard } from '../components/auction/AuctionItemCard';
  import { ISaleDetails } from '../../../shared/domain/models/common';
  import { useAuction } from '../../../shared/hooks/useAuction';
  import { useCollectionOperations } from '../../../shared/hooks/useCollectionOperations';
  import { useModal, useConfirmModal } from '../../../shared/hooks/useModal';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import {
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  import {
FUNCTIONS/METHODS:
  const AuctionDetail: React.FC<AuctionDetailProps> = ({ auctionId }) => {
TYPES/INTERFACES:
  interface AuctionDetailProps {
REACT COMPONENTS:
  const AuctionDetail: React.FC<AuctionDetailProps> = ({ auctionId }) => {
USED HOOKS:
  useAuction
  useCollectionOperations
  useConfirmModal
  useEffect
  useModal
  useState
API CALLS/ENDPOINTS:

--- FILE: ./features/auction/pages/CreateAuction.tsx ---
IMPORTS:
  import React, { useCallback, useEffect, useMemo, useState } from 'react';
  import { Gavel, ArrowLeft } from 'lucide-react';
  import toast from 'react-hot-toast';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import { IAuctionItem } from '../../../shared/domain/models/auction';
  import { IPsaGradedCard, IRawCard } from '../../../shared/domain/models/card';
  import { ISealedProduct } from '../../../shared/domain/models/sealedProduct';
  import { useAuction } from '../../../shared/hooks/useAuction';
  import { useFetchCollectionItems } from '../../../shared/hooks/useFetchCollectionItems';
  import { useBaseForm } from '../../../shared/hooks/useBaseForm';
  import { getCollectionApiService } from '../../../shared/services/ServiceRegistry';
  import { processImageUrl } from '../../../shared/utils/helpers/formatting';
  import { log } from '../../../shared/utils/performance/logger';
  import AuctionFormContainer from '../../../shared/components/forms/containers/AuctionFormContainer';
  import AuctionItemSelectionSection from '../../../shared/components/forms/sections/AuctionItemSelectionSection';
  import { useCentralizedTheme } from '../../../shared/utils/ui/themeConfig';
  import {
FUNCTIONS/METHODS:
  const memoizedProcessImageUrl = (imagePath: string | undefined) => {
  const CreateAuction: React.FC = () => {
          custom: (value: string) => {
TYPES/INTERFACES:
  interface AuctionFormData {
  interface UnifiedCollectionItem {
REACT COMPONENTS:
  const CreateAuction: React.FC = () => {
USED HOOKS:
  useAuction
  useBaseForm
  useCallback
  useCentralizedTheme
  useEffect
  useFetchCollectionItems
  useMemo
  useState
API CALLS/ENDPOINTS:
            newSet.delete(itemId);

--- FILE: ./features/auction/pages/AuctionEdit.tsx ---
IMPORTS:
  import {
  import AuctionItemsSection from '../components/auction/sections/AuctionItemsSection';
  import { PokemonButton } from '../../../shared/components/atoms/design-system/PokemonButton';
  import { PokemonConfirmModal } from '../../../shared/components/atoms/design-system/PokemonModal';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import CollectionItemCard, {
  import AddItemToAuctionModal from '../../../components/modals/AddItemToAuctionModal';
  import { useAuction } from '../../../shared/hooks/useAuction';
  import { showSuccessToast } from '../../../shared/components/organisms/ui/toastNotifications';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
FUNCTIONS/METHODS:
  const AuctionEdit: React.FC<AuctionEditProps> = ({ auctionId }) => {
TYPES/INTERFACES:
  interface AuctionEditProps {
REACT COMPONENTS:
  const AuctionEdit: React.FC<AuctionEditProps> = ({ auctionId }) => {
USED HOOKS:
  useAuction
  useEffect
  useState
API CALLS/ENDPOINTS:

--- FILE: ./features/auction/components/auction/index.ts ---
IMPORTS:
  export { AuctionItemCard } from './AuctionItemCard';
  export type { AuctionItemCardProps } from './AuctionItemCard';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type { AuctionItemCardProps } from './AuctionItemCard';
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/auction/components/auction/AuctionItemCard.tsx ---
IMPORTS:
  import React from 'react';
  import { Trash2, DollarSign, Package, ShoppingBag } from 'lucide-react';
  import { PokemonButton } from '../../../../shared/components/atoms/design-system/PokemonButton';
  import {
FUNCTIONS/METHODS:
    isItemSold: (item: any) => boolean;
    onMarkSold: (item: any) => void;
    onRemoveItem: (item: any) => void;
  export const AuctionItemCard: React.FC<AuctionItemCardProps> = ({
TYPES/INTERFACES:
  export interface AuctionItemCardProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/auction/components/auction/sections/AuctionItemsSection.tsx ---
IMPORTS:
  import React, { ReactNode } from 'react';
  import { Plus, Package } from 'lucide-react';
  import { PokemonButton } from '../../../../../shared/components/atoms/design-system/PokemonButton';
FUNCTIONS/METHODS:
    onAddItems: () => void;
TYPES/INTERFACES:
  interface AuctionItem {
  interface AuctionItemsSectionProps {
REACT COMPONENTS:
  const AuctionItemsSection: React.FC<AuctionItemsSectionProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/auction/components/auction/RefactoredAuctionContent.tsx ---
IMPORTS:
  import React from 'react';
  import { X, DollarSign, Download, Facebook, FileText } from 'lucide-react';
  import { UnifiedHeader, SectionContainer } from '../common';
  import { Context7Background } from '../effects';
  import { PokemonButton } from '../design-system';
FUNCTIONS/METHODS:
    handleGenerateFacebookPost: () => void;
    handleDownloadTextFile: () => void;
  export const RefactoredAuctionContent: React.FC<
TYPES/INTERFACES:
  interface RefactoredAuctionContentProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/auction/components/auction/AuctionEditLayout.tsx ---
IMPORTS:
  import React from 'react';
  import { AlertCircle, ArrowLeft, Calendar, Save, X, Edit3 } from 'lucide-react';
  import { UseFormReturn } from 'react-hook-form';
  import { PokemonButton } from '../design-system/PokemonButton';
  import LoadingSpinner from '../common/LoadingSpinner';
  import { PageLayout } from '../layouts/PageLayout';
  import { AuctionFormData } from '../../hooks/useAuctionFormData';
FUNCTIONS/METHODS:
    onBackToAuction: () => void;
    onSaveChanges: () => void;
    onClearError: () => void;
    getStatusColor: (status: string) => string;
  const PremiumBackground: React.FC = () => (
  const PremiumLoadingCard: React.FC = () => (
    onBackToAuction: () => void;
    onSaveChanges: () => void;
    getStatusColor: (status: string) => string;
    onClearError: () => void;
  const PremiumAuctionForm: React.FC<PremiumAuctionFormProps> = ({ form }) => (
TYPES/INTERFACES:
  interface AuctionEditLayoutProps {
  interface PremiumHeaderSectionProps {
  interface PremiumErrorMessageProps {
  interface PremiumAuctionFormProps {
REACT COMPONENTS:
  const AuctionEditLayout: React.FC<AuctionEditLayoutProps> = ({
  const PremiumBackground: React.FC = () => (
  const PremiumLoadingCard: React.FC = () => (
  const PremiumHeaderSection: React.FC<PremiumHeaderSectionProps> = ({
  const PremiumErrorMessage: React.FC<PremiumErrorMessageProps> = ({
  const PremiumAuctionForm: React.FC<PremiumAuctionFormProps> = ({ form }) => (
USED HOOKS:
  useAuctionFormData
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/pages/Dashboard.tsx ---
IMPORTS:
  import {
  import React from 'react';
  import { useQuery } from '@tanstack/react-query';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import { useRecentActivities } from '../../../shared/hooks/useActivity';
  import { useCollectionStats } from '../../../shared/hooks/useCollectionStats';
  import { getDataCounts } from '../../../shared/api/statusApi';
  import { displayPrice } from '../../../shared/utils/helpers/formatting';
  import {
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  import {
  import { ActivityTimeline } from '../../../shared/components/analytics/ActivityTimeline';
  import { ParticleSystem } from '../../../shared/components/organisms/effects';
  import {
FUNCTIONS/METHODS:
  const Dashboard: React.FC = () => {
TYPES/INTERFACES:
REACT COMPONENTS:
  const Dashboard: React.FC = () => {
USED HOOKS:
  useActivity
  useCollectionStats
  useQuery
  useRecentActivities
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/pages/DbaExport.tsx ---
IMPORTS:
  import React, { lazy, Suspense } from 'react';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import { useDbaExport } from '../../../shared/hooks/useDbaExport';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import { PokemonCard } from '../../../shared/components/atoms/design-system/PokemonCard';
FUNCTIONS/METHODS:
  const DbaExport: React.FC = () => {
TYPES/INTERFACES:
REACT COMPONENTS:
  const DbaExport: React.FC = () => {
USED HOOKS:
  useDbaExport
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaItemCustomizer.tsx ---
IMPORTS:
  import React from 'react';
  import { Settings, Edit3, FileText } from 'lucide-react';
FUNCTIONS/METHODS:
    updateItemCustomization: (
    generateTitle: (item: any) => string;
    generateDescription: (item: any) => string;
TYPES/INTERFACES:
  interface SelectedItem {
  interface DbaItemCustomizerProps {
REACT COMPONENTS:
  const DbaItemCustomizer: React.FC<DbaItemCustomizerProps> = React.memo(
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaExportActionsCosmic.tsx ---
IMPORTS:
  import React from 'react';
  import { Zap, FileDown } from 'lucide-react';
  import { PokemonButton } from '../../../../shared/components/atoms/design-system/PokemonButton';
FUNCTIONS/METHODS:
    onExportToDba: () => void;
    onDownloadZip: () => void;
TYPES/INTERFACES:
  interface DbaExportActionsCosmicProps {
REACT COMPONENTS:
  const DbaExportActionsCosmic: React.FC<DbaExportActionsCosmicProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaExportActions.tsx ---
IMPORTS:
  import React from 'react';
  import { Zap, FileDown } from 'lucide-react';
  import { PokemonButton } from '../design-system/PokemonButton';
FUNCTIONS/METHODS:
    onExportToDba: () => void;
    onDownloadZip: () => void;
TYPES/INTERFACES:
  interface DbaExportActionsProps {
REACT COMPONENTS:
  const DbaExportActions: React.FC<DbaExportActionsProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaHeaderActions.tsx ---
IMPORTS:
  import React from 'react';
  import { Download } from 'lucide-react';
FUNCTIONS/METHODS:
    onExportAll: () => void;
  const DbaHeaderActions: React.FC<DbaHeaderActionsProps> = ({ onExportAll }) => {
TYPES/INTERFACES:
  interface DbaHeaderActionsProps {
REACT COMPONENTS:
  const DbaHeaderActions: React.FC<DbaHeaderActionsProps> = ({ onExportAll }) => {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaExportConfiguration.tsx ---
IMPORTS:
  import React from 'react';
  import { Settings } from 'lucide-react';
  import { PokemonInput } from '../../../../shared/components/atoms/design-system/PokemonInput';
  import DbaExportActionsCosmic from './DbaExportActionsCosmic';
  import ItemCustomizationCard from './itemDisplay/ItemCustomizationCard';
FUNCTIONS/METHODS:
    setCustomDescription: (value: string) => void;
    updateItemCustomization: (
    generateTitle: (item: any) => string;
    generateDescription: (item: any) => string;
    exportCollectionData: (items: SelectedItem[], mode: string) => void;
    downloadZip: () => void;
TYPES/INTERFACES:
  interface SelectedItem {
  interface DbaExportConfigurationProps {
REACT COMPONENTS:
  const DbaExportConfiguration: React.FC<DbaExportConfigurationProps> =
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/UnifiedDbaEmptyState.tsx ---
IMPORTS:
  import React from 'react';
  import { Star, Sparkles, Package, FileX } from 'lucide-react';
  import { GlassmorphismContainer } from '../effects/GlassmorphismContainer';
  import { PokemonCard } from '../design-system/PokemonCard';
FUNCTIONS/METHODS:
  export const UnifiedDbaEmptyState: React.FC<UnifiedDbaEmptyStateProps> = ({
  export const DbaEmptyState: React.FC<{
  export const DbaEmptyStateCosmic: React.FC<{
TYPES/INTERFACES:
  interface UnifiedDbaEmptyStateProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaCosmicBackground.tsx ---
IMPORTS:
  import React from 'react';
  import { CosmicBackground } from '../../../../shared/components/organisms/effects';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface DbaCosmicBackgroundProps {
REACT COMPONENTS:
  const DbaCosmicBackground: React.FC<DbaCosmicBackgroundProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaEmptyStateCosmic.tsx ---
IMPORTS:
  import React from 'react';
  import { Star, Sparkles } from 'lucide-react';
  import { PokemonCard } from '../../../../shared/components/atoms/design-system/PokemonCard';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface DbaEmptyStateCosmicProps {
REACT COMPONENTS:
  const DbaEmptyStateCosmic: React.FC<DbaEmptyStateCosmicProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaItemsWithoutTimers.tsx ---
IMPORTS:
  import React from 'react';
  import { Plus, Sparkles } from 'lucide-react';
FUNCTIONS/METHODS:
    getDbaInfo: (id: string, type: string) => any;
    renderItemCard: (
TYPES/INTERFACES:
  interface DbaItemsWithoutTimersProps {
REACT COMPONENTS:
  const DbaItemsWithoutTimers: React.FC<DbaItemsWithoutTimersProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/itemDisplay/ItemCustomizationCard.tsx ---
IMPORTS:
  import React from 'react';
  import { processImageUrl } from '../../../../../shared/utils/helpers/common';
FUNCTIONS/METHODS:
    generateTitle: (item: any) => string;
    generateDescription: (item: any) => string;
    updateItemCustomization: (
    generateTitle: (item: any) => string
TYPES/INTERFACES:
  interface SelectedItem {
  interface ItemCustomizationCardProps {
REACT COMPONENTS:
  const ItemCustomizationCard: React.FC<ItemCustomizationCardProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaItemsWithTimers.tsx ---
IMPORTS:
  import React from 'react';
  import { Clock, Star } from 'lucide-react';
FUNCTIONS/METHODS:
    getDbaInfo: (id: string, type: string) => any;
    renderItemCard: (
TYPES/INTERFACES:
  interface DbaItemsWithTimersProps {
REACT COMPONENTS:
  const DbaItemsWithTimers: React.FC<DbaItemsWithTimersProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaExportSuccess.tsx ---
IMPORTS:
  import React from 'react';
  import { CheckCircle } from 'lucide-react';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface DbaExportSuccessProps {
REACT COMPONENTS:
  const DbaExportSuccess: React.FC<DbaExportSuccessProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaCustomDescriptionInput.tsx ---
IMPORTS:
  import React from 'react';
  import { PokemonInput } from '../design-system/PokemonInput';
FUNCTIONS/METHODS:
    onChange: (value: string) => void;
TYPES/INTERFACES:
  interface DbaCustomDescriptionInputProps {
REACT COMPONENTS:
  const DbaCustomDescriptionInput: React.FC<DbaCustomDescriptionInputProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaEmptyState.tsx ---
IMPORTS:
  import React from 'react';
  import { Star, Sparkles } from 'lucide-react';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface DbaEmptyStateProps {
REACT COMPONENTS:
  const DbaEmptyState: React.FC<DbaEmptyStateProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaHeaderGalaxy.tsx ---
IMPORTS:
  import React from 'react';
  import { Archive, Clock, AlertTriangle, CheckSquare } from 'lucide-react';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface DbaHeaderGalaxyProps {
REACT COMPONENTS:
  const DbaHeaderGalaxy: React.FC<DbaHeaderGalaxyProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dba/DbaHeaderGalaxyCosmic.tsx ---
IMPORTS:
  import React from 'react';
  import { Archive, Clock, AlertTriangle, CheckSquare } from 'lucide-react';
  import { PokemonPageContainer } from '../../../../shared/components/atoms/design-system/PokemonPageContainer';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface DbaHeaderGalaxyCosmicProps {
REACT COMPONENTS:
  const DbaHeaderGalaxyCosmic: React.FC<DbaHeaderGalaxyCosmicProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dashboard/index.ts ---
IMPORTS:
  export type { DashboardStatCardProps } from './DashboardStatCard';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type { DashboardStatCardProps } from './DashboardStatCard';
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/dashboard/components/dashboard/DashboardStatCard.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
  import {
FUNCTIONS/METHODS:
  export const DashboardStatCard: React.FC<DashboardStatCardProps> = ({
  export const DashboardItemsCard: React.FC<
  export const DashboardSalesCard: React.FC<
  export const DashboardValueCard: React.FC<
  export const DashboardGradedCard: React.FC<
  export const DashboardDataCard: React.FC<
TYPES/INTERFACES:
  export interface DashboardStatCardProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/collection/pages/CollectionItemDetail.tsx ---
IMPORTS:
  import React from 'react';
  import { Package } from 'lucide-react';
  import {
  import { PokemonPageContainer } from '../../../shared/components/atoms/design-system/PokemonPageContainer';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import { MarkSoldForm } from '../../../shared/components/forms/MarkSoldForm';
  import { useModal } from '../../../shared/hooks/useModal';
  import { useCollectionItemFromUrl } from '../../../shared/hooks/collection/useCollectionItem';
  import { useItemOperations } from '../../../shared/hooks/collection/useItemOperations';
  import { usePriceManagement } from '../../../shared/hooks/collection/usePriceManagement';
  import { useImageDownload } from '../../../shared/hooks/collection/useImageDownload';
  import {
  import { getItemDisplayData } from '../../../shared/utils/helpers/itemDisplayHelpers';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
FUNCTIONS/METHODS:
  const CollectionItemDetail: React.FC = () => {
TYPES/INTERFACES:
REACT COMPONENTS:
  const CollectionItemDetail: React.FC = () => {
USED HOOKS:
  useCollectionItem
  useCollectionItemFromUrl
  useImageDownload
  useItemOperations
  useModal
  usePriceManagement
API CALLS/ENDPOINTS:

--- FILE: ./features/collection/pages/Collection.tsx ---
IMPORTS:
  import { Download, FileText, Plus } from 'lucide-react';
  import React, {
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import { CollectionItem } from '../../../components/lists/CollectionItemCard';
  import CollectionStats from '../../../components/lists/CollectionStats';
  import CollectionTabs, {
  import { useCollectionExport } from '../../../shared/hooks/useCollectionExport';
  import { useCollectionOperations } from '../../../shared/hooks/useCollectionOperations';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  import {
FUNCTIONS/METHODS:
  const MarkSoldForm = React.lazy(() =>
  const Collection: React.FC = () => {
TYPES/INTERFACES:
REACT COMPONENTS:
  const Collection: React.FC = () => {
USED HOOKS:
  useCallback
  useCollectionExport
  useCollectionOperations
  useEffect
  useMemo
  useState
API CALLS/ENDPOINTS:

--- FILE: ./features/collection/pages/AddEditItem.tsx ---
IMPORTS:
  import { Archive, ArrowLeft, Package, Star } from 'lucide-react';
  import React, { Suspense, useEffect, useState } from 'react';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import { IPsaGradedCard, IRawCard } from '../../../shared/domain/models/card';
  import { ISealedProduct } from '../../../shared/domain/models/sealedProduct';
  import { useCollectionOperations } from '../../../shared/hooks/useCollectionOperations';
  import { getCollectionApiService } from '../../../shared/services/ServiceRegistry';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { log } from '../../../shared/utils/performance/logger';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  import { useCentralizedTheme } from '../../../shared/utils/ui/themeConfig';
FUNCTIONS/METHODS:
  const AddEditItem: React.FC = () => {
TYPES/INTERFACES:
  type ItemType = 'psa-graded' | 'raw-card' | 'sealed-product' | null;
  interface ItemTypeOption {
  type CollectionItem = IPsaGradedCard | IRawCard | ISealedProduct;
REACT COMPONENTS:
  const AddEditItem: React.FC = () => {
USED HOOKS:
  useCentralizedTheme
  useCollectionOperations
  useEffect
  useState
API CALLS/ENDPOINTS:

--- FILE: ./features/collection/components/collection/ItemImageGallery.tsx ---
IMPORTS:
  import React from 'react';
  import { Download } from 'lucide-react';
  import { CollectionItem } from '../../hooks/collection/useCollectionItem';
  import { PokemonCard } from '../../../../shared/components/atoms/design-system/PokemonCard';
  import { ImageProductView } from '../../../../shared/components/molecules/common/ImageProductView';
  import LoadingSpinner from '../../../../shared/components/molecules/common/LoadingSpinner';
  import { navigationHelper } from '../../../../shared/utils/helpers/navigation';
FUNCTIONS/METHODS:
  export const ItemImageGallery: React.FC<ItemImageGalleryProps> = ({
TYPES/INTERFACES:
  export interface ItemImageGalleryProps {
REACT COMPONENTS:
USED HOOKS:
  useCollectionItem
API CALLS/ENDPOINTS:

--- FILE: ./features/collection/components/collection/CollectionItemHeader.tsx ---
IMPORTS:
  import React from 'react';
  import { ArrowLeft, Edit, Check, Trash2, Star } from 'lucide-react';
  import { CollectionItem } from '../../hooks/collection/useCollectionItem';
  import GlassmorphismHeader from '../../../../shared/components/molecules/common/GlassmorphismHeader';
  import FormActionButtons from '../../../../shared/components/molecules/common/FormActionButtons';
FUNCTIONS/METHODS:
    onEdit: () => void;
    onMarkSold: () => void;
    onDelete: () => void;
    onBackToCollection: () => void;
  export const CollectionItemHeader: React.FC<CollectionItemHeaderProps> = ({
TYPES/INTERFACES:
  export interface CollectionItemHeaderProps {
REACT COMPONENTS:
USED HOOKS:
  useCollectionItem
API CALLS/ENDPOINTS:

--- FILE: ./features/collection/components/collection/ItemSaleDetails.tsx ---
IMPORTS:
  import React from 'react';
  import { CheckCircle } from 'lucide-react';
  import { CollectionItem } from '../../hooks/collection/useCollectionItem';
FUNCTIONS/METHODS:
  export const ItemSaleDetails: React.FC<ItemSaleDetailsProps> = ({
TYPES/INTERFACES:
  export interface ItemSaleDetailsProps {
REACT COMPONENTS:
USED HOOKS:
  useCollectionItem
API CALLS/ENDPOINTS:

--- FILE: ./features/collection/components/collection/index.ts ---
IMPORTS:
  export { CollectionItemHeader } from './CollectionItemHeader';
  export { ItemEssentialDetails } from './ItemEssentialDetails';
  export { ItemImageGallery } from './ItemImageGallery';
  export { ItemPriceHistory } from './ItemPriceHistory';
  export { ItemSaleDetails } from './ItemSaleDetails';
  export type { ItemEssentialDetailsProps } from './ItemEssentialDetails';
  export type { ItemImageGalleryProps } from './ItemImageGallery';
  export type { ItemPriceHistoryProps } from './ItemPriceHistory';
  export type { ItemSaleDetailsProps } from './ItemSaleDetails';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type {
  export type {
  export type { ItemEssentialDetailsProps } from './ItemEssentialDetails';
  export type { ItemImageGalleryProps } from './ItemImageGallery';
  export type { ItemPriceHistoryProps } from './ItemPriceHistory';
  export type { ItemSaleDetailsProps } from './ItemSaleDetails';
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/collection/components/collection/ItemDetailSection.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
FUNCTIONS/METHODS:
  export const ItemDetailSection: React.FC<ItemDetailSectionProps> = ({
  export const PsaCardDetailSection: React.FC<PsaCardDetailProps> = ({
  export const RawCardDetailSection: React.FC<RawCardDetailProps> = ({
  export const SealedProductDetailSection: React.FC<SealedProductDetailProps> = ({
TYPES/INTERFACES:
  export interface DetailItem {
  export interface ItemDetailSectionProps {
  export interface PsaCardDetailProps {
  export interface RawCardDetailProps {
  export interface SealedProductDetailProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/collection/components/collection/ItemPriceHistory.tsx ---
IMPORTS:
  import React from 'react';
  import { Plus } from 'lucide-react';
  import { CollectionItem } from '../../hooks/collection/useCollectionItem';
  import { PokemonCard } from '../../../../shared/components/atoms/design-system/PokemonCard';
  import { PriceHistoryDisplay } from '../../../../components/PriceHistoryDisplay';
FUNCTIONS/METHODS:
    onPriceInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onCustomPriceUpdate: () => void;
  export const ItemPriceHistory: React.FC<ItemPriceHistoryProps> = ({
TYPES/INTERFACES:
  export interface ItemPriceHistoryProps {
REACT COMPONENTS:
USED HOOKS:
  useCollectionItem
API CALLS/ENDPOINTS:

--- FILE: ./features/collection/components/collection/ItemEssentialDetails.tsx ---
IMPORTS:
  import React from 'react';
  import { CollectionItem } from '../../hooks/collection/useCollectionItem';
  import { PokemonCard } from '../../../../shared/components/atoms/design-system/PokemonCard';
  import {
  import { navigationHelper } from '../../../../shared/utils/helpers/navigation';
FUNCTIONS/METHODS:
  export const ItemEssentialDetails: React.FC<ItemEssentialDetailsProps> = ({
TYPES/INTERFACES:
  export interface ItemEssentialDetailsProps {
REACT COMPONENTS:
USED HOOKS:
  useCollectionItem
API CALLS/ENDPOINTS:

--- FILE: ./features/analytics/pages/Activity.tsx ---
IMPORTS:
  import {
  import React, { useEffect, useState } from 'react';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import ActivityStatCard from '../../../shared/components/molecules/common/ActivityStatCard';
  import ActivityListItem from '../../../shared/components/molecules/common/ActivityListItem';
  import ActivityFilterHub from '../../../shared/components/molecules/common/ActivityFilterHub';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import { ACTIVITY_TYPES, useActivity } from '../../../shared/hooks/useActivity';
  import {
  import {
FUNCTIONS/METHODS:
  const Activity: React.FC = () => {
TYPES/INTERFACES:
REACT COMPONENTS:
  const Activity: React.FC = () => {
USED HOOKS:
  useActivity
  useEffect
  useState
API CALLS/ENDPOINTS:

--- FILE: ./features/analytics/pages/SalesAnalytics.tsx ---
IMPORTS:
  import React, { useState } from 'react';
  import { TrendingUp, DollarSign, Download } from 'lucide-react';
  import { PokemonButton } from '../../../shared/components/atoms/design-system/PokemonButton';
  import { DateRangeState } from '../../../shared/components/molecules/common/DateRangeFilter';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import SalesStatCard from '../../../shared/components/molecules/common/SalesStatCard';
  import CategorySalesCard from '../../../shared/components/molecules/common/CategorySalesCard';
  import RecentSaleListItem from '../../../shared/components/molecules/common/RecentSaleListItem';
  import SalesDateRangeFilter from '../../../shared/components/molecules/common/SalesDateRangeFilter';
  import { useExportOperations } from '../../../shared/hooks/useExportOperations';
  import { useSalesAnalytics } from '../../../shared/hooks/useSalesAnalytics';
  import { showSuccessToast } from '../../../shared/components/organisms/ui/toastNotifications';
  import { displayPrice } from '../../../shared/utils/helpers/formatting';
FUNCTIONS/METHODS:
  const SalesAnalytics: React.FC = () => {
TYPES/INTERFACES:
REACT COMPONENTS:
  const SalesAnalytics: React.FC = () => {
USED HOOKS:
  useExportOperations
  useSalesAnalytics
  useState
API CALLS/ENDPOINTS:

--- FILE: ./features/analytics/pages/Analytics.tsx ---
IMPORTS:
  import { RefreshCw } from 'lucide-react';
  import React, { useEffect, useState } from 'react';
  import DateRangeFilter, {
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import { GlassmorphismContainer } from '../../../shared/components/organisms/effects/GlassmorphismContainer';
  import {
  import {
  import { useCollectionStats } from '../../../shared/hooks/useCollectionStats';
  import { useAnalyticsData } from '../../../shared/hooks/useAnalyticsData';
FUNCTIONS/METHODS:
  const Analytics: React.FC = () => {
TYPES/INTERFACES:
REACT COMPONENTS:
  const Analytics: React.FC = () => {
USED HOOKS:
  useActivity
  useActivityStats
  useAnalyticsData
  useCollectionStats
  useEffect
  useState
API CALLS/ENDPOINTS:

--- FILE: ./features/analytics/components/analytics/ActivityTimeline.tsx ---
IMPORTS:
  import React from 'react';
  import { GlassmorphismContainer } from '../effects/GlassmorphismContainer';
  import { ContentLoading } from '../common/LoadingStates';
  import {
  import { displayPrice, getRelativeTime } from '../../../shared/utils/helpers/formatting';
  import { LineChart } from 'lucide-react';
FUNCTIONS/METHODS:
  export const ActivityTimeline: React.FC<ActivityTimelineProps> = ({
TYPES/INTERFACES:
  export interface ActivityTimelineProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/analytics/components/analytics/index.ts ---
IMPORTS:
  export { default as AnalyticsBackground } from './AnalyticsBackground';
  export { default as AnalyticsHeader } from './AnalyticsHeader';
  export { default as ActivityTimeline } from './ActivityTimeline';
  export { default as CategoryStats } from './CategoryStats';
  export { default as MetricCard } from './MetricCard';
  export { default as MetricsGrid } from './MetricsGrid';
  export type { AnalyticsBackgroundProps } from './AnalyticsBackground';
  export type { AnalyticsHeaderProps } from './AnalyticsHeader';
  export type { ActivityTimelineProps } from './ActivityTimeline';
  export type { CategoryStatsProps } from './CategoryStats';
  export type { MetricCardProps } from './MetricCard';
  export type { MetricsGridProps } from './MetricsGrid';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type { AnalyticsBackgroundProps } from './AnalyticsBackground';
  export type { AnalyticsHeaderProps } from './AnalyticsHeader';
  export type { ActivityTimelineProps } from './ActivityTimeline';
  export type { CategoryStatsProps } from './CategoryStats';
  export type { MetricCardProps } from './MetricCard';
  export type { MetricsGridProps } from './MetricsGrid';
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/analytics/components/analytics/CategoryStats.tsx ---
IMPORTS:
  import { DollarSign, Gavel, Package, Settings } from 'lucide-react';
  import React from 'react';
  import { GlassmorphismContainer } from '../effects/GlassmorphismContainer';
FUNCTIONS/METHODS:
  export const CategoryStats: React.FC<CategoryStatsProps> = ({
TYPES/INTERFACES:
  export interface CategoryStatsProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/analytics/components/analytics/AnalyticsBackground.tsx ---
IMPORTS:
  import React from 'react';
FUNCTIONS/METHODS:
  export const AnalyticsBackground: React.FC<AnalyticsBackgroundProps> = ({
TYPES/INTERFACES:
  export interface AnalyticsBackgroundProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/analytics/components/analytics/AnalyticsHeader.tsx ---
IMPORTS:
  import { BarChart3 } from 'lucide-react';
  import React from 'react';
  import GlassmorphismHeader from '../common/GlassmorphismHeader';
FUNCTIONS/METHODS:
  export const AnalyticsHeader: React.FC<AnalyticsHeaderProps> = ({
TYPES/INTERFACES:
  export interface AnalyticsHeaderProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./features/analytics/components/analytics/MetricsGrid.tsx ---
IMPORTS:
  import {
  import React from 'react';
  import { MetricCard } from './MetricCard';
  import { getRelativeTime } from '../../../shared/utils/helpers/formatting';
FUNCTIONS/METHODS:
  export const MetricsGrid: React.FC<MetricsGridProps> = ({
TYPES/INTERFACES:
  export interface MetricsGridProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/validation/formValidation.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const validationPatterns = {
  export const validationMessages = {
    required: (fieldName: string) => `${fieldName} is required`,
    min: (fieldName: string, min: number) =>
    max: (fieldName: string, max: number) =>
    pattern: (fieldName: string, expected: string) =>
  export const commonValidationRules = {
      custom: (value: string) => {
      custom: (value: string) => {
      custom: (value: string) => {
      custom: (value: string) => {
      custom: (value: string) => {
      custom: (value: string) => {
  export const formValidationRules = {
  export const validateField = (
  export const validateForm = (
  export const createRHFValidation = (
  export const getErrorDisplayProps = (error?: string) => ({
TYPES/INTERFACES:
  export interface ValidationRule {
  export interface FormValidationRules {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/transformers/unifiedResponseTransformer.ts ---
IMPORTS:
  import { 
FUNCTIONS/METHODS:
  export const getTransformer = () => UnifiedResponseTransformer.getInstance();
  export const transformResponse = <T>(responseData: any): T => {
  export const transformWithStrategy = <T>(responseData: any, strategy: string): T => {
  export const ApiTransformers = {
  export const migrateTransformation = {
TYPES/INTERFACES:
  export interface TransformationStrategy<T> {
USED HOOKS:
API CALLS/ENDPOINTS:
      const strategy = this.strategies.get(strategyName);

--- FILE: ./shared/utils/transformers/apiOptimization.ts ---
IMPORTS:
  import { AxiosRequestConfig, AxiosResponse } from 'axios';
FUNCTIONS/METHODS:
  function generateCacheKey(config: AxiosRequestConfig): string {
  function isCacheValid(entry: CacheEntry): boolean {
  export function getCachedData<T>(cacheKey: string): T | null {
  export function setCacheData<T>(
  export function deduplicateRequest<T>(
    requestFn: () => Promise<AxiosResponse<T>>
  export function optimizedApiRequest<T>(
    requestFn: () => Promise<AxiosResponse<T>>,
  export function clearApiCache(): void {
  export function cleanupExpiredCache(): void {
  export function getCacheStats(): {
TYPES/INTERFACES:
  interface CacheEntry<T = any> {
USED HOOKS:
API CALLS/ENDPOINTS:
    const entry = requestCache.get(cacheKey);
      requestCache.delete(cacheKey);
    const existingRequest = pendingRequests.get(cacheKey);
      pendingRequests.delete(cacheKey);
        requestCache.delete(key);

--- FILE: ./shared/utils/transformers/responseTransformer.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const extractResponseData = <T>(responseData: any): T => {
  export const isMetadataObject = (key: string, value: any): boolean => {
  export const convertObjectIdToString = (objectId: any): string => {
  const isObjectIdField = (fieldName: string): boolean => {
  export const mapFieldNames = <T>(data: T): T => {
  export const mapMongoIds = <T>(data: T): T => {
  export const transformResponse = <T>(
  export const transformApiResponse = <T>(responseData: any): T => {
  export const transformNewApiResponse = <T>(responseData: any): T => {
  export const transformStandardResponse = <T>(responseData: any): T => {
  export const transformRequestData = <T>(requestData: T): T => {
  export const transformResponseNoIdMapping = <T>(responseData: any): T => {
  export const transformResponseWithCustom = <T>(
  export const createResponseTransformer = <T>(
  export const ResponseTransformers = {
TYPES/INTERFACES:
  export interface StandardApiResponse<T> {
  export interface APIResponse<T> {
  interface TransformationConfig {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/api/ZipImageUtility.ts ---
IMPORTS:
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface ZipImageConfig {
USED HOOKS:
API CALLS/ENDPOINTS:
          const response = await fetch(url);

--- FILE: ./shared/utils/ui/imageUtils.ts ---
IMPORTS:
  import { generateId } from '../helpers/common';
FUNCTIONS/METHODS:
  export const createExistingImagePreview = (
  export const processImageFiles = async (
  export const cleanupObjectURL = (preview: ImagePreview) => {
TYPES/INTERFACES:
  export interface ImagePreview {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/ui/themeExport.ts ---
IMPORTS:
  import {
  import { exportToJSON } from './fileOperations';
FUNCTIONS/METHODS:
  export const saveCustomPreset = (
  export const loadCustomPreset = (name: string): ThemeConfiguration | null => {
  export const getCustomPresetNames = (): string[] => {
  export const deleteCustomPreset = (name: string): void => {
  export const exportTheme = (
  export const exportThemeCollection = (
  export const exportAllCustomPresets = (
  export const importThemeFromFile = (file: File): Promise<ThemeImportResult> => {
  export const parseThemeJSON = (jsonContent: string): ThemeImportResult => {
  const validateAndExtractTheme = (theme: ExportedTheme): ThemeImportResult => {
  export const validateThemeConfiguration = (config: any): ThemeConfiguration => {
  export const importAndSavePreset = async (
  export const importAndSavePresetCollection = async (
  export const generateThemeFilename = (
  export const validateThemeFile = (
  export const createThemeBackup = (config: ThemeConfiguration): void => {
  export const getThemeBackups = (): ExportedTheme[] => {
  export const restoreThemeFromBackup = (
  export const presetToExportable = (
  export const getThemeConfigSummary = (config: ThemeConfiguration): string => {
TYPES/INTERFACES:
  export interface ExportedTheme {
  export interface ExportedThemeCollection {
  export interface ThemeImportResult {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/ui/cosmicEffects.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const generateParticleStyles = (
  export const COSMIC_GRADIENTS = {
  export const COSMIC_ANIMATIONS = {
  export const generateCosmicBackground = (
TYPES/INTERFACES:
  export interface ParticleConfig {
  export interface CosmicGradient {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/ui/classNameUtils.ts ---
IMPORTS:
  import { type ClassValue } from 'clsx';
  import {
  import { VisualTheme, Density, AnimationIntensity } from '../types/themeTypes';
  import { cn } from './themeUtils';
FUNCTIONS/METHODS:
  export function cva(
  export function cvn(conditions: Record<string, boolean>): string {
  export function responsive(config: {
  export function stateClasses(
  export function sizeClasses(
  export function variantClasses(
  export function themeAware(config: {
  export function glassmorphism(
  export function animationClasses(
  export function colorSchemeClasses(
  export function focusRing(
  export function hoverEffect(
  export function loadingClasses(
  export function disabledClasses(isDisabled: boolean): string {
  export function errorClasses(hasError: boolean): string {
  export function buttonClasses(config: {
  export function inputClasses(config: {
  export function cardClasses(config: {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/ui/themeConfig.ts ---
IMPORTS:
  import {
FUNCTIONS/METHODS:
  export const useCentralizedTheme = (): CentralizedThemeConfig => {
  export const themeUtils = {
    shouldDisableAnimations: (config: CentralizedThemeConfig): boolean => {
    shouldShowParticles: (config: CentralizedThemeConfig): boolean => {
    getAdjustedOpacity: (
    isHighContrast: (config: CentralizedThemeConfig): boolean => {
TYPES/INTERFACES:
  export interface CentralizedThemeConfig {
USED HOOKS:
  useAccessibilityTheme
  useAnimationTheme
  useCentralizedTheme
  useLayoutTheme
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/ui/context7Styles.ts ---
IMPORTS:
  import React from 'react';
  import { ImageAspectInfo, ResponsiveImageConfig } from './file/imageProcessing';
FUNCTIONS/METHODS:
  export const getContext7ContainerClasses = (
  export const getContext7ImageClasses = (
  export const getContext7GlassOverlay = (
  export const getContext7ShimmerEffect = (): string => {
  export const getContext7HolographicBorderStyles = (
  export const getContext7GridClasses = (itemCount: number): string => {
  export const getContext7SpacingClasses = (
  export const getContext7AnimationClasses = (
  export const context7Keyframes = `
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/ui/themeDebug.ts ---
IMPORTS:
  import {
  import {
  import {
FUNCTIONS/METHODS:
  export const themeDebugger = {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/ui/themeUtils.ts ---
IMPORTS:
  import { clsx, type ClassValue } from 'clsx';
  import { twMerge } from 'tailwind-merge';
  import {
  import { ThemeColor, getFormTheme } from '../../../theme/formThemes';
  import { VisualTheme } from '../types/themeTypes';
FUNCTIONS/METHODS:
  export function cn(...inputs: ClassValue[]): string {
  export function generateThemeClasses(
  export function themeOverrideToClasses(override: ThemeOverride): string {
  export const buttonStyleConfig: ComponentStyleConfig = {
  export const inputStyleConfig: ComponentStyleConfig = {
  export const cardStyleConfig: ComponentStyleConfig = {
  export const badgeStyleConfig: ComponentStyleConfig = {
  export const defaultAnimationConfig: ComponentAnimationConfig = {
  export const subtleAnimationConfig: ComponentAnimationConfig = {
  export const enhancedAnimationConfig: ComponentAnimationConfig = {
  export function getThemeConfiguration(colorScheme: ThemeColor = 'dark') {
  export function mergeThemeProps(
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/file/csvExport.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const exportToCSV = <T extends Record<string, any>>(
  const escapeCSVField = (value: string): string => {
  export const commonCSVColumns = {
        formatter: (value: number) => value?.toFixed(2) || '0.00',
        formatter: (value: number) => value?.toFixed(2) || '0.00',
        formatter: (value: number) => value?.toFixed(2) || '0.00',
        formatter: (value: number) => value?.toFixed(1) || '0.0',
        formatter: (value: string) => {
TYPES/INTERFACES:
  export interface CSVColumn {
  export interface CSVExportOptions {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/file/exportFormats.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const exportToJSON = <T extends Record<string, any>>(
  export const exportToPDF = <T extends Record<string, any>>(
TYPES/INTERFACES:
  export type ExportFormat = 'csv' | 'json' | 'pdf';
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/file/imageProcessing.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const detectImageAspectRatio = async (
  export const classifyAspectRatio = (ratio: number): ImageAspectInfo => {
  export const getResponsiveImageConfig = (
  export const buildResponsiveImageClasses = (
  export const getOptimalGridLayout = (
  export const preloadImageWithAspectRatio = async (
  export const createResponsiveSrcSet = (
  export const getOptimalSizesAttribute = (
TYPES/INTERFACES:
  export interface ImageAspectInfo {
  export interface ResponsiveImageConfig {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/exportUtils.ts ---
IMPORTS:
  import {
  import {
  import {
FUNCTIONS/METHODS:
  export const EXPORT_CONFIGS: Record<string, ExportConfig> = {
  export const generateExportFilename = (
  export const getExportConfig = (configKey: string): ExportConfig => {
  export const getExportConfigKey = (
  export const validateExportRequest = (
  export const formatExportSuccessMessage = (
  export const formatExportErrorMessage = (
  export const supportsBatchExport = (format: ExportFormat): boolean => {
  export const getRecommendedBatchSize = (format: ExportFormat): number => {
  export const shouldChunkExport = (
  export const validateOrderedExportRequest = (
  export const applyExportOrdering = (
  export const generateOrderedExportFilename = (
  export const prepareItemsForOrderedExport = (
  export const getOrderingSummary = (request: OrderedExportRequest): string => {
  export const formatOrderedExportSuccessMessage = (
TYPES/INTERFACES:
  export interface ExportConfig {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/performanceTest.ts ---
IMPORTS:
  import { unifiedApiClient } from '../api/unifiedApiClient';
FUNCTIONS/METHODS:
  export const testApiCaching = async (): Promise<CacheTestResult> => {
  export const testRequestDeduplication = async (): Promise<
  export const testDashboardLoadPerformance =
  export const testLazyLoading = async (): Promise<PerformanceTestResult[]> => {
  export const runPerformanceTestSuite = async () => {
TYPES/INTERFACES:
  interface PerformanceTestResult {
  interface CacheTestResult {
USED HOOKS:
API CALLS/ENDPOINTS:
      await unifiedApiClient.get(testUrl);
      await unifiedApiClient.get(testUrl);
          await unifiedApiClient.get(testUrl);
          unifiedApiClient.get('/status').catch(() => null),
          unifiedApiClient.get('/collection/stats').catch(() => null),
          unifiedApiClient.get('/activities/recent').catch(() => null),

--- FILE: ./shared/utils/helpers/common.ts ---
IMPORTS:
  export { useDebounce, useDebouncedCallback } from '../../hooks/useDebounce';
  export { cn } from '../ui/themeUtils';
  export { debounce } from './debounceUtils';
FUNCTIONS/METHODS:
  export const safeArrayAccess = <T>(
  export const deepClone = <T>(obj: T): T => {
  export const isEmpty = (value: any): boolean => {
  export const throttle = <T extends (...args: any[]) => any>(
  export const generateId = (prefix: string = 'id'): string => {
  export const capitalize = (str: string): string => {
  export const toKebabCase = (str: string): string => {
  export const toCamelCase = (str: string): string => {
  export const safeJsonParse = <T>(jsonString: string, fallback: T): T => {
  export const isDevelopment = (): boolean => {
  export const isProduction = (): boolean => {
  export const retry = async <T>(
    fn: () => Promise<T>,
  export const createArray = <T>(
  export const uniqueBy = <T>(array: T[], keyFn: (item: T) => any): T[] => {
  export const groupBy = <T>(
    keyFn: (item: T) => string | number
  export const sortBy = <T>(
  export const getItemTitle = (item: any): string => {
  export const getItemSubtitle = (item: any): string => {
  export const getSetName = (item: any): string => {
  export const getItemType = (
  export const getItemDisplayData = (item: any) => {
TYPES/INTERFACES:
USED HOOKS:
  useDebounce
  useDebouncedCallback
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/itemDisplayHelpers.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const getStatusColor = (status: string): string => {
  export const getItemCategoryColor = (category: string): string => {
  export const formatItemCategory = (category: string): string => {
  export const getImageUrl = (
  export const getItemDisplayData = (item: any): ItemDisplayData => {
  export const getItemTitle = (item: any): string => {
  export const getItemSubtitle = (item: any): string => {
  export const formatCurrency = (amount: number | undefined): string => {
  export const formatDate = (date: string | Date | undefined): string => {
TYPES/INTERFACES:
  export interface ItemDisplayData {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/auctionStatusUtils.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const AUCTION_STATUSES = {
  export const getStatusColor = (status: string): string => {
  export const getStatusPriority = (status: string): number => {
  export const isActiveStatus = (status: string): boolean => {
  export const isCompletedStatus = (status: string): boolean => {
  export const getStatusLabel = (status: string): string => {
  export const getAllStatuses = (): string[] => {
TYPES/INTERFACES:
  export type AuctionStatus =
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/orderingUtils.ts ---
IMPORTS:
  import {
FUNCTIONS/METHODS:
  export const getItemCategory = (item: CollectionItem): ItemCategory => {
  export const getItemDisplayName = (item: CollectionItem): string => {
  export const getSortablePrice = (item: CollectionItem): number => {
  export const toOrderedCollectionItem = (
  export const sortItemsByPrice = (
  export const groupItemsByCategory = (
  export const sortCategoriesByPrice = (
  export const applyItemOrder = (
  export const validateItemOrder = (
  export const moveItemInArray = <T>(
  export const moveItemUp = (order: string[], itemId: string): string[] => {
  export const moveItemDown = (order: string[], itemId: string): string[] => {
  export const resetToDefaultOrder = (items: CollectionItem[]): string[] => {
  export const generateOrderFromItems = (items: CollectionItem[]): string[] => {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:
      const item = itemMap.get(itemId);
        itemMap.delete(itemId);

--- FILE: ./shared/utils/helpers/fileOperations.ts ---
IMPORTS:
  import {
  import {
  import {
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/validation/RuntimeValidator.ts ---
IMPORTS:
  import {
FUNCTIONS/METHODS:
  export function validateCardFormData(data: unknown): ValidationResult<{
  export function validateAuctionFormData(data: unknown): ValidationResult<{
  export function validateApiResponse<T>(
  export function validateCollectionItem(data: unknown): ValidationResult<{
  export function validateSearchParams(data: unknown): ValidationResult<{
  export function safeString(value: unknown, fallback = ''): string {
  export function safeNumber(value: unknown, fallback = 0): number {
  export function safeBoolean(value: unknown, fallback = false): boolean {
  export function safeArray<T>(
    itemValidator: (item: unknown) => item is T,
  export function safeProperty<T>(
    validator: (value: unknown) => value is T,
  export function sanitizeUserInput(input: unknown): string {
  export function validateFileUpload(file: unknown): ValidationResult<{
  export function createStrictValidator<T>(
    validator: (data: unknown) => ValidationResult<T>
  export function validateBulkData<T>(
    validator: (item: unknown) => ValidationResult<T>
TYPES/INTERFACES:
  export interface ValidationResult<T> {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/typeGuards/TypeGuards.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export function isString(value: unknown): value is string {
  export function isNonEmptyString(value: unknown): value is string {
  export function isNumber(value: unknown): value is number {
  export function isPositiveNumber(value: unknown): value is number {
  export function isBoolean(value: unknown): value is boolean {
  export function isObject(value: unknown): value is Record<string, unknown> {
  export function isArray(value: unknown): value is unknown[] {
  export function isNonEmptyArray<T>(value: unknown): value is T[] {
  export function isNullOrUndefined(value: unknown): value is null | undefined {
  export function isDefined<T>(value: T | null | undefined): value is T {
  export function isFile(value: unknown): value is File {
  export function isFileArray(value: unknown): value is File[] {
  export function isValidEmail(value: unknown): value is string {
  export function isValidUrl(value: unknown): value is string {
  export function isValidDateString(value: unknown): value is string {
  export function hasSuccessProperty(
  export function hasDataProperty<T = unknown>(
  export function hasErrorProperty(value: unknown): value is { error: unknown } {
  export function isApiResponse(
  export function isValidId(value: unknown): value is string | number {
  export function isCardType(value: unknown): value is 'psa' | 'raw' {
  export function isItemCategory(
  export function isAuctionStatus(
  export function isPriceHistoryEntry(
  export function isSaleDetails(value: unknown): value is {
  export function isCard(value: unknown): value is {
  export function isAuction(value: unknown): value is {
  export function isSearchResult(value: unknown): value is {
  export function isFilter(value: unknown): value is Record<string, unknown> {
  export function isError(value: unknown): value is Error {
  export function hasErrorMessage(value: unknown): value is { message: string } {
  export function hasErrorCode(
  export function assertType<T>(
    guard: (value: unknown) => value is T,
  export function safeCast<T>(
    guard: (value: unknown) => value is T
  export function createArrayGuard<T>(
    itemGuard: (value: unknown) => value is T
  export function createObjectGuard<
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/activityHelpers.ts ---
IMPORTS:
  import {
  import { ACTIVITY_TYPES } from '../../hooks/useActivity';
FUNCTIONS/METHODS:
  export const getActivityColor = (type: string): string => {
  export const getActivityIcon = (type: string): LucideIcon => {
  export const formatActivityTypeLabel = (type: string): string => {
  export const categorizeActivity = (
  export const processActivitiesForAnalytics = (activities: any[]) => {
TYPES/INTERFACES:
  export interface ActivityCategoryStats {
USED HOOKS:
  useActivity
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/errorHandler.ts ---
IMPORTS:
  import { error as logError } from '../performance/logger';
  import { APIResponse } from './responseTransformer';
  import {
FUNCTIONS/METHODS:
  const isApiResponseError = (error: any): boolean => {
  const isValidApiErrorResponse = (responseData: any): boolean => {
  export const handleApiError = (error: unknown, userMessage?: string): void => {
  export const getLastApiError = (): APIError | null => {
  export const handleEnhancedApiError = (
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/debounceUtils.ts ---
IMPORTS:
  import { useCallback, useEffect, useRef } from 'react';
FUNCTIONS/METHODS:
  export const debounce = <T extends (...args: any[]) => any>(
  export const useDebounce = <T extends (...args: any[]) => any>(
TYPES/INTERFACES:
USED HOOKS:
  useCallback
  useDebounce
  useEffect
  useRef
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/navigation.ts ---
IMPORTS:
  import { log } from '../performance/logger';
FUNCTIONS/METHODS:
  const validateAndSanitizeId = (id: any, context: string): string | null => {
  export const navigationHelper = {
    navigateTo: (path: string) => {
    navigateToItemDetail: (type: 'psa' | 'raw' | 'sealed', id: any) => {
    navigateToAuctionDetail: (auctionId: any) => {
      item: (type: 'psa' | 'raw' | 'sealed', id: any) => {
      auction: (auctionId: any) => {
      item: () => {
      auction: () => {
    navigateToCollection: () => {
    navigateToAuctions: () => {
      sets: () => {
      products: () => {
      sales: () => {
      general: () => {
    reload: () => {
    goBack: () => {
    getCurrentPath: () => {
    isCurrentPath: (path: string) => {
    isEditPage: () => {
    getCollectionItemParams: () => {
    getAuctionIdFromUrl: () => {
    isValidNavigationId: (id: any): boolean => {
      itemDetail: (type: 'psa' | 'raw' | 'sealed', id: any): string | null => {
      auctionDetail: (auctionId: any): string | null => {
      editItem: (type: 'psa' | 'raw' | 'sealed', id: any): string | null => {
      editAuction: (auctionId: any): string | null => {
    recoverFromNavigationError: (
    validateNavigationIds: (ids: any[], context: string): string[] => {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/constants.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const API_BASE_URL = 'http://localhost:3000/api';
  export const SEARCH_CONFIG = {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/searchHelpers.ts ---
IMPORTS:
  import { UseFormClearErrors, UseFormSetValue } from 'react-hook-form';
  import { SearchResult, SearchParams } from '../types/searchTypes';
FUNCTIONS/METHODS:
  export const mapSetNameForProducts = (setName: string): string => {
  export const mapSetNameForSets = (setName: string): string => {
  export const buildQueryParams = (params: SearchParams): URLSearchParams => {
  export const autoFillField = (
  export const autoFillProductSetData = (
  export const autoFillCardSetData = (
  export const autoFillProductData = (
  export const autoFillCardData = (
  export const autoFillFromProductSelection = (
  export const autoFillFromCardSelection = (
  export const handleSearchError = (
    setError: (error: string | null) => void,
    setLoading: (loading: boolean) => void
  export const getSearchIconConfig = (type: IconConfig['type']) => {
  export const getDisplayName = (result: SearchResult): string => {
  export const getResultMetadata = (result: SearchResult) => {
  export const isValidSearchQuery = (
  export const SEARCH_DEBOUNCE_DELAY = 300;
  export const MIN_SEARCH_LENGTH = 1; // Optimized for immediate search
  export const MAX_SUGGESTIONS = 20;
TYPES/INTERFACES:
  export interface AutoFillConfig {
  export interface IconConfig {
USED HOOKS:
  useSearch
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/storageUtils.ts ---
IMPORTS:
  import { ItemOrderingState, SortMethod } from '../domain/models/ordering';
FUNCTIONS/METHODS:
  export const STORAGE_KEYS = {
  export const localStorage = new StorageManager(window.localStorage);
  export const sessionStorage = new StorageManager(window.sessionStorage);
  export const orderingPersistence = OrderingStatePersistence.getInstance();
  export const storageHelpers = {
    saveOrdering: (state: ItemOrderingState): boolean => {
    loadOrdering: (): ItemOrderingState | null => {
    checkStorageHealth: (): boolean => {
    migrateOldFormat: (): void => {
TYPES/INTERFACES:
  export interface ExportSessionData {
  export interface ExportPreferences {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/helpers/performanceOptimization.ts ---
IMPORTS:
  import { CACHE_TTL } from '../config/cacheConfig';
FUNCTIONS/METHODS:
  export const detectCacheStrategy = (url: string) => {
  export const deduplicateRequest = async <T>(
    requestFn: () => Promise<T>
  export const prefetchCommonRoutes = async (currentPath: string) => {
  export const throttle = <T extends (...args: any[]) => any>(
  export const debounce = <T extends (...args: any[]) => any>(
  export const cleanupExpiredCache = () => {
  export const trackMemoryUsage = () => {
  export const collectPerformanceMetrics = () => {
  const calculateCacheHitRate = (): number => {
  export const dynamicImportWithFallback = async <T>(
    importFn: () => Promise<{ default: T }>,
  export const preloadCriticalResources = (resources: string[]) => {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:
      return pendingRequests.get(key) as Promise<T>;
      pendingRequests.delete(key);

--- FILE: ./shared/utils/helpers/unifiedUtilities.ts ---
IMPORTS:
  import { clsx, type ClassValue } from 'clsx';
  import { twMerge } from 'tailwind-merge';
  import {
  import { ThemeColor, getFormTheme } from '../theme/formThemes';
FUNCTIONS/METHODS:
  export function cn(...inputs: ClassValue[]): string {
  export function cva(
  export function cvaMultiple(
  export function cnTheme(
  export function getSizeClasses(size: ComponentSize): {
  export function getVariantClasses(variant: ComponentVariant): {
  export function getStateClasses(state: ComponentState): string {
  export function getDensitySpacing(density: Density): {
  export function getAnimationClasses(
  export function getGradientClasses(
  export function getTextGradientClasses(
  export function getGlassmorphismClasses(
  export function getFormElementClasses(
  export function getResponsiveClasses(classes: {
  export function getA11yClasses(options: {
  export function getMemoizedClasses(
    generator: () => string
  export function clearClassCache(): void {
TYPES/INTERFACES:
USED HOOKS:
  useDebounce
  useDebouncedCallback
  useDebouncedValue
API CALLS/ENDPOINTS:
      return classCache.get(key)!;

--- FILE: ./shared/utils/helpers/formatting.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export function formatCardNameForDisplay(cardName: string): string {
  export function formatDisplayNameWithNumber(
  export function reconstructTechnicalCardName(displayName: string): string {
  export function createCardNameInfo(
  export const formatPrice = (price: any): string | null => {
  export const formatCompactNumber = (num: number): string => {
  export const formatBytes = (bytes: number, decimals: number = 2): string => {
  export const formatPercentage = (
  export const formatNumberWithSeparators = (num: number): string => {
  export const displayPrice = (
  export const formatPriceChange = (
  export const getRelativeTime = (timestamp: string | Date): string => {
  export const formatTimestamp = (timestamp: string | Date): string => {
  export const formatDate = (timestamp: string | Date): string => {
  export const formatTime = (timestamp: string | Date): string => {
  export const formatDateTime = (timestamp: string | Date): string => {
  export const formatDateWithTime = (dateString: string): string => {
  export const processImageUrl = (
TYPES/INTERFACES:
  export interface CardNameInfo {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/theme/debugging.ts ---
IMPORTS:
  import {
  import { validateThemeConfiguration } from './validation';
  import { getThemePerformanceMetrics } from './performance';
FUNCTIONS/METHODS:
  export function extractThemeProperties(): Record<string, string> {
  export function logThemeState(config: ThemeConfiguration): void {
  export function createThemeDebugger() {
      testAllVariants: (
      validateAllComponents: () => {
  export function generateThemeComparison(
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/theme/ThemePropertyManager.ts ---
IMPORTS:
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface AnimationConfig {
  export interface VisualConfig {
  export interface ThemeConfig {
  export interface FormTheme {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/theme/performance.ts ---
IMPORTS:
  import { VisualTheme } from '../../types/themeTypes';
FUNCTIONS/METHODS:
  export function trackThemeSwitch(startTime: number, endTime: number): void {
  export function getThemePerformanceMetrics(): ThemePerformanceMetrics {
    onThemeChange: (theme: VisualTheme) => void
  export function checkThemePerformance(): {
TYPES/INTERFACES:
  export interface ThemePerformanceMetrics {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/theme/validation.ts ---
IMPORTS:
  import { VisualTheme, ThemeConfiguration } from '../../types/themeTypes';
  import { formThemes } from '../../theme/formThemes';
FUNCTIONS/METHODS:
  export function validateThemeConfiguration(
  export function debugThemeConflicts(): {
TYPES/INTERFACES:
  export interface ValidationResult {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/performance/logger.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const log = (...args: unknown[]): void => {
  export const error = (...args: unknown[]): void => {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/performance/lazyImports.ts ---
IMPORTS:
  import { lazy, ComponentType } from 'react';
FUNCTIONS/METHODS:
  export const lazyLoadDevComponent = <T extends ComponentType<any>>(
    importFn: () => Promise<{ default: T }>
  export const ThemeDebuggerLazy = lazyLoadDevComponent(
  export const themeUtilsLazy = {
        validateTheme: () => true,
        debugTheme: () => {},
        exportThemeDebug: () => ({}),
  export const bundleConfig = {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/utils/performance/apiLogger.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  const isApiLoggingEnabled = (): boolean => {
  export const createApiLogger = (apiName: string): ApiLogger => {
  export const apiLog = {
    debug: (message: string, data?: any) => {
    error: (message: string, error?: any) => {
    warn: (message: string, data?: any) => {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/interfaces/api/ICollectionApiService.ts ---
IMPORTS:
  import { IPsaGradedCard, IRawCard } from '../../domain/models/card';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
  import { ISaleDetails } from '../../domain/models/common';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface PsaGradedCardsParams {
  export interface RawCardsParams {
  export interface SealedProductCollectionParams {
  export interface IPsaCardApiService {
  export interface IRawCardApiService {
  export interface ISealedProductApiService {
  export interface ICollectionApiService
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/interfaces/api/ISetProductApiService.ts ---
IMPORTS:
  import { ISetProduct } from '../../domain/models/setProduct';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface SetProductFilters {
  export interface ISetProductApiService {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/interfaces/api/IExportApiService.ts ---
IMPORTS:
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type ExportItemType =
  export type ExportFormat = 'zip' | 'facebook-text' | 'dba' | 'json';
  export interface ExportRequest {
  export interface OrderedExportRequest extends ExportRequest {
  export interface ExportResult {
  export interface IImageExportApiService {
  export interface IDataExportApiService {
  export interface IExportApiService
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/interfaces/api/IUploadApiService.ts ---
IMPORTS:
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface IUploadApiService {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/interfaces/api/ISearchApiService.ts ---
IMPORTS:
  import { ISet } from '../../domain/models/card';
  import { IProduct } from '../../domain/models/product';
  import { ISetProduct } from '../../domain/models/setProduct';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface HierarchicalSearchConfig {
  export interface SearchContext {
  export interface SetProductSelectionResult {
  export interface ProductSelectionResult {
  export interface SetSelectionResult {
  export interface ISearchApiService {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/domain/services/SalesAnalyticsService.ts ---
IMPORTS:
  import { ISale, ISalesGraphData } from '../models/sale';
FUNCTIONS/METHODS:
  export const calculateTotalRevenue = (sales: ISale[]): number => {
  export const calculateTotalProfit = (sales: ISale[]): number => {
  export const processGraphData = (
  export const aggregateByCategory = (sales: ISale[]) => {
  export const calculateTrendAnalysis = (graphData: ISalesGraphData[]) => {
  export const filterSalesByDateRange = (
  export const calculateKPIs = (sales: ISale[]) => {
TYPES/INTERFACES:
  interface RawGraphDataPoint {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/domain/models/common.ts ---
IMPORTS:
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface IPriceHistoryEntry {
  export interface IBuyerAddress {
  export interface ISaleDetails {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/domain/models/sealedProduct.ts ---
IMPORTS:
  import { IPriceHistoryEntry, ISaleDetails } from './common';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface ISealedProductDocument extends ISealedProduct {
  export interface ICardMarketReferenceProduct {
  export interface ISealedProduct {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/domain/models/sale.ts ---
IMPORTS:
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface ISalesSummary {
  export interface ISalesGraphData {
  export interface ISale {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/domain/models/card.ts ---
IMPORTS:
  import { IPriceHistoryEntry, ISaleDetails } from './common';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface IPsaGradedCardDocument extends IPsaGradedCard {
  export interface IRawCardDocument extends IRawCard {
  export interface ICardDocument extends ICard {
  export interface ISet {
  export interface ISetDocument extends ISet {
  export interface IGrades {
  export interface ICard {
  export interface IPsaGradedCard {
  export interface IRawCard {
  export interface ISealedProduct {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/domain/models/product.ts ---
IMPORTS:
  import { ISetProduct } from './setProduct';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface IProduct {
  export interface IProductDocument extends IProduct {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/domain/models/ordering.ts ---
IMPORTS:
  import { IPsaGradedCard, IRawCard } from './card';
  import { ISealedProduct } from './sealedProduct';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type CollectionItem = IPsaGradedCard | IRawCard | ISealedProduct;
  export type ItemCategory = 'PSA_CARD' | 'RAW_CARD' | 'SEALED_PRODUCT';
  export type SortMethod = 'manual' | 'price_desc' | 'price_asc' | null;
  export type OrderedCollectionItem = CollectionItem & {
  export interface ItemOrderingState {
  export type OrderingError =
  export interface OrderingErrorContext {
  export interface OrderValidationResult {
  export interface CategoryOrderingOptions {
  export interface GlobalOrderingOptions {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/domain/models/setProduct.ts ---
IMPORTS:
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface ISetProduct {
  export interface ISetProductDocument extends ISetProduct {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/domain/models/auction.ts ---
IMPORTS:
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type ItemCategory = 'SealedProduct' | 'PsaGradedCard' | 'RawCard';
  export interface IAuctionItem {
  export interface IAuction {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/forms/FormValidationService.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const VALIDATION_CONFIGS = {
TYPES/INTERFACES:
  export interface ValidationResult {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/SetProductApiService.ts ---
IMPORTS:
  import * as setProductsApi from '../api/setProductsApi';
  import * as productsApi from '../api/productsApi';
  import {
  import { ISetProduct } from '../domain/models/setProduct';
  import { IProduct } from '../domain/models/product';
  import {
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { log } from '../utils/performance/logger';
FUNCTIONS/METHODS:
      apiCall: () => Promise<T>
  export const setProductApiService = new SetProductApiService();
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/CollectionApiService.ts ---
IMPORTS:
  import * as collectionApi from '../api/collectionApi';
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISaleDetails } from '../domain/models/common';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { ICollectionApiService } from '../interfaces/api/ICollectionApiService';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { log } from '../utils/performance/logger';
FUNCTIONS/METHODS:
      apiCall: () => Promise<T>
  export const collectionApiService = new CollectionApiService();
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/SearchApiService.ts ---
IMPORTS:
  import { ISet } from '../domain/models/card';
  import { IProduct } from '../domain/models/product';
  import { ISetProduct } from '../domain/models/setProduct';
  import {
  import {
FUNCTIONS/METHODS:
  export const searchApiService = new SearchApiService();
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/CompositeCollectionApiService.ts ---
IMPORTS:
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { ISaleDetails } from '../domain/models/common';
  import {
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/ServiceRegistry.ts ---
IMPORTS:
  import { ICollectionApiService, IPsaCardApiService, IRawCardApiService, ISealedProductApiService } from '../interfaces/api/ICollectionApiService';
  import { IExportApiService } from '../interfaces/api/IExportApiService';
  import { ISearchApiService } from '../interfaces/api/ISearchApiService';
  import { IUploadApiService } from '../interfaces/api/IUploadApiService';
  import { unifiedHttpClient } from './base/UnifiedHttpClient';
  import { PsaCardApiService } from './collection/PsaCardApiService';
  import { RawCardApiService } from './collection/RawCardApiService';
  import { SealedProductApiService } from './collection/SealedProductApiService';
  import { CompositeCollectionApiService } from './CompositeCollectionApiService';
  import { exportApiService } from './ExportApiService';
  import { searchApiService } from './SearchApiService';
  import { uploadApiService } from './UploadApiService';
FUNCTIONS/METHODS:
  export const serviceRegistry = ServiceRegistry.getInstance();
  export const getCollectionApiService = (): ICollectionApiService =>
  export const getPsaCardApiService = (): IPsaCardApiService =>
  export const getRawCardApiService = (): IRawCardApiService =>
  export const getSealedProductApiService = (): ISealedProductApiService =>
  export const getExportApiService = (): IExportApiService =>
  export const getUploadApiService = (): IUploadApiService =>
  export const getSearchApiService = (): ISearchApiService =>
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/collection/SealedProductApiService.ts ---
IMPORTS:
  import * as collectionApi from '../../api/collectionApi';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
  import { ISaleDetails } from '../../domain/models/common';
  import { BaseApiService } from '../base/BaseApiService';
  import { IHttpClient } from '../base/HttpClientInterface';
  import {
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/collection/index.ts ---
IMPORTS:
  export { PsaCardApiService } from './PsaCardApiService';
  export { RawCardApiService } from './RawCardApiService';
  export { SealedProductApiService } from './SealedProductApiService';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/collection/RawCardApiService.ts ---
IMPORTS:
  import * as collectionApi from '../../api/collectionApi';
  import { IRawCard } from '../../domain/models/card';
  import { ISaleDetails } from '../../domain/models/common';
  import { BaseApiService } from '../base/BaseApiService';
  import { IHttpClient } from '../base/HttpClientInterface';
  import {
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/collection/PsaCardApiService.ts ---
IMPORTS:
  import * as collectionApi from '../../api/collectionApi';
  import { IPsaGradedCard } from '../../domain/models/card';
  import { ISaleDetails } from '../../domain/models/common';
  import { BaseApiService } from '../base/BaseApiService';
  import { IHttpClient } from '../base/HttpClientInterface';
  import {
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/base/HttpClientInterface.ts ---
IMPORTS:
  import { EnhancedRequestConfig } from '../../api/unifiedApiClient';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface IHttpClient {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/base/BaseApiService.ts ---
IMPORTS:
  import { IHttpClient } from './HttpClientInterface';
  import { ErrorHandlingService } from './ErrorHandlingService';
  import { EnhancedRequestConfig } from '../../api/unifiedApiClient';
FUNCTIONS/METHODS:
      apiCall: () => Promise<T>
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/base/index.ts ---
IMPORTS:
  export { IHttpClient } from './HttpClientInterface';
  export { UnifiedHttpClient, unifiedHttpClient } from './UnifiedHttpClient';
  export { ErrorHandlingService } from './ErrorHandlingService';
  export { BaseApiService } from './BaseApiService';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/base/UnifiedHttpClient.ts ---
IMPORTS:
  import {
  import { IHttpClient } from './HttpClientInterface';
FUNCTIONS/METHODS:
  export const unifiedHttpClient = new UnifiedHttpClient();
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/base/ErrorHandlingService.ts ---
IMPORTS:
  import { handleApiError } from '../../utils/helpers/errorHandler';
  import { log } from '../../utils/performance/logger';
FUNCTIONS/METHODS:
      apiCall: () => Promise<T>,
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/ExportApiService.ts ---
IMPORTS:
  import * as exportApi from '../api/exportApi';
  import {
  import {
  import { CollectionItem } from '../domain/models/ordering';
FUNCTIONS/METHODS:
  export const exportApiService = new ExportApiService();
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/services/UploadApiService.ts ---
IMPORTS:
  import { uploadMultipleImages } from '../api/uploadApi';
  import { IUploadApiService } from '../interfaces/api/IUploadApiService';
FUNCTIONS/METHODS:
  export const uploadApiService = new UploadApiService();
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/contexts/ThemeContext.tsx ---
IMPORTS:
  import React, {
  import { useTheme as useNextTheme } from 'next-themes';
  import { ThemeColor, formThemes } from '../../theme/formThemes';
  import { ThemePropertyManager } from '../utils/theme/ThemePropertyManager';
  import {
FUNCTIONS/METHODS:
    setVisualTheme: (theme: VisualTheme) => void;
    setColorScheme: (scheme: ColorScheme) => void;
    setDensity: (density: Density) => void;
    setAnimationIntensity: (intensity: AnimationIntensity) => void;
    setPrimaryColor: (color: ThemeColor) => void;
    toggleHighContrast: () => void;
    toggleReducedMotion: () => void;
    setGlassmorphismIntensity: (intensity: number) => void;
    toggleParticleEffects: () => void;
    setCustomProperties: (properties: Record<string, string>) => void;
    applyPreset: (presetId: VisualTheme) => void;
    saveCustomPreset: (name: string, config: ThemeConfiguration) => void;
    loadCustomPreset: (name: string) => void;
    resetToDefaults: () => void;
    getThemeClasses: () => string;
    getCSSProperties: () => Record<string, string>;
    getSystemPreference: () => 'light' | 'dark';
  export const themePresets: ThemePreset[] = [
  export const defaultConfig: ThemeConfiguration = {
  const saveConfig = (config: ThemeConfiguration): void => {
  const loadConfig = (): ThemeConfiguration => {
  export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({
      resolvedTheme: (resolvedTheme as 'light' | 'dark') || 'dark',
  export const useTheme = (): ThemeContextType => {
  export const withTheme = <P extends object>(
TYPES/INTERFACES:
  export interface ThemeContextType {
REACT COMPONENTS:
  export const useTheme = (): ThemeContextType => {
USED HOOKS:
  useCallback
  useContext
  useEffect
  useLegacyTheme
  useNextTheme
  useState
  useTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/contexts/DragDropContext.tsx ---
IMPORTS:
  import React, { createContext, ReactNode, useContext } from 'react';
  import {
  import {
  import { CSS } from '@dnd-kit/utilities';
FUNCTIONS/METHODS:
  export const DragDropProvider: React.FC<DragDropProviderProps> = ({
  export const SortableList: React.FC<SortableListProps> = ({
  export const useDragDrop = () => {
  export const createDragStyle = (
  export const reorderArray = <T,>(
  export const isDragAllowed = (
  export const getDragFeedbackStyles = (
TYPES/INTERFACES:
  export interface DragDropContextValue {
  export interface DragDropProviderProps {
  export interface SortableListProps {
REACT COMPONENTS:
  export const useDragDrop = () => {
USED HOOKS:
  useContext
  useDragDrop
  useSensor
  useSensors
API CALLS/ENDPOINTS:

--- FILE: ./shared/contexts/theme/VisualThemeProvider.tsx ---
IMPORTS:
  import React, { createContext, useContext, useCallback } from 'react';
  import { VisualTheme, ThemePreset } from '../../types/themeTypes';
  import { themePresets } from '../ThemeContext';
FUNCTIONS/METHODS:
    setVisualTheme: (theme: VisualTheme) => void;
    setGlassmorphismIntensity: (intensity: number) => void;
    toggleParticleEffects: () => void;
    applyPreset: (presetId: VisualTheme) => void;
    getPreset: (presetId: VisualTheme) => ThemePreset | undefined;
    onStateChange: (newState: Partial<VisualThemeState>) => void;
  export const VisualThemeProvider: React.FC<VisualThemeProviderProps> = ({
  export const useVisualTheme = (): VisualThemeContextType => {
TYPES/INTERFACES:
  export interface VisualThemeState {
  export interface VisualThemeContextType {
  export interface VisualThemeProviderProps {
REACT COMPONENTS:
  export const useVisualTheme = (): VisualThemeContextType => {
USED HOOKS:
  useCallback
  useContext
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/contexts/theme/AccessibilityThemeProvider.tsx ---
IMPORTS:
  import React, { createContext, useContext, useCallback } from 'react';
FUNCTIONS/METHODS:
    toggleHighContrast: () => void;
    toggleReducedMotion: () => void;
    setHighContrast: (enabled: boolean) => void;
    setReducedMotion: (enabled: boolean) => void;
    getAccessibilityClasses: () => string;
    shouldReduceMotion: () => boolean;
    isHighContrastEnabled: () => boolean;
    onStateChange: (newState: Partial<AccessibilityThemeState>) => void;
  export const AccessibilityThemeProvider: React.FC<
  export const useAccessibilityTheme = (): AccessibilityThemeContextType => {
TYPES/INTERFACES:
  export interface AccessibilityThemeState {
  export interface AccessibilityThemeContextType {
  export interface AccessibilityThemeProviderProps {
REACT COMPONENTS:
  export const useAccessibilityTheme = (): AccessibilityThemeContextType => {
USED HOOKS:
  useAccessibilityTheme
  useCallback
  useContext
API CALLS/ENDPOINTS:

--- FILE: ./shared/contexts/theme/index.ts ---
IMPORTS:
  export { ComposedThemeProvider } from './ComposedThemeProvider';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
  useAccessibilityTheme
  useAnimationTheme
  useLayoutTheme
  useUnifiedTheme
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/contexts/theme/UnifiedThemeProvider.tsx ---
IMPORTS:
  import React, {
  import { useTheme as useNextTheme } from 'next-themes';
  import {
  import { ThemeColor } from '../../theme/formThemes';
FUNCTIONS/METHODS:
    setVisualTheme: (theme: VisualTheme) => void;
    setColorScheme: (scheme: ColorScheme) => void;
    setPrimaryColor: (color: ThemeColor) => void;
    setGlassmorphismIntensity: (intensity: number) => void;
    toggleParticleEffects: () => void;
    setSidebarPosition: (position: 'left' | 'right' | 'hidden') => void;
    setHeaderStyle: (style: 'fixed' | 'sticky' | 'static') => void;
    setContentSpacing: (spacing: 'compact' | 'comfortable' | 'spacious') => void;
    setBorderRadius: (radius: 'none' | 'small' | 'medium' | 'large') => void;
    toggleAnimations: () => void;
    setAnimationSpeed: (speed: 'slow' | 'normal' | 'fast') => void;
    setTransitionDuration: (duration: number) => void;
    setEasing: (
    toggleHighContrast: () => void;
    toggleReduceMotion: () => void;
    toggleScreenReaderOptimization: () => void;
    toggleKeyboardNavigation: () => void;
    toggleFocusVisible: () => void;
    saveTheme: () => void;
    loadTheme: () => void;
    resetTheme: () => void;
    exportTheme: () => string;
    importTheme: (themeData: string) => void;
    applyPreset: (preset: ThemePreset) => void;
    createCustomPreset: (name: string) => void;
    updateCSSProperties: (properties: Record<string, string>) => void;
    applyCSSProperties: () => void;
  export const UnifiedThemeProvider: React.FC<UnifiedThemeProviderProps> = ({
  export const useUnifiedTheme = (): UnifiedThemeContextType => {
  export const useVisualTheme = () => {
  export const useLayoutTheme = () => {
  export const useAnimationTheme = () => {
  export const useAccessibilityTheme = () => {
TYPES/INTERFACES:
  export interface UnifiedThemeState {
  export interface UnifiedThemeContextType extends UnifiedThemeState {
  interface UnifiedThemeProviderProps {
REACT COMPONENTS:
  export const useUnifiedTheme = (): UnifiedThemeContextType => {
  export const useVisualTheme = () => {
  export const useLayoutTheme = () => {
  export const useAnimationTheme = () => {
  export const useAccessibilityTheme = () => {
USED HOOKS:
  useAccessibilityTheme
  useAnimationTheme
  useCallback
  useContext
  useEffect
  useLayoutTheme
  useMemo
  useNextTheme
  useState
  useTheme
  useUnifiedTheme
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/contexts/theme/LayoutThemeProvider.tsx ---
IMPORTS:
  import React, { createContext, useContext, useCallback } from 'react';
  import { Density } from '../../types/themeTypes';
FUNCTIONS/METHODS:
    setDensity: (density: Density) => void;
    getDensityMultiplier: () => number;
    getSpacingTokens: () => DensitySpacing;
    getDensityClasses: () => string;
  const calculateSpacingTokens = (multiplier: number): DensitySpacing => ({
    onStateChange: (newState: Partial<LayoutThemeState>) => void;
  export const LayoutThemeProvider: React.FC<LayoutThemeProviderProps> = ({
  export const useLayoutTheme = (): LayoutThemeContextType => {
TYPES/INTERFACES:
  export interface LayoutThemeState {
  export interface DensitySpacing {
  export interface LayoutThemeContextType {
  export interface LayoutThemeProviderProps {
REACT COMPONENTS:
  export const useLayoutTheme = (): LayoutThemeContextType => {
USED HOOKS:
  useCallback
  useContext
  useLayoutTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/contexts/theme/ComposedThemeProvider.tsx ---
IMPORTS:
  import React, { useState, useEffect, useCallback } from 'react';
  import { useTheme as useNextTheme } from 'next-themes';
  import { ThemeConfiguration, ColorScheme } from '../../types/themeTypes';
  import { ThemePropertyManager } from '../../../shared/utils/theme/ThemePropertyManager';
  import { defaultConfig as originalDefaultConfig } from '../ThemeContext';
  import { ThemeColor } from '../../../theme/formThemes';
  import { VisualThemeProvider, VisualThemeState } from './VisualThemeProvider';
  import { LayoutThemeProvider, LayoutThemeState } from './LayoutThemeProvider';
  import {
  import {
  import { ThemeStorageProvider } from './ThemeStorageProvider';
  import { formThemes } from '../../../theme/formThemes';
FUNCTIONS/METHODS:
  const saveComposedConfig = (config: ComposedThemeState): void => {
  const loadComposedConfig = (): ComposedThemeState => {
  export const ComposedThemeProvider: React.FC<ComposedThemeProviderProps> = ({
TYPES/INTERFACES:
  interface ComposedThemeState {
  export interface ComposedThemeProviderProps {
REACT COMPONENTS:
USED HOOKS:
  useCallback
  useEffect
  useNextTheme
  useState
  useTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/contexts/theme/AnimationThemeProvider.tsx ---
IMPORTS:
  import React, { createContext, useContext, useCallback } from 'react';
  import { AnimationIntensity } from '../../types/themeTypes';
FUNCTIONS/METHODS:
    setAnimationIntensity: (intensity: AnimationIntensity) => void;
    getAnimationDurations: () => AnimationDurations;
    getAnimationDelays: () => AnimationDelays;
    getComplexAnimationDurations: () => ComplexAnimationDurations;
    getAnimationClasses: () => string;
    isAnimationDisabled: () => boolean;
    onStateChange: (newState: Partial<AnimationThemeState>) => void;
  export const AnimationThemeProvider: React.FC<AnimationThemeProviderProps> = ({
  export const useAnimationTheme = (): AnimationThemeContextType => {
TYPES/INTERFACES:
  export interface AnimationThemeState {
  export interface AnimationDurations {
  export interface AnimationDelays {
  export interface ComplexAnimationDurations {
  export interface AnimationThemeContextType {
  export interface AnimationThemeProviderProps {
REACT COMPONENTS:
  export const useAnimationTheme = (): AnimationThemeContextType => {
USED HOOKS:
  useAnimationTheme
  useCallback
  useContext
API CALLS/ENDPOINTS:

--- FILE: ./shared/contexts/theme/ThemeStorageProvider.tsx ---
IMPORTS:
  import React, { createContext, useContext, useCallback } from 'react';
  import { ThemeConfiguration } from '../../types/themeTypes';
FUNCTIONS/METHODS:
    saveCustomPreset: (name: string, config: ThemeConfiguration) => Promise<void>;
    loadCustomPreset: (name: string) => Promise<ThemeConfiguration | null>;
    deleteCustomPreset: (name: string) => Promise<void>;
    getCustomPresets: () => Promise<CustomPreset[]>;
    saveConfiguration: (config: ThemeConfiguration) => Promise<void>;
    loadConfiguration: () => Promise<ThemeConfiguration | null>;
    clearConfiguration: () => Promise<void>;
    exportConfiguration: (config: ThemeConfiguration) => string;
    importConfiguration: (jsonString: string) => ThemeConfiguration | null;
    getStorageInfo: () => Promise<{ used: number; available: number }>;
  const safeJsonParse = <T,>(jsonString: string | null, fallback: T): T => {
    operation: () => T,
  export const ThemeStorageProvider: React.FC<ThemeStorageProviderProps> = ({
  export const useThemeStorage = (): ThemeStorageContextType => {
TYPES/INTERFACES:
  export interface CustomPreset {
  export interface ThemeStorageContextType {
  export interface ThemeStorageProviderProps {
REACT COMPONENTS:
  export const useThemeStorage = (): ThemeStorageContextType => {
USED HOOKS:
  useCallback
  useContext
  useThemeStorage
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useOptimizedSearch.ts ---
IMPORTS:
  import { useState, useCallback, useMemo, useRef, useTransition } from 'react';
  import { useSearch, SearchResult } from './useSearch';
  import { searchApiService } from '../services/SearchApiService';
FUNCTIONS/METHODS:
  export const useOptimizedSearch = (config: OptimizedSearchConfig = {}) => {
  export const useSearchResultSelector = <T>(
    selector: (result: SearchResult) => T,
  export const useSearchPerformance = () => {
TYPES/INTERFACES:
  interface OptimizedSearchConfig {
  interface OptimizedSearchState {
USED HOOKS:
  useCallback
  useMemo
  useOptimizedSearch
  useRef
  useSearch
  useSearchPerformance
  useSearchResultSelector
  useState
  useTransition
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useExportOperations.ts ---
IMPORTS:
  import { useCallback } from 'react';
  import { useAsyncOperation } from './useAsyncOperation';
  import {
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
FUNCTIONS/METHODS:
    exportSalesData: (
    exportCollectionData: (
    exportAnalyticsData: (data: any[], reportType?: string) => Promise<void>;
    clearExportError: () => void;
  export const useExportOperations = (): UseExportOperationsReturn => {
TYPES/INTERFACES:
  export interface ExportConfig {
  export interface UseExportOperationsReturn {
USED HOOKS:
  useAsyncOperation
  useCallback
  useExportOperations
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useItemActions.ts ---
IMPORTS:
  import { useState, useCallback } from 'react';
  import { useNavigate } from 'react-router-dom';
  import { ServiceRegistry } from '../services/ServiceRegistry';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { navigationHelper } from '../utils/helpers/navigation';
FUNCTIONS/METHODS:
    handleDelete: (itemId: string) => Promise<void>;
    handleMarkSold: (itemId: string, saleDetails: any) => Promise<void>;
    handleEdit: (itemId: string) => void;
    handleDownloadImages: (itemId: string) => Promise<void>;
    navigateToCollection: () => void;
    navigateToEdit: (itemId: string) => void;
  export const useItemActions = ({
            getEditPath: (id: string) =>
            getEditPath: (id: string) => `/collection/raw-cards/${id}/edit`,
            getEditPath: (id: string) => `/collection/sealed-products/${id}/edit`,
  export const usePsaItemActions = (
  export const useRawItemActions = (
  export const useSealedItemActions = (
TYPES/INTERFACES:
  export interface UseItemActionsOptions {
  export interface UseItemActionsReturn {
USED HOOKS:
  useCallback
  useItemActions
  useNavigate
  usePsaItemActions
  useRawItemActions
  useSealedItemActions
  useState
API CALLS/ENDPOINTS:
          await apiService.delete(itemId);

--- FILE: ./shared/hooks/useCollectionImageExport.ts ---
IMPORTS:
  import { useCallback } from 'react';
  import { getExportApiService } from '../services/ServiceRegistry';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
  import { log } from '../utils/performance/logger';
  import { useAsyncOperation } from './useAsyncOperation';
FUNCTIONS/METHODS:
    downloadPsaCardImagesZip: (cardIds?: string[]) => Promise<void>;
    downloadRawCardImagesZip: (cardIds?: string[]) => Promise<void>;
    downloadSealedProductImagesZip: (productIds?: string[]) => Promise<void>;
    clearError: () => void;
  export const useCollectionImageExport = (): UseCollectionImageExportReturn => {
TYPES/INTERFACES:
  export interface UseCollectionImageExportReturn {
USED HOOKS:
  useAsyncOperation
  useCallback
  useCollectionImageExport
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useSearch.ts ---
IMPORTS:
  import { useCallback, useMemo, useState } from 'react';
  import { useQuery, useQueryClient } from '@tanstack/react-query';
  import {
  import { log } from '../utils/performance/logger';
  import { useDebouncedValue } from './useDebounce';
  import { getDisplayName } from '../utils/helpers/searchHelpers';
  import { queryKeys } from '../../app/lib/queryClient';
  import { SearchResult } from '../types/searchTypes';
FUNCTIONS/METHODS:
    searchSets: (query: string) => void;
    searchSetProducts: (query: string) => void;
    searchProducts: (query: string, setName?: string, category?: string) => void;
    searchCards: (query: string, setName?: string) => void;
    selectSet: (setName: string) => void;
    selectCategory: (category: string) => void;
    clearFilters: () => void;
    clearResults: () => void;
    clearError: () => void;
    prefetchQuery: (
    invalidateSearchCache: (
    getSearchCache: (
    refetch: () => void;
  export const useSearch = (): UseSearchReturn => {
      queryKey: (() => {
      queryFn: async () => {
            queryFn: async () => {
TYPES/INTERFACES:
  export interface SearchState {
  export interface UseSearchReturn {
USED HOOKS:
  useCallback
  useDebounce
  useDebouncedValue
  useMemo
  useQuery
  useQueryClient
  useSearch
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useDbaExport.ts ---
IMPORTS:
  import { useState, useEffect } from 'react';
  import { useQuery, useQueryClient } from '@tanstack/react-query';
  import * as dbaSelectionApi from '../api/dbaSelectionApi';
  import * as exportApi from '../api/exportApi';
  import { useCollectionOperations } from './useCollectionOperations';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
  import { queryKeys } from '../../app/lib/queryClient';
  import { CACHE_TTL } from '../../app/config/cacheConfig';
FUNCTIONS/METHODS:
  export const useDbaExport = () => {
        queryFn: () => dbaSelectionApi.getDbaSelections({ active: true }),
TYPES/INTERFACES:
  export interface SelectedItem {
USED HOOKS:
  useCollectionOperations
  useDbaExport
  useEffect
  useQuery
  useQueryClient
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useAccessibilityTheme.ts ---
IMPORTS:
  import { useCallback, useEffect, useState, useRef } from 'react';
  import { useCentralizedTheme } from '../utils/ui/themeConfig';
  import { useAccessibilityTheme as useAccessibilityProvider } from '../contexts/theme/AccessibilityThemeProvider';
FUNCTIONS/METHODS:
    toggleHighContrast: () => void;
    toggleReducedMotion: () => void;
    setHighContrast: (
    setReducedMotion: (
    syncWithSystemPreferences: () => void;
    resetAccessibilitySettings: () => void;
    applyAccessibilityPreset: (
  function useAccessibilityTheme(
          handler: () => detectSystemPreferences(),
          handler: () => detectSystemPreferences(),
          handler: () => detectSystemPreferences(),
          handler: () => detectSystemPreferences(),
          handler: () => detectSystemPreferences(),
          handler: () => detectSystemPreferences(),
  function useHighContrastTheme(config: HighContrastConfig = {}) {
  function useReducedMotionTheme(config: ReducedMotionConfig = {}) {
  function useFocusManagementTheme(config: FocusManagementConfig = {}) {
  function useMotionSensitivity(config: MotionSensitivityConfig = {}) {
  function useAccessibilityKeyboardShortcuts(enabled: boolean = true) {
TYPES/INTERFACES:
  export interface AccessibilitySystemPreferences {
  export interface AccessibilityThemeConfig {
  export interface AccessibilityThemeActions {
  export interface AccessibilityThemeState {
  export interface HighContrastConfig {
  export interface ReducedMotionConfig {
  export interface FocusManagementConfig {
  export interface MotionSensitivityConfig {
USED HOOKS:
  useAccessibilityKeyboardShortcuts
  useAccessibilityProvider
  useAccessibilityTheme
  useCallback
  useCentralizedTheme
  useEffect
  useFocusManagementTheme
  useHighContrastTheme
  useMotionSensitivity
  useReducedMotionTheme
  useRef
  useState
  useThemeSwitch
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useAuctionFormData.ts ---
IMPORTS:
  import { useCallback, useEffect, useMemo, useState } from 'react';
  import { useBaseForm } from './useBaseForm';
  import { useFetchCollectionItems } from './useFetchCollectionItems';
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { IAuctionItem } from '../domain/models/auction';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  import { processImageUrl } from '../utils/helpers/formatting';
  import { log } from '../utils/performance/logger';
FUNCTIONS/METHODS:
  const memoizedProcessImageUrl = (imagePath: string | undefined) => {
  export const useAuctionFormData = (initialData?: Partial<AuctionFormData>) => {
          custom: (value: string) => {
TYPES/INTERFACES:
  export interface AuctionFormData {
  export interface UnifiedCollectionItem {
  export interface SearchFilterState {
  export interface ItemSelectionState {
USED HOOKS:
  useAuctionFormData
  useBaseForm
  useCallback
  useEffect
  useFetchCollectionItems
  useMemo
  useState
API CALLS/ENDPOINTS:
            newSelectedIds.delete(itemId);

--- FILE: ./shared/hooks/useCollectionExport.ts ---
IMPORTS:
  import { useCallback, useEffect, useRef, useState } from 'react';
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { exportApiService } from '../services/ExportApiService';
  import {
  import {
  import {
  import { handleApiError } from '../utils/helpers/errorHandler';
  import {
  import {
  import {
FUNCTIONS/METHODS:
    exportItems: (request: ExportRequest) => Promise<void>;
    exportOrderedItems: (
    exportAllItems: (
    exportSelectedItems: (
    exportFacebookText: (itemIds?: string[]) => Promise<void>;
    exportImages: (itemType: ExportItemType, itemIds?: string[]) => Promise<void>;
    toggleItemSelection: (itemId: string) => void;
    selectAllItems: (items: CollectionItem[]) => void;
    clearSelection: () => void;
    reorderItems: (newOrder: string[]) => void;
    moveItemUp: (itemId: string) => void;
    moveItemDown: (itemId: string) => void;
    autoSortByPrice: (items: CollectionItem[], ascending?: boolean) => void;
    sortCategoryByPrice: (
    resetOrder: (items: CollectionItem[]) => void;
    getOrderedItems: (items: CollectionItem[]) => CollectionItem[];
  export const useCollectionExport = (): UseCollectionExportReturn => {
TYPES/INTERFACES:
  export type CollectionItem = IPsaGradedCard | IRawCard | ISealedProduct;
  export interface UseCollectionExportReturn {
USED HOOKS:
  useCallback
  useCollectionExport
  useEffect
  useRef
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/usePsaCardOperations.ts ---
IMPORTS:
  import { useMemo } from 'react';
  import { IPsaGradedCard } from '../domain/models/card';
  import { ISaleDetails } from '../domain/models/common';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  import {
FUNCTIONS/METHODS:
    addPsaCard: (cardData: Partial<IPsaGradedCard>) => Promise<IPsaGradedCard>;
    updatePsaCard: (
    deletePsaCard: (id: string) => Promise<void>;
    markPsaCardSold: (
    clearError: () => void;
  export const usePsaCardOperations = (): UsePsaCardOperationsReturn => {
TYPES/INTERFACES:
  export interface UsePsaCardOperationsReturn {
USED HOOKS:
  useGenericCrudOperations
  useMemo
  usePsaCardOperations
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useCollectionOperations.ts ---
IMPORTS:
  import { useCallback, useEffect } from 'react';
  import { useQuery, useQueryClient } from '@tanstack/react-query';
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { ISaleDetails } from '../domain/models/common';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  import { log } from '../utils/performance/logger';
  import { queryKeys } from '../../app/lib/queryClient';
  import { usePsaCardOperations } from './usePsaCardOperations';
  import { useRawCardOperations } from './useRawCardOperations';
  import { useSealedProductOperations } from './useSealedProductOperations';
  import { useCollectionImageExport } from './useCollectionImageExport';
FUNCTIONS/METHODS:
    soldItems: (IPsaGradedCard | IRawCard | ISealedProduct)[];
    addPsaCard: (cardData: Partial<IPsaGradedCard>) => Promise<void>;
    updatePsaCard: (
    deletePsaCard: (id: string) => Promise<void>;
    markPsaCardSold: (id: string, saleDetails: ISaleDetails) => Promise<void>;
    addRawCard: (cardData: Partial<IRawCard>) => Promise<void>;
    updateRawCard: (id: string, cardData: Partial<IRawCard>) => Promise<void>;
    deleteRawCard: (id: string) => Promise<void>;
    markRawCardSold: (id: string, saleDetails: ISaleDetails) => Promise<void>;
    addSealedProduct: (productData: Partial<ISealedProduct>) => Promise<void>;
    updateSealedProduct: (
    deleteSealedProduct: (id: string) => Promise<void>;
    markSealedProductSold: (
    downloadPsaCardImagesZip: (cardIds?: string[]) => Promise<void>;
    downloadRawCardImagesZip: (cardIds?: string[]) => Promise<void>;
    downloadSealedProductImagesZip: (productIds?: string[]) => Promise<void>;
    refreshCollection: () => Promise<void>;
    clearError: () => void;
  const validateCollectionResponse = (data: any[], type: string): any[] => {
  export const useCollectionOperations = (): UseCollectionOperationsReturn => {
      queryFn: () => collectionApi.getPsaGradedCards({ sold: false }),
      select: (data) => validateCollectionResponse(data, 'PSA cards'),
      queryFn: () => collectionApi.getRawCards({ sold: false }),
      select: (data) => validateCollectionResponse(data, 'raw cards'),
      queryFn: () => collectionApi.getSealedProducts({ sold: false }),
      select: (data) => validateCollectionResponse(data, 'sealed products'),
      queryFn: async () => {
TYPES/INTERFACES:
  export interface UseCollectionOperationsReturn {
USED HOOKS:
  useCallback
  useCollectionImageExport
  useCollectionOperations
  useEffect
  usePsaCardOperations
  useQuery
  useQueryClient
  useRawCardOperations
  useSealedProductOperations
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useThemeSwitch.ts ---
IMPORTS:
  import { useCallback, useEffect, useState } from 'react';
  import { useCentralizedTheme } from '../utils/ui/themeConfig';
  import { useVisualTheme } from '../contexts/theme/VisualThemeProvider';
  import { useLayoutTheme } from '../contexts/theme/LayoutThemeProvider';
  import { useAnimationTheme } from '../contexts/theme/AnimationThemeProvider';
  import { useAccessibilityTheme } from '../contexts/theme/AccessibilityThemeProvider';
  import { useTheme as useNextTheme } from 'next-themes';
  import {
  import { ThemeColor } from '../theme/formThemes';
FUNCTIONS/METHODS:
  export function useThemeSwitch() {
  export function useColorSchemeSwitch() {
      currentScheme: (resolvedTheme as ColorScheme) || 'system',
      resolvedTheme: (resolvedTheme as 'light' | 'dark') || 'dark',
  export function usePrimaryColorSwitch() {
  export function useAdvancedThemeSettings() {
  export function useThemePresets() {
  export function useThemeKeyboardShortcuts(enabled: boolean = true) {
  export function useSystemPreferences() {
      syncWithSystem: () => {
TYPES/INTERFACES:
USED HOOKS:
  useAccessibilityTheme
  useAdvancedThemeSettings
  useAnimationTheme
  useCallback
  useCentralizedTheme
  useColorSchemeSwitch
  useEffect
  useLayoutTheme
  useNextTheme
  usePrimaryColorSwitch
  useState
  useSystemPreferences
  useTheme
  useThemeKeyboardShortcuts
  useThemePresets
  useThemeSwitch
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useImageUpload.ts ---
IMPORTS:
  import { useCallback, useState } from 'react';
  import { getUploadApiService } from '../services/ServiceRegistry';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
  import { log } from '../utils/performance/logger';
  import { useAsyncOperation } from './useAsyncOperation';
FUNCTIONS/METHODS:
    setSelectedImages: (files: File[]) => void;
    setRemainingExistingImages: (urls: string[]) => void;
    handleImagesChange: (files: File[], remainingExistingUrls?: string[]) => void;
    uploadImages: () => Promise<string[]>;
    removeExistingImage: (imageUrl: string) => void;
    clearImages: () => void;
    clearError: () => void;
  export const useImageUpload = (
TYPES/INTERFACES:
  export interface UseImageUploadReturn {
USED HOOKS:
  useAsyncOperation
  useCallback
  useImageUpload
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useFetchCollectionItems.ts ---
IMPORTS:
  import { useCallback, useRef } from 'react';
  import { useAsyncOperation } from './useAsyncOperation';
  import { log } from '../utils/performance/logger';
FUNCTIONS/METHODS:
    fetchItems: (fetchFn: () => Promise<T[]>) => Promise<T[] | undefined>;
    fetchItemsWithValidation: (
      fetchFn: () => Promise<T[]>,
    refreshItems: () => Promise<T[] | undefined>;
    clearError: () => void;
    setItems: (items: T[] | null) => void;
    reset: () => void;
    lastFetchFn: (() => Promise<T[]>) | null;
  const validateCollectionItems = <T>(items: T[]): boolean => {
  export const useFetchCollectionItems = <T = any>(
        fetchFn: () => Promise<T[]>,
TYPES/INTERFACES:
  export interface FetchCollectionItemsConfig {
  export interface UseFetchCollectionItemsReturn<T = any> {
USED HOOKS:
  useAsyncOperation
  useCallback
  useFetchCollectionItems
  useRef
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useAutocomplete.ts ---
IMPORTS:
  import { useCallback, useEffect, useState } from 'react';
  import { SearchResult, useSearch } from './useSearch';
  import { searchApiService } from '../services/SearchApiService';
FUNCTIONS/METHODS:
  export const createAutocompleteConfig = (
    setValue: (value: string) => void;
    onFocus: () => void;
    onBlur: () => void;
    selectResult: (result: SearchResult) => void;
    selectByIndex: (index: number) => void;
    moveUp: () => void;
    moveDown: () => void;
    selectActive: () => void;
    close: () => void;
    clear: () => void;
    setFieldType: (fieldType: 'set' | 'setProduct' | 'product' | 'card') => void;
    clearHierarchicalState: () => void;
    shouldShowSuggestions: () => boolean;
    selectSetProduct: (setProduct: SearchResult) => void;
    selectProduct: (product: SearchResult) => Promise<{ autofillData?: any }>;
    selectSet: (set: SearchResult) => void;
  export const useAutocomplete = (
TYPES/INTERFACES:
  export interface AutocompleteField {
  export interface AutocompleteConfig {
  export interface AutocompleteState {
  export interface UseAutocompleteReturn extends AutocompleteState {
USED HOOKS:
  useAutocomplete
  useCallback
  useEffect
  useSearch
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useCollectionState.ts ---
IMPORTS:
  import { useCallback, useState } from 'react';
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { log } from '../utils/performance/logger';
FUNCTIONS/METHODS:
    soldItems: (IPsaGradedCard | IRawCard | ISealedProduct)[];
    addPsaCardToState: (card: IPsaGradedCard) => void;
    updatePsaCardInState: (id: string, updatedCard: IPsaGradedCard) => void;
    removePsaCardFromState: (id: string) => void;
    movePsaCardToSold: (id: string, soldCard: IPsaGradedCard) => void;
    addRawCardToState: (card: IRawCard) => void;
    updateRawCardInState: (id: string, updatedCard: IRawCard) => void;
    removeRawCardFromState: (id: string) => void;
    moveRawCardToSold: (id: string, soldCard: IRawCard) => void;
    addSealedProductToState: (product: ISealedProduct) => void;
    updateSealedProductInState: (
    removeSealedProductFromState: (id: string) => void;
    moveSealedProductToSold: (id: string, soldProduct: ISealedProduct) => void;
    setCollectionState: (state: Partial<CollectionState>) => void;
    resetCollectionState: () => void;
  export const useCollectionState = (): UseCollectionStateReturn => {
          psaCards: (prev.psaCards || []).map((card) =>
        psaCards: (prev.psaCards || []).filter((card) => card.id !== id),
          psaCards: (prev.psaCards || []).filter((card) => card.id !== id),
          rawCards: (prev.rawCards || []).map((card) =>
        rawCards: (prev.rawCards || []).filter((card) => card.id !== id),
        rawCards: (prev.rawCards || []).filter((card) => card.id !== id),
          sealedProducts: (prev.sealedProducts || []).map((product) =>
        sealedProducts: (prev.sealedProducts || []).filter(
          sealedProducts: (prev.sealedProducts || []).filter(
TYPES/INTERFACES:
  export interface CollectionState {
  export interface UseCollectionStateReturn extends CollectionState {
USED HOOKS:
  useCallback
  useCollectionState
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/index.ts ---
IMPORTS:
  export { useModal, useConfirmModal, useMultiModal } from './useModal';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type {
  export type {
  export type {
USED HOOKS:
  useAuctionItemDisplayData
  useCollectionItemDisplayData
  useConfirmModal
  useItemActions
  useItemDisplayData
  useModal
  useMultiModal
  useMultipleItemDisplayData
  usePsaItemActions
  useRawItemActions
  useSealedItemActions
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useImageRemoval.ts ---
IMPORTS:
  import { useCallback, useState } from 'react';
  import { ImagePreview } from '../utils/ui/imageUtils';
FUNCTIONS/METHODS:
  export const useImageRemoval = (
    onPreviewsUpdate: (previews: ImagePreview[]) => void
TYPES/INTERFACES:
USED HOOKS:
  useCallback
  useImageRemoval
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useMarkSold.ts ---
IMPORTS:
  import { useCallback, useState, useEffect } from 'react';
  import { ISaleDetails } from '../domain/models/common';
  import { useCollectionOperations } from './useCollectionOperations';
  import { navigationHelper } from '../utils/helpers/navigation';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
FUNCTIONS/METHODS:
    markAsSold: (saleDetails: ISaleDetails) => Promise<void>;
    clearError: () => void;
  export const useMarkSold = ({
  export const useCollectionItemDetail = () => {
TYPES/INTERFACES:
  interface UseMarkSoldOptions {
  interface UseMarkSoldReturn {
USED HOOKS:
  useCallback
  useCollectionItemDetail
  useCollectionOperations
  useEffect
  useMarkSold
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useRawCardOperations.ts ---
IMPORTS:
  import { useMemo } from 'react';
  import { IRawCard } from '../domain/models/card';
  import { ISaleDetails } from '../domain/models/common';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  import {
FUNCTIONS/METHODS:
    addRawCard: (cardData: Partial<IRawCard>) => Promise<IRawCard>;
    updateRawCard: (id: string, cardData: Partial<IRawCard>) => Promise<IRawCard>;
    deleteRawCard: (id: string) => Promise<void>;
    markRawCardSold: (id: string, saleDetails: ISaleDetails) => Promise<IRawCard>;
    clearError: () => void;
  export const useRawCardOperations = (): UseRawCardOperationsReturn => {
TYPES/INTERFACES:
  export interface UseRawCardOperationsReturn {
USED HOOKS:
  useGenericCrudOperations
  useMemo
  useRawCardOperations
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/crud/entitySpecificHooks.ts ---
IMPORTS:
  import { getCollectionApiService } from '../../services/ServiceRegistry';
  import { useCollectionOperations } from './useCollectionOperations';
  import {
FUNCTIONS/METHODS:
  export const usePsaCardOperations = () => {
  export const useRawCardOperations = () => {
  export const useSealedProductOperations = () => {
TYPES/INTERFACES:
USED HOOKS:
  useCollectionOperations
  useEntityConfig
  usePsaCardOperations
  useRawCardOperations
  useSealedProductOperations
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/crud/collectionEntityConfigs.ts ---
IMPORTS:
  import { useMemo } from 'react';
  import { CrudApiOperations, CrudMessages } from './useGenericCrudOperations';
FUNCTIONS/METHODS:
  export const createPsaCardConfig = (
  export const createRawCardConfig = (
  export const createSealedProductConfig = (
    add: (data: Omit<T, '_id'>) => Promise<T | undefined>;
    update: (id: string, data: Partial<T>) => Promise<T | undefined>;
    delete: (id: string) => Promise<void>;
    markSold: (id: string, saleData: any) => Promise<T | undefined>;
    clearError: () => void;
  export const useEntityConfig = <T>(
    configFactory: (api: any) => CollectionEntityConfig<T>,
TYPES/INTERFACES:
  export interface CollectionEntityConfig<T> {
  export interface UseCollectionOperationsReturn<T> {
USED HOOKS:
  useEntityConfig
  useGenericCrudOperations
  useMemo
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/crud/useCollectionOperations.ts ---
IMPORTS:
  import { useGenericCrudOperations } from './useGenericCrudOperations';
  import {
FUNCTIONS/METHODS:
  export const useCollectionOperations = <T>(
TYPES/INTERFACES:
USED HOOKS:
  useCollectionOperations
  useGenericCrudOperations
  usePsaCardOperations
  useRawCardOperations
  useSealedProductOperations
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/crud/index.ts ---
IMPORTS:
  export { useCollectionOperations } from './useCollectionOperations';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
  useCollectionOperations
  useEntityConfig
  useGenericCrudOperations
  usePsaCardOperations
  useRawCardOperations
  useSealedProductOperations
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/crud/useGenericCrudOperations.ts ---
IMPORTS:
  import { useCallback } from 'react';
  import { ISaleDetails } from '../../domain/models/common';
  import { showSuccessToast } from '../../components/organisms/ui/toastNotifications';
  import { log } from '../../utils/performance/logger';
  import { useAsyncOperation } from '../useAsyncOperation';
FUNCTIONS/METHODS:
    create: (data: Partial<T>) => Promise<T>;
    update: (id: string, data: Partial<T>) => Promise<T>;
    delete: (id: string) => Promise<void>;
    markSold: (id: string, saleDetails: ISaleDetails) => Promise<T>;
    add: (data: Partial<T>) => Promise<T>;
    update: (id: string, data: Partial<T>) => Promise<T>;
    delete: (id: string) => Promise<void>;
    markSold: (id: string, saleDetails: ISaleDetails) => Promise<T>;
    clearError: () => void;
  export const useGenericCrudOperations = <T>(
TYPES/INTERFACES:
  export interface CrudApiOperations<T> {
  export interface CrudMessages {
  export interface GenericCrudOperationsReturn<T> {
USED HOOKS:
  useAsyncOperation
  useCallback
  useGenericCrudOperations
API CALLS/ENDPOINTS:
          await apiOperations.delete(id);

--- FILE: ./shared/hooks/useFormSubmission.ts ---
IMPORTS:
  import { useCallback, useState } from 'react';
  import { UseFormHandleSubmit } from 'react-hook-form';
FUNCTIONS/METHODS:
    uploadImages: () => Promise<string[]>;
    onSuccess: () => void;
    submitFunction: (data: Partial<T>) => Promise<T>;
    prepareFormData: (
    handleSubmit: (
      onSubmit: (data: FormData) => Promise<void>
    clearSubmitError: () => void;
  export const useFormSubmission = <T, FormData = any>(
  export const createPriceHistoryEntry = (
  export const prepareSaleDetails = (formData: any) => ({
TYPES/INTERFACES:
  interface ImageUploadHook {
  interface PriceHistoryHook {
  interface FormSubmissionConfig<T> {
  interface UseFormSubmissionReturn<FormData> {
USED HOOKS:
  useCallback
  useFormSubmission
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/usePriceHistory.ts ---
IMPORTS:
  import { useCallback, useEffect, useState } from 'react';
FUNCTIONS/METHODS:
    addPriceEntry: (price: number, source?: string) => void;
    removePriceEntry: (index: number) => void;
    updateCurrentPrice: (price: number) => void;
    setPriceHistory: (history: PriceHistoryEntry[]) => void;
    clearPriceHistory: () => void;
    getLatestPrice: () => number | undefined;
    getPriceChangePercentage: () => number | undefined;
  export const usePriceHistory = (
TYPES/INTERFACES:
  export interface PriceHistoryEntry {
  export interface UsePriceHistoryReturn {
USED HOOKS:
  useCallback
  useEffect
  usePriceHistory
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useCollectionStats.ts ---
IMPORTS:
  import { useMemo } from 'react';
  import { useCollectionOperations } from './useCollectionOperations';
  import { displayPrice } from '../utils/helpers/formatting';
FUNCTIONS/METHODS:
  export const useCollectionStats = (): CollectionStats & {
TYPES/INTERFACES:
  export interface CollectionStats {
USED HOOKS:
  useCollectionOperations
  useCollectionStats
  useMemo
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useDebounce.ts ---
IMPORTS:
  import { useCallback, useEffect, useRef, useState } from 'react';
  export { useDebounce } from '../utils/helpers/debounceUtils';
FUNCTIONS/METHODS:
  export const useDebouncedCallback = <T extends (...args: any[]) => any>(
    debouncedCallback: (...args: Parameters<T>) => void;
    cancel: () => void;
  export const useDebouncedValue = <T>(value: T, delay: number): T => {
TYPES/INTERFACES:
USED HOOKS:
  useCallback
  useDebounce
  useDebouncedCallback
  useDebouncedValue
  useEffect
  useRef
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/usePageLayout.ts ---
IMPORTS:
  import { useCallback } from 'react';
  import {
FUNCTIONS/METHODS:
    navigateTo: (path: string) => void;
    reload: () => void;
    handleAsyncAction: (action: () => Promise<T>) => Promise<T | undefined>;
  export const usePageLayout = <T = any>(
TYPES/INTERFACES:
  export interface PageLayoutState<T = any> extends UseAsyncOperationReturn<T> {
USED HOOKS:
  useAsyncOperation
  useCallback
  usePageLayout
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useAuction.ts ---
IMPORTS:
  import { useCallback, useState } from 'react';
  import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
  import * as auctionsApi from '../api/auctionsApi';
  import * as exportApi from '../api/exportApi';
  import { IAuction } from '../domain/models/auction';
  import { queryKeys, CACHE_TIMES } from '../../app/lib/queryClient';
  import { handleApiError } from '../utils/helpers/errorHandler';
FUNCTIONS/METHODS:
    fetchAuctions: (_params?: auctionsApi.AuctionsParams) => Promise<void>;
    fetchAuctionById: (_id: string) => Promise<void>;
    createAuction: (_data: Partial<IAuction>) => Promise<IAuction>;
    updateAuction: (_id: string, _data: Partial<IAuction>) => Promise<void>;
    deleteAuction: (_id: string) => Promise<void>;
    addItemToAuction: (
    removeItemFromAuction: (
    markAuctionItemSold: (
    generateFacebookPost: (_id: string) => Promise<string>;
    downloadAuctionTextFile: (_id: string) => Promise<void>;
    downloadAuctionImagesZip: (_id: string) => Promise<void>;
    clearCurrentAuction: () => void;
    clearError: () => void;
  export const useAuction = (
      queryFn: () => auctionsApi.getAuctions(params),
            queryFn: () => auctionsApi.getAuctionById(id),
      mutationFn: (data: Partial<IAuction>) => auctionsApi.createAuction(data),
      onSuccess: () => {
      mutationFn: ({ id, data }: { id: string; data: Partial<IAuction> }) =>
      onSuccess: (_, { id }) => {
      mutationFn: (id: string) => auctionsApi.deleteAuction(id),
      onSuccess: () => {
      mutationFn: ({
      onSuccess: (_, { id }) => {
      mutationFn: ({
      onSuccess: (_, { id }) => {
      mutationFn: ({
      onSuccess: (_, { id }) => {
TYPES/INTERFACES:
  export interface UseAuctionState {
  export interface UseAuctionActions {
  export type UseAuctionHook = UseAuctionState & UseAuctionActions;
USED HOOKS:
  useAuction
  useCallback
  useMutation
  useQuery
  useQueryClient
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useModal.ts ---
IMPORTS:
  import { useState, useCallback } from 'react';
FUNCTIONS/METHODS:
    openModal: () => void;
    closeModal: () => void;
    toggleModal: () => void;
    confirmAction: (callback: () => void | Promise<void>) => void;
  export const useModal = (initialOpen = false): UseModalReturn => {
  export const useConfirmModal = (initialOpen = false): UseConfirmModalReturn => {
    openModal: (modalKey: string) => void;
    closeModal: (modalKey: string) => void;
    toggleModal: (modalKey: string) => void;
    closeAllModals: () => void;
  export const useMultiModal = (modalKeys: string[]): UseMultiModalReturn => {
TYPES/INTERFACES:
  export interface UseModalReturn {
  export interface UseConfirmModalReturn extends UseModalReturn {
  export interface UseMultiModalReturn {
USED HOOKS:
  useCallback
  useConfirmModal
  useModal
  useMultiModal
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/collection/usePriceManagement.ts ---
IMPORTS:
  import { useState, useCallback } from 'react';
  import { CollectionItem } from './useCollectionItem';
  import { getCollectionApiService } from '../../services/ServiceRegistry';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { showSuccessToast } from '../../components/organisms/ui/toastNotifications';
  import { log } from '../../../shared/utils/performance/logger';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
FUNCTIONS/METHODS:
    setNewPrice: (price: string) => void;
    handlePriceInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handlePriceUpdate: (
    handleCustomPriceUpdate: () => Promise<void>;
  export const usePriceManagement = (
TYPES/INTERFACES:
  export interface UsePriceManagementReturn {
USED HOOKS:
  useCallback
  useCollectionItem
  usePriceManagement
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/collection/useCollectionItem.ts ---
IMPORTS:
  import { useState, useEffect, useCallback } from 'react';
  import { IPsaGradedCard, IRawCard } from '../../domain/models/card';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
  import { getCollectionApiService } from '../../services/ServiceRegistry';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { log } from '../../../shared/utils/performance/logger';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
FUNCTIONS/METHODS:
    refetchItem: () => Promise<void>;
  export const useCollectionItem = (
  export const useCollectionItemFromUrl = (): UseCollectionItemReturn => {
TYPES/INTERFACES:
  export type CollectionItem = IPsaGradedCard | IRawCard | ISealedProduct;
  export type ItemType = 'psa' | 'raw' | 'sealed';
  export interface UseCollectionItemReturn {
USED HOOKS:
  useCallback
  useCollectionItem
  useCollectionItemFromUrl
  useEffect
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/collection/useItemOperations.ts ---
IMPORTS:
  import { useCallback } from 'react';
  import { CollectionItem, ItemType } from './useCollectionItem';
  import { getCollectionApiService } from '../../services/ServiceRegistry';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { showSuccessToast } from '../../components/organisms/ui/toastNotifications';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  import { useConfirmModal } from '../useModal';
FUNCTIONS/METHODS:
    handleEdit: () => void;
    handleDelete: () => void;
    confirmDeleteItem: () => Promise<void>;
    handleMarkSold: () => void;
    handleBackToCollection: () => void;
  export const useItemOperations = (
TYPES/INTERFACES:
  export interface UseItemOperationsReturn {
USED HOOKS:
  useCallback
  useCollectionItem
  useConfirmModal
  useItemOperations
  useModal
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/collection/useImageDownload.ts ---
IMPORTS:
  import { useState, useCallback } from 'react';
  import { CollectionItem } from './useCollectionItem';
  import { getExportApiService } from '../../services/ServiceRegistry';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { showSuccessToast } from '../../components/organisms/ui/toastNotifications';
  import { log } from '../../../shared/utils/performance/logger';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
FUNCTIONS/METHODS:
    handleDownloadImages: () => Promise<void>;
  export const useImageDownload = (
TYPES/INTERFACES:
  export interface UseImageDownloadReturn {
USED HOOKS:
  useCallback
  useCollectionItem
  useImageDownload
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useHierarchicalSearch.tsx ---
IMPORTS:
  import { useEffect, useState, useCallback } from 'react';
  import { SearchResult, useSearch } from './useSearch';
  import { useDebouncedValue } from './useDebounce';
  import { autoFillFromProductSelection } from '../utils/helpers/searchHelpers';
FUNCTIONS/METHODS:
    setActiveField: (field: SearchFieldType | null) => void;
    handlePrimarySelection: (
      setValue: (field: string, value: any) => void,
      clearErrors: (field: string) => void,
    handleSecondarySelection: (
      setValue: (field: string, value: any) => void,
      clearErrors: (field: string) => void,
      onSelection: (data: any) => void
    clearSuggestions: () => void;
  export const useHierarchicalSearch = ({
        setValue: (field: string, value: any) => void,
        clearErrors: (field: string) => void,
        setValue: (field: string, value: any) => void,
        clearErrors: (field: string) => void,
        onSelection: (data: any) => void
TYPES/INTERFACES:
  export type SearchFieldType = 'setName' | 'productName' | 'cardName';
  export type SearchMode = 'card' | 'product';
  interface HierarchicalSearchConfig {
  interface HierarchicalSearchState {
  interface HierarchicalSearchActions {
  interface UseHierarchicalSearchProps {
  interface UseHierarchicalSearchReturn
REACT COMPONENTS:
USED HOOKS:
  useCallback
  useDebounce
  useDebouncedValue
  useEffect
  useHierarchicalSearch
  useSearch
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useAsyncOperation.ts ---
IMPORTS:
  import { useCallback, useState } from 'react';
  import { log } from '../utils/performance/logger';
FUNCTIONS/METHODS:
    execute: (operation: () => Promise<T>) => Promise<T | undefined>;
    executeWithValidation: (
      operation: () => Promise<T>,
    clearError: () => void;
    setData: (data: T | null) => void;
    reset: () => void;
  const validateApiResponse = <T>(data: T, context: string): boolean => {
  export const useAsyncOperation = <T = any>(
        operation: () => Promise<T>,
TYPES/INTERFACES:
  export interface UseAsyncOperationReturn<T = any> {
USED HOOKS:
  useAsyncOperation
  useCallback
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useDataTable.ts ---
IMPORTS:
  import { useCallback, useMemo, useState } from 'react';
FUNCTIONS/METHODS:
    setCurrentPage: (page: number) => void;
    setItemsPerPage: (count: number) => void;
    setSearchQuery: (query: string) => void;
    addFilter: (filter: DataTableFilter) => void;
    removeFilter: (field: string) => void;
    clearFilters: () => void;
    setSortField: (field: string) => void;
    toggleSort: (field: string) => void;
    selectItem: (item: T) => void;
    deselectItem: (item: T) => void;
    selectAll: () => void;
    deselectAll: () => void;
    isItemSelected: (item: T) => boolean;
  export const useDataTable = <T extends { id: string }>(
TYPES/INTERFACES:
  export interface DataTableColumn<T> {
  export interface DataTableFilter {
  export interface DataTableSort {
  export interface UseDataTableConfig<T> {
  export interface UseDataTableReturn<T> {
USED HOOKS:
  useCallback
  useDataTable
  useMemo
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useAnalyticsData.ts ---
IMPORTS:
  import { useMemo } from 'react';
  import { processActivitiesForAnalytics } from '../utils/helpers/activityHelpers';
FUNCTIONS/METHODS:
  export const useAnalyticsData = ({
TYPES/INTERFACES:
  export interface AnalyticsData {
  export interface UseAnalyticsDataProps {
USED HOOKS:
  useAnalyticsData
  useMemo
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useBaseForm.ts ---
IMPORTS:
  import { useCallback, useEffect, useState } from 'react';
  import {
  import { useFormValidation, ValidationRules } from './useFormValidation';
  import { useImageUpload } from './useImageUpload';
  import { usePriceHistory } from './usePriceHistory';
FUNCTIONS/METHODS:
    validateField: (fieldName: string, value: any) => string | undefined;
    isFormValid: (formData: Record<string, any>) => boolean;
    setSubmitting: (submitting: boolean) => void;
    resetForm: () => void;
    setFormData: (data: Partial<T>) => void;
    updateWithInitialData: (data: Partial<T>) => void;
  export const useBaseForm = <T extends FieldValues>(
TYPES/INTERFACES:
  export interface BaseFormConfig<T extends FieldValues> {
  export interface UseBaseFormReturn<T extends FieldValues> {
USED HOOKS:
  useBaseForm
  useCallback
  useEffect
  useForm
  useFormValidation
  useImageUpload
  usePriceHistory
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useGenericCrudOperations.ts ---
IMPORTS:
  export { debounce, useDebounce } from '../utils/helpers/debounceUtils';
  export { useGenericCrudOperations as default } from './crud';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
  useCollectionOperations
  useDebounce
  useEntityConfig
  useGenericCrudOperations
  usePsaCardOperations
  useRawCardOperations
  useSealedProductOperations
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useFormValidation.ts ---
IMPORTS:
  import { useCallback } from 'react';
FUNCTIONS/METHODS:
    validateField: (fieldName: string, value: any) => string | undefined;
    validateForm: (formData: Record<string, any>) => Record<string, string>;
    isFormValid: (formData: Record<string, any>) => boolean;
  export const useFormValidation = (
  export const commonValidationRules = {
      custom: (value: string) => {
      custom: (value: string) => {
      custom: (value: string) => {
TYPES/INTERFACES:
  export interface ValidationRule {
  export interface ValidationRules {
  export interface UseFormValidationReturn {
USED HOOKS:
  useCallback
  useFormValidation
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useSealedProductOperations.ts ---
IMPORTS:
  import { useMemo } from 'react';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { ISaleDetails } from '../domain/models/common';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  import {
FUNCTIONS/METHODS:
    addSealedProduct: (
    updateSealedProduct: (
    deleteSealedProduct: (id: string) => Promise<void>;
    markSealedProductSold: (
    clearError: () => void;
  export const useSealedProductOperations = () => {
TYPES/INTERFACES:
  export interface UseSealedProductOperationsReturn {
USED HOOKS:
  useGenericCrudOperations
  useMemo
  useSealedProductOperations
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useActivity.ts ---
IMPORTS:
  import { useCallback, useEffect, useRef, useState } from 'react';
  import activityApi, {
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
  import { log } from '../utils/performance/logger';
FUNCTIONS/METHODS:
    fetchActivities: (newFilters?: Partial<ActivityFilters>) => Promise<void>;
    fetchRecentActivities: (limit?: number) => Promise<Activity[]>;
    fetchActivityStats: () => Promise<void>;
    searchActivities: (term: string) => Promise<void>;
    loadMore: () => Promise<void>;
    refresh: () => Promise<void>;
    setFilters: (newFilters: Partial<ActivityFilters>) => void;
    clearSearch: () => void;
    markAsRead: (id: string) => Promise<void>;
    archiveActivity: (id: string) => Promise<void>;
    getActivitiesForEntity: (
    getActivityById: (id: string) => Promise<Activity | null>;
  export const useActivity = (
  export const useRecentActivities = (limit: number = 10) => {
  export const useActivityStats = () => {
TYPES/INTERFACES:
  interface UseActivityState {
  interface UseActivityReturn {
  export type { Activity, ActivityFilters, ActivityStats };
USED HOOKS:
  useActivity
  useActivityStats
  useCallback
  useEffect
  useRecentActivities
  useRef
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useSalesAnalytics.ts ---
IMPORTS:
  import { useCallback, useEffect, useState } from 'react';
  import { ISale, ISalesGraphData, ISalesSummary } from '../domain/models/sale';
  import {
  import {
  import { commonCSVColumns, exportToCSV } from '../utils/helpers/fileOperations';
  import { log } from '../utils/performance/logger';
FUNCTIONS/METHODS:
    setDateRange: (_range: DateRange) => void;
    fetchSalesData: (_params?: DateRange) => Promise<void>;
    refreshData: () => Promise<void>;
    exportSalesCSV: () => void;
  export const useSalesAnalytics = (): UseSalesAnalyticsResult => {
          profit: (sale.actualSoldPrice || 0) - (sale.myPrice || 0),
TYPES/INTERFACES:
  export interface DateRange {
  export interface UseSalesAnalyticsResult {
USED HOOKS:
  useCallback
  useEffect
  useSalesAnalytics
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useUnifiedSearch.ts ---
IMPORTS:
  import { useState, useCallback, useMemo, useRef, useTransition } from 'react';
  import { useQuery, useQueryClient } from '@tanstack/react-query';
  import {
  import { useDebouncedValue } from './useDebounce';
  import { SearchResult } from '../types/searchTypes';
  import { queryKeys } from '../../app/lib/queryClient';
  import { log } from '../utils/performance/logger';
FUNCTIONS/METHODS:
    setQuery: (query: string) => void;
    clearQuery: () => void;
    refetch: () => void;
    selectResult: (result: SearchResult) => void;
    clearResults: () => void;
      setParent: (result: SearchResult | null) => void;
  export const useUnifiedSearch = (
      queryFn: () => executeSearch(debouncedQuery),
  export const useCardSearch = (setId?: string) => {
  export const useProductSearch = (setProductId?: string) => {
  export const useAutocompleteSearch = () => {
  export const useOptimizedSearch = () => {
  export const useSearch = (config?: Partial<UnifiedSearchConfig>) => {
  export const useOptimizedSearchLegacy = (
  export const useAutocomplete = (config?: Partial<UnifiedSearchConfig>) => {
TYPES/INTERFACES:
  interface UnifiedSearchConfig {
  interface UnifiedSearchReturn {
USED HOOKS:
  useAutocomplete
  useAutocompleteSearch
  useCallback
  useCardSearch
  useDebounce
  useDebouncedValue
  useHierarchicalSearch
  useMemo
  useOptimizedSearch
  useOptimizedSearchLegacy
  useProductSearch
  useQuery
  useQueryClient
  useRef
  useSearch
  useState
  useTransition
  useUnifiedSearch
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useModalManager.ts ---
IMPORTS:
  import { useCallback, useState } from 'react';
FUNCTIONS/METHODS:
    open: (data?: T) => void;
    close: () => void;
    toggle: () => void;
  export const useModalManager = <T = any>(
  export const useConfirmationModal = () => {
        onConfirm: (data: ConfirmationModalData) => Promise<void>
  export const useAddItemModal = () => {
TYPES/INTERFACES:
  export interface ModalState<T = any> {
  export interface ModalActions<T = any> {
  export interface ConfirmationModalData {
USED HOOKS:
  useAddItemModal
  useCallback
  useConfirmationModal
  useModalManager
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/usePageNavigation.ts ---
IMPORTS:
  import { useCallback } from 'react';
FUNCTIONS/METHODS:
  export const usePageNavigation = () => {
TYPES/INTERFACES:
USED HOOKS:
  useCallback
  usePageNavigation
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/form/useCardSelection.ts ---
IMPORTS:
  import { useCallback } from 'react';
  import { UseFormSetValue, UseFormClearErrors } from 'react-hook-form';
  import { transformRequestData } from '../../utils/transformers/responseTransformer';
FUNCTIONS/METHODS:
    onCardIdSelected: (cardId: string) => void;
  export const useCardSelection = (config: CardSelectionConfig) => {
  export const cardSelectionPresets = {
    psa: (
      onCardIdSelected: (cardId: string) => void,
    raw: (
      onCardIdSelected: (cardId: string) => void,
TYPES/INTERFACES:
  interface SelectedCardData {
  interface CardSelectionConfig {
USED HOOKS:
  useCallback
  useCardSelection
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/form/useFormInitialization.ts ---
IMPORTS:
  import { useEffect, useRef } from 'react';
  import { UseFormSetValue } from 'react-hook-form';
FUNCTIONS/METHODS:
  const extractCardData = (cardId: any): CardDataExtraction => {
  const formatDateForForm = (dateInput?: string | Date): string => {
  export const useFormInitialization = (
  export const formInitializationPresets = {
    psa: (
    raw: (
    sealed: (
TYPES/INTERFACES:
  interface BaseFormData {
  interface CardDataExtraction {
  interface FormInitializationConfig {
USED HOOKS:
  useEffect
  useFormInitialization
  useRef
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useItemDisplayData.ts ---
IMPORTS:
  import { useMemo } from 'react';
  import {
FUNCTIONS/METHODS:
    getDetailValue: (key: keyof ItemDisplayData) => string;
  export const useItemDisplayData = ({
  export const useAuctionItemDisplayData = (item: any) =>
  export const useCollectionItemDisplayData = (item: any) =>
  export const useMultipleItemDisplayData = (items: any[]) => {
TYPES/INTERFACES:
  export interface UseItemDisplayDataReturn extends ItemDisplayData {
  export interface UseItemDisplayDataOptions {
USED HOOKS:
  useAuctionItemDisplayData
  useCollectionItemDisplayData
  useItemDisplayData
  useMemo
  useMultipleItemDisplayData
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/theme/useAnimationTheme.ts ---
IMPORTS:
  export { useAnimationTheme } from '../../contexts/theme/AnimationThemeProvider';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
  useAnimationTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/theme/useAccessibilityTheme.ts ---
IMPORTS:
  export { useAccessibilityTheme } from '../../contexts/theme/AccessibilityThemeProvider';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
  useAccessibilityTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/theme/useTheme.ts ---
IMPORTS:
  import { useCallback } from 'react';
  import { useTheme as useNextTheme } from 'next-themes';
  import {
  import { useVisualTheme } from './useVisualTheme';
  import { useLayoutTheme } from './useLayoutTheme';
  import { useAnimationTheme } from './useAnimationTheme';
  import { useAccessibilityTheme } from './useAccessibilityTheme';
  import { useThemeStorage } from './useThemeStorage';
  import { formThemes } from '../../theme/formThemes';
FUNCTIONS/METHODS:
  export const useTheme = (): ThemeContextType => {
      resolvedTheme: (resolvedTheme as 'light' | 'dark') || 'dark',
      setCustomProperties: () =>
      loadCustomPreset: async (name: string) => {
TYPES/INTERFACES:
USED HOOKS:
  useAccessibilityTheme
  useAnimationTheme
  useCallback
  useLayoutTheme
  useNextTheme
  useTheme
  useThemeStorage
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/theme/useVisualTheme.ts ---
IMPORTS:
  export { useVisualTheme } from '../../contexts/theme/VisualThemeProvider';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/theme/useLayoutTheme.ts ---
IMPORTS:
  export { useLayoutTheme } from '../../contexts/theme/LayoutThemeProvider';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
  useLayoutTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/theme/useThemeStorage.ts ---
IMPORTS:
  export { useThemeStorage } from '../../contexts/theme/ThemeStorageProvider';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
  useThemeStorage
API CALLS/ENDPOINTS:

--- FILE: ./shared/hooks/useDragAndDrop.ts ---
IMPORTS:
  import { useCallback, useState } from 'react';
FUNCTIONS/METHODS:
  export const useDragAndDrop = (
    onDrop: (files: FileList) => void,
TYPES/INTERFACES:
USED HOOKS:
  useCallback
  useDragAndDrop
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/types/themeTypes.ts ---
IMPORTS:
  import { ReactNode } from 'react';
  import { ThemeColor } from '../theme/formThemes';
FUNCTIONS/METHODS:
    onClose: () => void;
TYPES/INTERFACES:
  export type VisualTheme =
  export type ColorScheme = 'light' | 'dark' | 'system';
  export type Density = 'compact' | 'comfortable' | 'spacious';
  export type AnimationIntensity = 'subtle' | 'normal' | 'enhanced' | 'disabled';
  export interface ThemeConfiguration {
  export interface ThemePreset {
  export interface BaseThemeProps {
  export type ComponentSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  export type ComponentVariant =
  export interface LoadingProps {
  export type IconPosition = 'start' | 'end' | 'both';
  export type ComponentState =
  export interface StandardButtonProps extends BaseThemeProps, LoadingProps {
  export interface StandardInputProps extends BaseThemeProps {
  export interface StandardSelectProps extends BaseThemeProps {
  export interface StandardCardProps extends BaseThemeProps {
  export interface StandardModalProps extends BaseThemeProps {
  export interface StandardBadgeProps extends BaseThemeProps {
  export interface StandardAlertProps extends BaseThemeProps {
  export interface ThemeOverride {
  export interface ComponentStyleConfig {
  export interface ComponentAnimationConfig {
  export interface CompoundComponentProps {
  export interface PolymorphicProps<T extends React.ElementType = 'div'> {
  export interface FormIntegrationProps {
  export type StandardComponentProps =
  export interface ThemeAwareComponentConfig {
USED HOOKS:
  useEvent
API CALLS/ENDPOINTS:

--- FILE: ./shared/types/searchTypes.ts ---
IMPORTS:
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface SearchResult {
  export interface SearchParams {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/genericApiOperations.ts ---
IMPORTS:
  import { EnhancedRequestConfig, unifiedApiClient } from './unifiedApiClient';
  import { ApiTransformers } from '../utils/transformers/unifiedResponseTransformer';
FUNCTIONS/METHODS:
  export function createResourceConfig(
  export function createIdMapper() {
  function mapSingleId(item: any): any {
  function shouldMapNestedObject(key: string, value: any): boolean {
    getAll: (
    getById: (id: string, options?: OperationOptions) => Promise<TResource>;
    create: (
    update: (
    remove: (id: string, options?: OperationOptions) => Promise<void>;
    search: (
  export function createResourceOperations<
      getAll: (params?: GenericParams, requestOptions?: OperationOptions) =>
      getById: (id: string, requestOptions?: OperationOptions) =>
      create: (data: TCreatePayload, requestOptions?: OperationOptions) =>
      update: (
      remove: (id: string, requestOptions?: OperationOptions) =>
      search: (searchParams: GenericParams, requestOptions?: OperationOptions) =>
  export const AUCTION_CONFIG = createResourceConfig('/auctions', 'auction');
  export const CARD_CONFIG = createResourceConfig('/cards/enhanced', 'card');
  export const SET_CONFIG = createResourceConfig('/sets', 'set');
  export const SALES_CONFIG = createResourceConfig('/sales', 'sale');
  export const CARDMARKET_REF_PRODUCTS_CONFIG = createResourceConfig(
  export const PRODUCTS_CONFIG = createResourceConfig('/products', 'product');
  export const SET_PRODUCTS_CONFIG = createResourceConfig(
  export const DBA_SELECTION_CONFIG = createResourceConfig(
  export const EXPORT_CONFIG = createResourceConfig('/export', 'export');
  export const ACTIVITY_CONFIG = createResourceConfig('/activities', 'activity');
  export const PSA_CARD_CONFIG = createResourceConfig(
  export const RAW_CARD_CONFIG = createResourceConfig('/raw-cards', 'raw card');
  export const SEALED_PRODUCT_CONFIG = createResourceConfig(
  export const idMapper = createIdMapper();
TYPES/INTERFACES:
  export interface GenericParams {
  export interface ResourceConfig {
  export type TransformationStrategy =
  export interface OperationOptions extends Partial<EnhancedRequestConfig> {
  export interface ResourceOperations<
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/collectionApi.ts ---
IMPORTS:
  import { unifiedApiClient } from './unifiedApiClient';
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { ISaleDetails } from '../domain/models/common';
  import { createApiLogger } from '../utils/performance/apiLogger';
FUNCTIONS/METHODS:
  export const getPsaGradedCards = async (
  export const getPsaGradedCardById = async (
  export const createPsaGradedCard = async (
  export const updatePsaGradedCard = async (
  export const deletePsaGradedCard = async (id: string): Promise<void> => {
  export const markPsaGradedCardSold = async (
  export const getRawCards = async (
  export const getRawCardById = async (id: string): Promise<IRawCard> => {
  export const createRawCard = async (
  export const updateRawCard = async (
  export const deleteRawCard = async (id: string): Promise<void> => {
  export const markRawCardSold = async (
  export const getSealedProductCollection = async (
  export const getSealedProductById = async (
  export const createSealedProduct = async (
  export const updateSealedProduct = async (
  export const deleteSealedProduct = async (id: string): Promise<void> => {
  export const markSealedProductSold = async (
TYPES/INTERFACES:
  export interface PsaGradedCardsParams {
  export interface RawCardsParams {
  export interface SealedProductCollectionParams {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/salesApi.ts ---
IMPORTS:
  import { createResourceOperations, SALES_CONFIG } from './genericApiOperations';
  import { unifiedApiClient } from './unifiedApiClient';
  import { ISale, ISalesGraphData, ISalesSummary } from '../domain/models/sale';
FUNCTIONS/METHODS:
  const transformSalesData = (rawData: any[]): ISale[] => {
  export const getSalesData = async (
  export const exportSales = salesOperations.export;
  export const getSalesSummary = async (
  export const getSalesGraphData = async (
TYPES/INTERFACES:
  export interface SalesDataParams {
  export interface SalesSummaryParams {
  export interface SalesGraphDataParams {
  type ISaleCreatePayload = Omit<ISale, 'id'>;
  type ISaleUpdatePayload = Partial<ISaleCreatePayload>;
USED HOOKS:
  useDbaExport
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/activityApi.ts ---
IMPORTS:
  import {
  import { unifiedApiClient } from './unifiedApiClient';
FUNCTIONS/METHODS:
  export const ACTIVITY_TYPES = {
  export const ACTIVITY_PRIORITIES = {
  export const getAllActivities = async (
  export const getActivityById = async (id: string): Promise<Activity> => {
  export const createActivity = async (
  export const updateActivity = activityOperations.update;
  export const removeActivity = activityOperations.remove;
  export const searchActivitiesGeneric = activityOperations.search;
  export const exportActivities = activityOperations.export;
  export const getActivities = async (
  export const getRecentActivities = async (
  export const getActivityStats = async (): Promise<ActivityStatsResponse> => {
  export const searchActivities = async (
  export const getActivitiesForEntity = async (
  export const markActivityAsRead = async (
  export const archiveActivity = async (
TYPES/INTERFACES:
  export interface ActivityMetadata {
  export interface Activity {
  export interface ActivityFilters {
  export interface ActivityResponse {
  export interface ActivityStats {
  export interface ActivityStatsResponse {
  type IActivityCreatePayload = Omit<
  type IActivityUpdatePayload = Partial<IActivityCreatePayload>;
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/exportApi.ts ---
IMPORTS:
  import {
  import { unifiedApiClient } from './unifiedApiClient';
  import { ZipImageUtility } from '../utils/api/ZipImageUtility';
FUNCTIONS/METHODS:
  export const getExports = exportOperations.getAll;
  export const getExportById = exportOperations.getById;
  export const createExport = exportOperations.create;
  export const updateExport = exportOperations.update;
  export const removeExport = exportOperations.remove;
  export const searchExports = exportOperations.search;
  export const generateAuctionFacebookPost = async (
  export const getAuctionFacebookTextFile = async (
  export const zipAuctionImages = async (auctionId: string): Promise<Blob> => {
  export const zipRawCardImages = async (cardIds?: string[]): Promise<Blob> => {
  export const zipPsaCardImages = async (cardIds?: string[]): Promise<Blob> => {
  export const zipSealedProductImages = async (
  export const getCollectionFacebookTextFile = async (
  export const exportToDba = async (
  export const downloadDbaZip = async (): Promise<void> => {
  export const downloadBlob = (blob: Blob, filename: string): void => {
  export const postToDbaMarketplace = async (
  export const getDbaIntegrationStatus =
  export const testDbaIntegration = async (): Promise<DbaTestResponse> => {
  export const isDbaIntegrationHealthy = async (): Promise<boolean> => {
  export const getDbaApiLimits = async (): Promise<{
  export const exportAndPostToDba = async (
TYPES/INTERFACES:
  interface IExport {
  type IExportCreatePayload = Omit<
  type IExportUpdatePayload = Partial<IExportCreatePayload>;
  export interface DbaExportItem {
  export interface DbaExportRequest {
  export interface DbaExportResponse {
  export interface DbaCredentials {
  export interface DbaPostRequest {
  export interface DbaPostResponse {
  export interface DbaIntegrationStatus {
  export interface DbaTestResponse {
USED HOOKS:
API CALLS/ENDPOINTS:
    const response = (await unifiedApiClient.post(
    const rawCards = (await unifiedApiClient.get(endpoint)) as any;
    const psaCards = (await unifiedApiClient.get(endpoint)) as any;
    const sealedProducts = (await unifiedApiClient.get(endpoint)) as any;
        .get('/export/dba/download', {

--- FILE: ./shared/api/unifiedApiClient.ts ---
IMPORTS:
  import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
  import { API_BASE_URL } from '../utils/helpers/constants';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { log } from '../utils/performance/logger';
  import { optimizedApiRequest } from '../utils/transformers/apiOptimization';
  import {
FUNCTIONS/METHODS:
  export const validateAndSanitizeId = (
  export const buildUrlWithId = (
      request: () => Promise<AxiosResponse<T>>,
      request: () => Promise<AxiosResponse<T>>,
      requestFn: () => Promise<AxiosResponse<T>>,
      requestFn: () => Promise<AxiosResponse<T>>,
  export const unifiedApiClient = new UnifiedApiClient();
TYPES/INTERFACES:
  export interface ApiRequestConfig extends AxiosRequestConfig {
  export interface OptimizationConfig {
  export interface EnhancedRequestConfig extends ApiRequestConfig {
  export interface OptimizationStrategy {
USED HOOKS:
API CALLS/ENDPOINTS:
      const instance = axios.create({

--- FILE: ./shared/api/statusApi.ts ---
IMPORTS:
  import unifiedApiClient from './unifiedApiClient';
FUNCTIONS/METHODS:
  export const getApiStatus = async (): Promise<ApiStatusResponse> => {
  export const getDataCounts = async (): Promise<{
TYPES/INTERFACES:
  export interface ApiStatusResponse {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/productsApi.ts ---
IMPORTS:
  import {
  import unifiedApiClient from './unifiedApiClient';
  import { searchProducts } from './searchApi';
  import { IProduct } from '../domain/models/product';
FUNCTIONS/METHODS:
  export const getProducts = async (
  export const searchProductsWithParams = async (
  export const exportProducts = productOperations.export;
  export const getPaginatedProducts = async (
TYPES/INTERFACES:
  export interface ProductsParams {
  export interface PaginatedProductsResponse {
  export interface ProductSearchParams {
  export interface OptimizedProductSearchResponse {
  type IProductCreatePayload = Omit<IProduct, 'id' | '_id'>;
  type IProductUpdatePayload = Partial<IProductCreatePayload>;
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/auctionsApi.ts ---
IMPORTS:
  import {
  import { unifiedApiClient } from './unifiedApiClient';
  import { IAuction } from '../domain/models/auction';
FUNCTIONS/METHODS:
  export const getAuctions = async (
  export const getAuctionById = async (id: string): Promise<IAuction> => {
  export const createAuction = async (
  export const updateAuction = auctionOperations.update;
  export const deleteAuction = auctionOperations.remove;
  export const searchAuctions = auctionOperations.search;
  export const exportAuctions = auctionOperations.export;
  export const addItemToAuction = async (
  export const removeItemFromAuction = async (
  export const markAuctionItemSold = async (
TYPES/INTERFACES:
  export interface AuctionsParams {
  export interface AddItemToAuctionData {
  type IAuctionCreatePayload = Omit<IAuction, 'id' | '_id'>;
  type IAuctionUpdatePayload = Partial<IAuctionCreatePayload>;
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/TypeSafeApiClient.ts ---
IMPORTS:
  import {
  import { unifiedApiClient, EnhancedRequestConfig } from './unifiedApiClient';
FUNCTIONS/METHODS:
  export const typeSafeApiClient = new TypeSafeApiClient();
TYPES/INTERFACES:
  export interface ITypeSafeHttpClient {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/dbaSelectionApi.ts ---
IMPORTS:
  import {
  import unifiedApiClient from './unifiedApiClient';
FUNCTIONS/METHODS:
  export const getDbaSelections = async (
  export const searchDbaSelections = dbaSelectionOperations.search;
  export const exportDbaSelections = dbaSelectionOperations.export;
  export const addToDbaSelection = async (
  export const removeFromDbaSelection = async (
TYPES/INTERFACES:
  export interface DbaSelectionItem {
  export interface DbaSelection {
  export interface DbaSelectionStats {
  export interface DbaSelectionResponse {
  export interface DbaSelectionParams {
  type IDbaSelectionCreatePayload = Omit<
  type IDbaSelectionUpdatePayload = Partial<IDbaSelectionCreatePayload>;
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/searchApi.ts ---
IMPORTS:
  import { ICard, ISet } from '../domain/models/card';
  import { IProduct } from '../domain/models/product';
  import { ISetProduct } from '../domain/models/setProduct';
  import { buildQueryParams } from '../utils/helpers/searchHelpers';
  import { ApiTransformers } from '../utils/transformers/unifiedResponseTransformer';
FUNCTIONS/METHODS:
  const pureFetch = async (url: string): Promise<any> => {
  export const searchCards = async (
  export const getCardSuggestions = async (
  export const getBestMatchCard = async (
  export const searchCardsInSet = async (
  export const searchCardsByPokemonNumber = async (
  export const searchCardsByVariety = async (
  export const searchSets = async (
  export const getSetSuggestions = async (
  export const getBestMatchSet = async (query: string): Promise<ISet | null> => {
  export const searchProducts = async (
  export const getProductSuggestions = async (
  export const getBestMatchProduct = async (
  export const searchProductsInSet = async (
  export const searchProductsByCategory = async (
  export const searchProductsByPriceRange = async (
  export const searchAvailableProducts = async (
  export const searchSetProducts = async (
      limit: (params.limit || 15).toString(),
      page: (params.page || 1).toString(),
  export const getSetProductSuggestions = async (
  export const getBestMatchSetProduct = async (
TYPES/INTERFACES:
  export interface CardSearchParams {
  export interface SetSearchParams {
  export interface ProductSearchParams {
  export interface SetProductSearchParams {
  export interface SearchResponse<T> {
USED HOOKS:
API CALLS/ENDPOINTS:
    const response = await fetch(url, {

--- FILE: ./shared/api/setsApi.ts ---
IMPORTS:
  import { createResourceOperations, SET_CONFIG } from './genericApiOperations';
  import { unifiedApiClient } from './unifiedApiClient';
  import { ISet } from '../domain/models/card';
  import { searchSets as searchSetsApi, type SetSearchParams } from './searchApi';
  export { getSetSuggestions, getBestMatchSet } from './searchApi';
FUNCTIONS/METHODS:
  export const searchSets = async (searchParams: any): Promise<ISet[]> => {
  export const getPaginatedSets = async (
TYPES/INTERFACES:
  export interface PaginatedSetsParams {
  export interface PaginatedSetsResponse {
  type ISetCreatePayload = Omit<ISet, 'id' | '_id'>;
  type ISetUpdatePayload = Partial<ISetCreatePayload>;
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/cardsApi.ts ---
IMPORTS:
  import { CARD_CONFIG, createResourceOperations } from './genericApiOperations';
  import { ICard } from '../domain/models/card';
  import { searchCards as searchCardsApi } from './searchApi';
FUNCTIONS/METHODS:
  export const searchCards = async (searchParams: any): Promise<ICard[]> => {
  export const exportCards = cardOperations.export;
TYPES/INTERFACES:
  export interface CardsSearchParams {
  export interface CardSearchParams {
  export interface CardSearchResponse {
  export interface CardMetrics {
  type ICardCreatePayload = Omit<ICard, 'id' | '_id'>;
  type ICardUpdatePayload = Partial<ICardCreatePayload>;
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/uploadApi.ts ---
IMPORTS:
  import unifiedApiClient from './unifiedApiClient';
FUNCTIONS/METHODS:
  export const uploadSingleImage = async (image: File): Promise<string> => {
  export const uploadSingleImageWithThumbnails = async (
  export const uploadMultipleImages = async (
  export const uploadMultipleImagesWithThumbnails = async (
  export const cleanupImages = async (imageUrls: string[]): Promise<void> => {
  export const cleanupAllOrphanedImages = async (): Promise<void> => {
TYPES/INTERFACES:
  export interface UploadResponse {
  export interface SingleUploadResult {
  export interface MultipleUploadResult {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/setProductsApi.ts ---
IMPORTS:
  import {
  import unifiedApiClient from './unifiedApiClient';
  import { ISetProduct } from '../domain/models/setProduct';
FUNCTIONS/METHODS:
  export const getSetProducts = async (
  export const getSetProductById = async (id: string): Promise<ISetProduct> => {
  export const searchSetProducts = async (
  export const getSetProductSuggestions = async (
  export const getPaginatedSetProducts = async (
  export const exportSetProducts = setProductOperations.export;
TYPES/INTERFACES:
  export interface SetProductsParams {
  export interface PaginatedSetProductsResponse {
  export interface SetProductSearchParams {
  type ISetProductCreatePayload = Omit<ISetProduct, 'id' | '_id'>;
  type ISetProductUpdatePayload = Partial<ISetProductCreatePayload>;
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/api/cardMarket/cardMarketApi.ts ---
IMPORTS:
  import { ICardMarketReferenceProduct } from '../../domain/models/sealedProduct';
FUNCTIONS/METHODS:
  export const searchProducts = async (
  export const getCategories = async (): Promise<
  export const getCategoryDetails = async (
TYPES/INTERFACES:
  export interface CardMarketSearchParams {
  export interface CardMarketSearchResponse {
  export interface CategoryDetails {
USED HOOKS:
API CALLS/ENDPOINTS:
    const response = await fetch(`${BASE_URL}/search?${queryParams.toString()}`);
    const response = await fetch(`${BASE_URL}/categories`);
    const response = await fetch(

--- FILE: ./shared/components/organisms/effects/GlassmorphismContainer.tsx ---
IMPORTS:
  import React from 'react';
  import { cn } from '../../../utils/helpers/common';
FUNCTIONS/METHODS:
  export const GlassmorphismContainer: React.FC<GlassmorphismContainerProps> = ({
        neural: (
        dots: (
        grid: (
        waves: (
        particles: (
  export const IconGlassmorphism: React.FC<IconGlassmorphismProps> = ({
TYPES/INTERFACES:
  export interface GlassmorphismContainerProps {
  export interface IconGlassmorphismProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/effects/Context7Background.tsx ---
IMPORTS:
  import React from 'react';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface Context7BackgroundProps {
REACT COMPONENTS:
  const Context7Background: React.FC<Context7BackgroundProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/effects/CosmicBackground.tsx ---
IMPORTS:
  import React from 'react';
  import { useCentralizedTheme, themeUtils } from '../../../utils/ui/themeConfig';
  import {
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface CosmicBackgroundProps {
REACT COMPONENTS:
  const CosmicBackground: React.FC<CosmicBackgroundProps> = ({
USED HOOKS:
  useCentralizedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/effects/index.ts ---
IMPORTS:
  export { default as ParticleSystem } from './ParticleSystem';
  export type { ParticleSystemProps } from './ParticleSystem';
  export { default as NeuralNetworkBackground } from './NeuralNetworkBackground';
  export type { NeuralNetworkBackgroundProps } from './NeuralNetworkBackground';
  export { default as FloatingGeometry } from './FloatingGeometry';
  export { default as CosmicBackground } from './CosmicBackground';
  export type { CosmicBackgroundProps } from './CosmicBackground';
  export { default as HolographicBorder } from './HolographicBorder';
  export type { HolographicBorderProps } from './HolographicBorder';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type { ParticleSystemProps } from './ParticleSystem';
  export type { NeuralNetworkBackgroundProps } from './NeuralNetworkBackground';
  export type {
  export type { CosmicBackgroundProps } from './CosmicBackground';
  export type { HolographicBorderProps } from './HolographicBorder';
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/effects/HolographicBorder.tsx ---
IMPORTS:
  import React from 'react';
  import { cn } from '../../../utils/helpers/common';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface HolographicBorderProps {
REACT COMPONENTS:
  const HolographicBorder: React.FC<HolographicBorderProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/effects/ParticleSystem.tsx ---
IMPORTS:
  import React from 'react';
  import { useCentralizedTheme, themeUtils } from '../../../utils/ui/themeConfig';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface ParticleSystemProps {
REACT COMPONENTS:
  const ParticleSystem: React.FC<ParticleSystemProps> = ({
USED HOOKS:
  useCentralizedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/effects/UnifiedEffectSystem.tsx ---
IMPORTS:
  import React, { useMemo } from 'react';
  import { useUnifiedTheme } from '../../contexts/theme/UnifiedThemeProvider';
FUNCTIONS/METHODS:
  export const UnifiedEffectSystem: React.FC<UnifiedEffectSystemProps> = ({
  export const CosmicBackground: React.FC<{
  export const NeuralNetworkBackground: React.FC<{
  export const ParticleSystem: React.FC<{
  export const CosmicDbaBackground: React.FC<{ className?: string }> = ({
  export const NeuralAuctionBackground: React.FC<{ className?: string }> = ({
  export const HolographicCardEffect: React.FC<{ className?: string }> = ({
TYPES/INTERFACES:
  interface UnifiedEffectSystemProps {
REACT COMPONENTS:
USED HOOKS:
  useMemo
  useUnifiedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/effects/NeuralNetworkBackground.tsx ---
IMPORTS:
  import React from 'react';
  import { useCentralizedTheme, themeUtils } from '../../../utils/ui/themeConfig';
FUNCTIONS/METHODS:
  function hexToRgb(hex: string): string {
TYPES/INTERFACES:
  export interface NeuralNetworkBackgroundProps {
REACT COMPONENTS:
  const NeuralNetworkBackground: React.FC<NeuralNetworkBackgroundProps> = ({
USED HOOKS:
  useCentralizedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/effects/FloatingGeometry.tsx ---
IMPORTS:
  import React from 'react';
  import { useCentralizedTheme, themeUtils } from '../../../utils/ui/themeConfig';
  import { useAnimationTheme } from '../../../hooks/theme/useAnimationTheme';
FUNCTIONS/METHODS:
  function hexToRgb(hex: string): string {
TYPES/INTERFACES:
  export interface GeometricElement {
  export interface FloatingGeometryProps {
REACT COMPONENTS:
  const FloatingGeometry: React.FC<FloatingGeometryProps> = ({
USED HOOKS:
  useAnimationTheme
  useCentralizedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/ui/toastNotifications.ts ---
IMPORTS:
  import toast from 'react-hot-toast';
FUNCTIONS/METHODS:
  export const showSuccessToast = (
  export const showInfoToast = (
  export const showWarningToast = (
  export const showErrorToast = (
  export const showStatusErrorToast = (
  export const showStorageErrorToast = (
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/ui/ThemeToggle.tsx ---
IMPORTS:
  import React, { useEffect, useState } from 'react';
  import { useTheme } from 'next-themes';
  import { Monitor, Moon, Sparkles, Sun } from 'lucide-react';
FUNCTIONS/METHODS:
  const ThemeToggle: React.FC = () => {
TYPES/INTERFACES:
REACT COMPONENTS:
  const ThemeToggle: React.FC = () => {
USED HOOKS:
  useEffect
  useState
  useTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/ThemePicker.tsx ---
IMPORTS:
  import React from 'react';
  import { themePresets, VisualTheme } from '../../contexts/ThemeContext';
  import { useVisualTheme, useLayoutTheme } from '../../contexts/theme';
  import { PokemonCard } from '../design-system/PokemonCard';
  import { PokemonButton } from '../design-system/PokemonButton';
  import { cn } from '../../../utils/common';
FUNCTIONS/METHODS:
  export const ThemePicker: React.FC<ThemePickerProps> = ({
TYPES/INTERFACES:
  export interface ThemePickerProps {
REACT COMPONENTS:
USED HOOKS:
  useLayoutTheme
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/FocusManagementTheme.tsx ---
IMPORTS:
  import { useEffect, ReactNode } from 'react';
  import { useAccessibilityTheme as useAccessibilityThemeContext } from '../../contexts/theme';
  import { useAccessibilityTheme } from '../../hooks/useAccessibilityTheme';
  import { cn } from '../../../utils/unifiedUtilities';
FUNCTIONS/METHODS:
  export const FocusManagementTheme: React.FC<FocusManagementThemeProps> = ({
TYPES/INTERFACES:
  export interface FocusManagementThemeProps {
REACT COMPONENTS:
USED HOOKS:
  useAccessibilityTheme
  useAccessibilityThemeContext
  useEffect
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/ThemeImporter.tsx ---
IMPORTS:
  import { useState, useRef, useCallback } from 'react';
  import { Upload, FileText, AlertCircle } from 'lucide-react';
  import { cn } from '../../../utils/unifiedUtilities';
  import type { ThemeExportData } from './utils/themeExportUtils';
  import { parseThemeFile, validateThemeData } from './utils/themeExportUtils';
FUNCTIONS/METHODS:
    onThemeImported: (themeData: ThemeExportData) => void;
    onToggleImportOptions: () => void;
  export const ThemeImporter: React.FC<ThemeImporterProps> = ({
TYPES/INTERFACES:
  interface ThemeImporterProps {
REACT COMPONENTS:
USED HOOKS:
  useCallback
  useRef
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/utils/themeExportUtils.ts ---
IMPORTS:
  import type {
FUNCTIONS/METHODS:
  export const generateThemeExportData = (
  export const downloadThemeAsFile = (
  export const validateThemeData = (data: any): data is ThemeExportData => {
  export const getThemeConfigSummary = (
  export const createThemeBackup = (
  export const parseThemeFile = async (file: File): Promise<ThemeExportData> => {
TYPES/INTERFACES:
  export interface ThemeExportData {
  export interface ThemeBackup {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/utils/themeValidationUtils.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const validateColor = (
  export const validateSpacing = (
  export const validateAnimation = (config: any): ValidationResult[] => {
  export const validateAccessibility = (config: any): ValidationResult[] => {
  function getColorLuminance(color: string): number {
  export const validateThemeConfig = (
TYPES/INTERFACES:
  export interface ValidationResult {
  export interface ThemeValidationConfig {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/ThemeBackupManager.tsx ---
IMPORTS:
  import { useState, useCallback } from 'react';
  import { Trash2, Download, Upload } from 'lucide-react';
  import { cn } from '../../../utils/unifiedUtilities';
  import type { ThemeBackup, ThemeExportData } from './utils/themeExportUtils';
  import {
FUNCTIONS/METHODS:
    onRestoreBackup: (backup: ThemeBackup) => void;
    onToggleBackups: () => void;
  export const ThemeBackupManager: React.FC<ThemeBackupManagerProps> = ({
TYPES/INTERFACES:
  interface ThemeBackupManagerProps {
REACT COMPONENTS:
USED HOOKS:
  useCallback
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/ReducedMotionTheme.tsx ---
IMPORTS:
  import { useEffect, ReactNode } from 'react';
  import { useAccessibilityTheme as useAccessibilityThemeContext } from '../../contexts/theme';
  import { useAccessibilityTheme } from '../../hooks/useAccessibilityTheme';
  import { cn } from '../../../utils/unifiedUtilities';
FUNCTIONS/METHODS:
  export const ReducedMotionTheme: React.FC<ReducedMotionThemeProps> = ({
TYPES/INTERFACES:
  export interface ReducedMotionThemeProps {
REACT COMPONENTS:
USED HOOKS:
  useAccessibilityTheme
  useAccessibilityThemeContext
  useEffect
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/ThemePerformanceMonitor.tsx ---
IMPORTS:
  import { useState, useEffect, useRef } from 'react';
  import { Activity, Zap, Clock, TrendingUp } from 'lucide-react';
  import { cn } from '../../../utils/unifiedUtilities';
FUNCTIONS/METHODS:
  export const ThemePerformanceMonitor: React.FC<
TYPES/INTERFACES:
  interface PerformanceData {
  interface ThemePerformanceMonitorProps {
REACT COMPONENTS:
USED HOOKS:
  useEffect
  useRef
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/index.ts ---
IMPORTS:
  export { default as ThemeDebugger } from './ThemeDebugger';
  export type { ThemeDebuggerProps } from './ThemeDebugger';
  export { default as ThemePicker } from './ThemePicker';
  export type { ThemePickerProps } from './ThemePicker';
  export { default as ThemeExporter } from './ThemeExporter';
  export type { ThemeExporterProps } from './ThemeExporter';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type { ThemeDebuggerProps } from './ThemeDebugger';
  export type { ThemePickerProps } from './ThemePicker';
  export type { ThemeExporterProps } from './ThemeExporter';
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/ThemeExportManager.tsx ---
IMPORTS:
  import { useState, useCallback } from 'react';
  import { Download, Package, FileText } from 'lucide-react';
  import { cn } from '../../../utils/unifiedUtilities';
  import type { ThemeExportData } from './utils/themeExportUtils';
  import {
FUNCTIONS/METHODS:
    onToggleExportOptions: () => void;
  export const ThemeExportManager: React.FC<ThemeExportManagerProps> = ({
TYPES/INTERFACES:
  interface ThemeExportManagerProps {
REACT COMPONENTS:
USED HOOKS:
  useCallback
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/ThemeDebugger.tsx ---
IMPORTS:
  import React, { useState, Suspense } from 'react';
  import { Bug } from 'lucide-react';
  import { ThemePerformanceMonitor } from './ThemePerformanceMonitor';
  import { ThemeDebugPanel } from './ThemeDebugPanel';
  import { validateThemeConfig } from './utils/themeValidationUtils';
  import { useVisualTheme, useLayoutTheme, useAnimationTheme, useAccessibilityTheme } from '../../contexts/theme';
  import { useCentralizedTheme } from '../../../utils/ui/themeConfig';
  import {
FUNCTIONS/METHODS:
  export const ThemeDebugger: React.FC<ThemeDebuggerProps> = ({
        content: (
        content: (
        content: (
        content: (
TYPES/INTERFACES:
  export interface ThemeDebuggerProps {
  type DebugPanel =
REACT COMPONENTS:
USED HOOKS:
  useAccessibilityTheme
  useAnimationConfig
  useAnimationTheme
  useCentralizedTheme
  useLayoutTheme
  useMemo
  useState
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/ThemeExporter.tsx ---
IMPORTS:
  import React, { useState, useCallback, useRef } from 'react';
  import { Download, Upload } from 'lucide-react';
  import { useVisualTheme, useLayoutTheme, useAnimationTheme, useAccessibilityTheme } from '../../contexts/theme';
  import {
  import { cn } from '../../../utils/unifiedUtilities';
FUNCTIONS/METHODS:
  export const ThemeExporter: React.FC<ThemeExporterProps> = ({
TYPES/INTERFACES:
  export interface ThemeExporterProps {
REACT COMPONENTS:
USED HOOKS:
  useAccessibilityTheme
  useAnimationConfig
  useAnimationTheme
  useCallback
  useCentralizedTheme
  useLayoutTheme
  useRef
  useState
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/AccessibilityControls.tsx ---
IMPORTS:
  import { useAccessibilityTheme as useAccessibilityThemeContext } from '../../contexts/theme';
  import { useAccessibilityTheme } from '../../hooks/useAccessibilityTheme';
  import { cn } from '../../../utils/unifiedUtilities';
FUNCTIONS/METHODS:
  export const AccessibilityControls: React.FC<AccessibilityControlsProps> = ({
TYPES/INTERFACES:
  export interface AccessibilityControlsProps {
REACT COMPONENTS:
USED HOOKS:
  useAccessibilityTheme
  useAccessibilityThemeContext
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/AccessibilityTheme.tsx ---
IMPORTS:
  import { useEffect, ReactNode } from 'react';
  import { useAccessibilityTheme as useAccessibilityThemeContext } from '../../contexts/theme';
  import { useAccessibilityTheme } from '../../hooks/useAccessibilityTheme';
  import { cn } from '../../../utils/unifiedUtilities';
  export { HighContrastTheme } from './HighContrastTheme';
  export { ReducedMotionTheme } from './ReducedMotionTheme';
  export { FocusManagementTheme } from './FocusManagementTheme';
  export { AccessibilityControls } from './AccessibilityControls';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface AccessibilityThemeProps {
  export interface AccessibilityIndicatorProps {
  interface AccessibilitySkipLinksProps {
  interface AccessibilityIndicatorsProps {
REACT COMPONENTS:
  const AccessibilitySkipLinks: React.FC<AccessibilitySkipLinksProps> = ({
  const AccessibilityIndicators: React.FC<AccessibilityIndicatorsProps> = ({
  const AccessibilityTheme: React.FC<
USED HOOKS:
  useAccessibilityTheme
  useAccessibilityThemeContext
  useEffect
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/ThemeDebugPanel.tsx ---
IMPORTS:
  import { useState } from 'react';
  import {
  import { cn } from '../../../utils/unifiedUtilities';
  import type { ValidationResult } from './utils/themeValidationUtils';
FUNCTIONS/METHODS:
  export const ThemeDebugPanel: React.FC<ThemeDebugPanelProps> = ({
        content: (
        content: (
        content: (
TYPES/INTERFACES:
  interface DebugPanel {
  interface ThemeDebugPanelProps {
REACT COMPONENTS:
USED HOOKS:
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/organisms/theme/HighContrastTheme.tsx ---
IMPORTS:
  import { useEffect, ReactNode } from 'react';
  import { useAccessibilityTheme as useAccessibilityThemeContext } from '../../contexts/theme';
  import { useAccessibilityTheme } from '../../hooks/useAccessibilityTheme';
  import { cn } from '../../../utils/unifiedUtilities';
FUNCTIONS/METHODS:
  export const HighContrastTheme: React.FC<HighContrastThemeProps> = ({
TYPES/INTERFACES:
  export interface HighContrastThemeProps {
REACT COMPONENTS:
USED HOOKS:
  useAccessibilityTheme
  useAccessibilityThemeContext
  useEffect
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/MarkSoldForm.tsx ---
IMPORTS:
  import React from 'react';
  import { DollarSign } from 'lucide-react';
  import { IBuyerAddress, ISaleDetails } from '../../../domain/models/common';
  import { DeliveryMethod, PaymentMethod, Source } from '../../../shared/utils/helpers/constants';
  import {
  import { useMarkSold } from '../../hooks/useMarkSold';
FUNCTIONS/METHODS:
    onCancel: () => void;
    onSuccess: () => void;
  export const MarkSoldForm: React.FC<MarkSoldFormProps> = ({
      onError: (err) => console.error('Failed to mark item as sold:', err),
TYPES/INTERFACES:
  interface MarkSoldFormProps {
  interface FormData extends ISaleDetails {
REACT COMPONENTS:
USED HOOKS:
  useMarkSold
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/fields/ProductInformationFields.tsx ---
IMPORTS:
  import { PokemonSelect } from '../../../atoms/design-system/PokemonSelect';
  import { ProductCategory } from '../../../domain/models/product';
FUNCTIONS/METHODS:
                validate: (value) =>
TYPES/INTERFACES:
  interface ReadOnlyProductFields {
  interface ProductInformationFieldsProps {
REACT COMPONENTS:
  const ProductInformationFields: React.FC<ProductInformationFieldsProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/fields/index.ts ---
IMPORTS:
  export { default as CardInformationFields } from './CardInformationFields';
  export { default as ProductInformationFields } from './ProductInformationFields';
  export { default as InformationFieldRenderer } from './InformationFieldRenderer';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/fields/InformationFieldRenderer.tsx ---
IMPORTS:
  import React from 'react';
  import { FieldErrors, UseFormRegister, UseFormWatch } from 'react-hook-form';
  import CardInformationFields from './CardInformationFields';
  import ProductInformationFields from './ProductInformationFields';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  type FieldType = 'card' | 'product';
  interface ReadOnlyFields {
  interface InformationFieldRendererProps {
REACT COMPONENTS:
  const InformationFieldRenderer: React.FC<InformationFieldRendererProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/fields/CardInformationFields.tsx ---
IMPORTS:
  import React from 'react';
  import { FieldErrors, UseFormRegister, UseFormWatch } from 'react-hook-form';
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
  import { IGrades } from '../../../domain/models/card';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface ReadOnlyCardFields {
  interface CardInformationFieldsProps {
REACT COMPONENTS:
  const CardInformationFields: React.FC<CardInformationFieldsProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/fields/ValidationField.tsx ---
IMPORTS:
  import React from 'react';
  import { PokemonSelect } from '../../atoms/design-system/PokemonSelect';
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
  import {
FUNCTIONS/METHODS:
  export const ValidationField: React.FC<ValidationFieldProps> = ({
            custom: (value: string) => {
TYPES/INTERFACES:
  export type ValidationFieldType =
  interface ValidationFieldProps {
REACT COMPONENTS:
USED HOOKS:
  useFormValidation
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/AddEditCardForm.tsx ---
IMPORTS:
  import React, { useEffect } from 'react';
  import { Award, Package } from 'lucide-react';
  import { IRawCard, IPsaGradedCard } from '../../../domain/models/card';
  import { useCollectionOperations } from '../../hooks/useCollectionOperations';
  import { useBaseForm } from '../../hooks/useBaseForm';
  import { commonValidationRules } from '../../hooks/useFormValidation';
  import {
  import {
  import {
  import CardFormContainer from './containers/CardFormContainer';
  import HierarchicalCardSearch from './sections/HierarchicalCardSearch';
  import CardInformationFields from './fields/CardInformationFields';
  import GradingPricingSection from './sections/GradingPricingSection';
  import SaleDetailsSection from './sections/SaleDetailsSection';
  import ImageUploadSection from './sections/ImageUploadSection';
FUNCTIONS/METHODS:
    onCancel: () => void;
    onSuccess: () => void;
  export const AddEditCardForm: React.FC<AddEditCardFormProps> = ({
TYPES/INTERFACES:
  export type CardType = 'raw-card' | 'psa-graded';
  interface AddEditCardFormProps {
REACT COMPONENTS:
USED HOOKS:
  useBaseForm
  useCardSelection
  useCollectionOperations
  useEffect
  useFormInitialization
  useFormSubmission
  useFormValidation
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/AddEditSealedProductForm.tsx ---
IMPORTS:
  import React, { useEffect, useState, useMemo } from 'react';
  import { Archive, Camera, Package, TrendingUp } from 'lucide-react';
  import { ISealedProduct } from '../../../domain/models/sealedProduct';
  import { useCollectionOperations } from '../../hooks/useCollectionOperations';
  import { useBaseForm } from '../../hooks/useBaseForm';
  import { commonValidationRules } from '../../hooks/useFormValidation';
  import {
  import { PokemonInput } from '../atoms/design-system/PokemonInput';
  import LoadingSpinner from '../molecules/common/LoadingSpinner';
  import FormHeader from '../molecules/common/FormHeader';
  import FormActionButtons from '../molecules/common/FormActionButtons';
  import { PokemonSearch } from '../design-system/PokemonSearch';
  import ImageUploader from '../../../components/ImageUploader';
  import { PriceHistoryDisplay } from '../../../components/PriceHistoryDisplay';
  import ValidationField from './fields/ValidationField';
  import HierarchicalProductSearch from './sections/HierarchicalProductSearch';
  import {
  import {
FUNCTIONS/METHODS:
    onCancel: () => void;
    onSuccess: () => void;
  const formatDateForInput = (isoDate: string | undefined): string => {
        custom: (value: string) => {
      validateBeforeSubmission: (_data) => {
      prepareSubmissionData: async ({ formData, imageUrls }) => {
      submitToApi: async (productData, isEditing) => {
TYPES/INTERFACES:
  interface AddEditSealedProductFormProps {
  interface FormData {
REACT COMPONENTS:
  const AddEditSealedProductForm: React.FC<AddEditSealedProductFormProps> = ({
USED HOOKS:
  useBaseForm
  useCollectionOperations
  useEffect
  useFormSubmission
  useFormValidation
  useMemo
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/sections/HierarchicalProductSearch.tsx ---
IMPORTS:
  import React from 'react';
  import {
  import {
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface HierarchicalProductSearchProps {
REACT COMPONENTS:
  const HierarchicalProductSearch: React.FC<HierarchicalProductSearchProps> = (
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/sections/ImageUploadSection.tsx ---
IMPORTS:
  import React from 'react';
  import { Camera, Image, Upload, Sparkles } from 'lucide-react';
  import ImageUploader from '../../../../components/ImageUploader';
FUNCTIONS/METHODS:
    onImagesChange: (files: File[], remainingExistingUrls?: string[]) => void;
TYPES/INTERFACES:
  interface ImageUploadSectionProps {
REACT COMPONENTS:
  const ImageUploadSection: React.FC<ImageUploadSectionProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/sections/AuctionItemSelectionSection.tsx ---
IMPORTS:
  import React, { useMemo, useState, useCallback } from 'react';
  import {
  import { PokemonSelect } from '../../atoms/design-system/PokemonSelect';
  import { PokemonSearch } from '../../atoms/design-system/PokemonSearch';
  import { PokemonButton } from '../../atoms/design-system/PokemonButton';
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
FUNCTIONS/METHODS:
    onToggleSelection: (itemId: string) => void;
    onSelectAll: () => void;
    onClearSelection: () => void;
    onSetSelection: (setName: string) => void;
    onCardProductSearchChange: (term: string) => void;
    onFilterChange: (
    onTogglePreview: () => void;
TYPES/INTERFACES:
  interface UnifiedCollectionItem {
  interface AuctionItemSelectionSectionProps {
REACT COMPONENTS:
  const AuctionItemSelectionSection: React.FC<
USED HOOKS:
  useCallback
  useMemo
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/sections/CardInformationDisplaySection.tsx ---
IMPORTS:
  import React from 'react';
  import { FieldErrors, UseFormRegister, UseFormWatch } from 'react-hook-form';
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface CardInformationDisplaySectionProps {
REACT COMPONENTS:
  const CardInformationDisplaySection: React.FC<
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/sections/HierarchicalCardSearch.tsx ---
IMPORTS:
  import React from 'react';
  import {
  import { useHierarchicalSearch } from '../../../hooks/useHierarchicalSearch';
  import { PokemonSearch } from '../../atoms/design-system/PokemonSearch';
FUNCTIONS/METHODS:
  export const CARD_SEARCH_CONFIG: HierarchicalSearchConfig = {
  export const PRODUCT_SEARCH_CONFIG: HierarchicalSearchConfig = {
TYPES/INTERFACES:
  interface HierarchicalSearchField {
  interface HierarchicalSearchConfig {
  interface UnifiedHierarchicalSearchProps {
  interface HierarchicalCardSearchProps {
REACT COMPONENTS:
  const UnifiedHierarchicalSearch: React.FC<UnifiedHierarchicalSearchProps> = ({
  const HierarchicalCardSearch: React.FC<HierarchicalCardSearchProps> = (
USED HOOKS:
  useExternalSearch
  useHierarchicalSearch
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/sections/GradingPricingSection.tsx ---
IMPORTS:
  import { UseFormRegister, FieldErrors } from 'react-hook-form';
  import {
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
  import { PokemonSelect } from '../../atoms/design-system/PokemonSelect';
  import { PriceHistoryDisplay } from '../../../../components/PriceHistoryDisplay';
  import ValidationField from '../fields/ValidationField';
FUNCTIONS/METHODS:
                  validate: (value) => {
TYPES/INTERFACES:
  interface GradingPricingSectionProps {
REACT COMPONENTS:
  const GradingPricingSection: React.FC<GradingPricingSectionProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/sections/SaleDetailsSection.tsx ---
IMPORTS:
  import React from 'react';
  import { UseFormRegister, UseFormWatch, FieldErrors } from 'react-hook-form';
  import { Banknote } from 'lucide-react';
  import { PokemonSelect } from '../../atoms/design-system/PokemonSelect';
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
  import ValidationField from '../fields/ValidationField';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface SaleDetailsSectionProps {
REACT COMPONENTS:
  const SaleDetailsSection: React.FC<SaleDetailsSectionProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/wrappers/FormSubmissionWrapper.tsx ---
IMPORTS:
  import { useCallback } from 'react';
FUNCTIONS/METHODS:
    setSubmitting: (isSubmitting: boolean) => void;
    onSuccess: () => void;
      uploadImages: () => Promise<string[]>;
    prepareSubmissionData: (params: {
    submitToApi: (
    handleSubmission: (
    withSubmissionHandling: (
      operation: () => Promise<any>,
  export const useFormSubmission = <TFormData = any, TSubmissionData = any>(
  export const FormSubmissionPatterns = {
    combineImages: (existingImages: string[], newImages: string[]): string[] => {
    transformPriceHistory: (
    createSelectionRequiredError: (
    validateObjectId: (id: string, entityName: string = 'item'): void => {
TYPES/INTERFACES:
  interface FormSubmissionConfig<TFormData = any, TSubmissionData = any> {
  interface FormSubmissionHookReturn<TFormData = any> {
REACT COMPONENTS:
USED HOOKS:
  useBaseForm
  useCallback
  useFormSubmission
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/containers/CardFormContainer.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
  import {
  import FormHeader from '../../molecules/common/FormHeader';
  import FormActionButtons from '../../molecules/common/FormActionButtons';
  import HierarchicalCardSearch from '../sections/HierarchicalCardSearch';
  import CardInformationDisplaySection from '../sections/CardInformationDisplaySection';
  import GradingPricingSection from '../sections/GradingPricingSection';
  import ImageUploadSection from '../sections/ImageUploadSection';
  import SaleDetailsSection from '../sections/SaleDetailsSection';
FUNCTIONS/METHODS:
    handleSubmit: (
      onValid: (data: any) => void | Promise<void>
    onSubmit: (data: any) => Promise<void>;
    onCancel: () => void;
    onSelectionChange: (selectedData: any) => void;
TYPES/INTERFACES:
  interface CardFormContainerProps {
REACT COMPONENTS:
  const CardFormContainer: React.FC<CardFormContainerProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/forms/containers/AuctionFormContainer.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
  import {
  import { PokemonSelect } from '../../atoms/design-system/PokemonSelect';
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
  import FormActionButtons from '../../molecules/common/FormActionButtons';
FUNCTIONS/METHODS:
    handleSubmit: (
      onValid: (data: any) => void | Promise<void>
    onSubmit: (data: any) => Promise<void>;
    onCancel: () => void;
TYPES/INTERFACES:
  interface AuctionFormContainerProps {
REACT COMPONENTS:
  const AuctionFormContainer: React.FC<AuctionFormContainerProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/ImageSlideshow.tsx ---
IMPORTS:
  import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';
  import useEmblaCarousel from 'embla-carousel-react';
  import Autoplay from 'embla-carousel-autoplay';
  import { ChevronLeft, ChevronRight, Package } from 'lucide-react';
  import { getElementTheme, ThemeColor } from '../../../../theme/formThemes';
FUNCTIONS/METHODS:
  const getImageUrl = (imageUrl: string): string => {
  const getThumbnailUrl = (imageUrl: string): string => {
  export const ImageSlideshow: React.FC<ImageSlideshowProps> = memo(
TYPES/INTERFACES:
  interface ImageSlideshowProps {
REACT COMPONENTS:
USED HOOKS:
  useCallback
  useDown
  useEffect
  useEmblaCarousel
  useEvent
  useMemo
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/PaginationControls.tsx ---
IMPORTS:
  import React from 'react';
  import { ChevronLeft, ChevronRight } from 'lucide-react';
FUNCTIONS/METHODS:
    onPageChange: (page: number) => void;
TYPES/INTERFACES:
  interface PaginationData {
  interface PaginationControlsProps {
REACT COMPONENTS:
  const PaginationControls: React.FC<PaginationControlsProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/LoadingSpinner.tsx ---
IMPORTS:
  import React from 'react';
  import { useVisualTheme } from '../../../contexts/theme';
  import { getElementTheme, ThemeColor } from '../../../../theme/formThemes';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface LoadingSpinnerProps {
REACT COMPONENTS:
  const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
USED HOOKS:
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/UnifiedHeader.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
  import { PokemonButton } from '../design-system/PokemonButton';
FUNCTIONS/METHODS:
    onClick: () => void;
        effects: (
        effects: (
        effects: (
TYPES/INTERFACES:
  export type HeaderVariant =
  export type HeaderSize = 'sm' | 'md' | 'lg' | 'xl';
  export interface HeaderStat {
  export interface HeaderAction {
  export interface UnifiedHeaderProps {
REACT COMPONENTS:
  const UnifiedHeader: React.FC<UnifiedHeaderProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/SalesDateRangeFilter.tsx ---
IMPORTS:
  import React from 'react';
  import { Calendar, X } from 'lucide-react';
  import { DateRangeState } from './DateRangeFilter';
FUNCTIONS/METHODS:
    setDateRange: (range: { startDate?: string; endDate?: string }) => void;
TYPES/INTERFACES:
  interface SalesDateRangeFilterProps {
REACT COMPONENTS:
  const SalesDateRangeFilter: React.FC<SalesDateRangeFilterProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/UnifiedGradeDisplay.tsx ---
IMPORTS:
  import React from 'react';
  import { IGrades } from '../../domain/models/card';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type GradeDisplayMode =
  export type GradeDisplayTheme =
  export interface UnifiedGradeDisplayProps {
REACT COMPONENTS:
  const UnifiedGradeDisplay: React.FC<UnifiedGradeDisplayProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/EmptyState.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
  import { PokemonButton } from '../design-system/PokemonButton';
FUNCTIONS/METHODS:
      onClick: () => void;
TYPES/INTERFACES:
  interface EmptyStateProps {
REACT COMPONENTS:
  const EmptyState: React.FC<EmptyStateProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/ActivityListItem.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
  import { PokemonCard, PokemonBadge } from '../../atoms/design-system';
  import {
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface ActivityMetadata {
  interface ActivityItemData {
  interface ColorClasses {
  interface ActivityListItemProps {
REACT COMPONENTS:
  const ActivityListItem: React.FC<ActivityListItemProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/ImageProductView.tsx ---
IMPORTS:
  import React, { memo, useCallback, useState } from 'react';
  import {
  import { ImageSlideshow } from './ImageSlideshow';
  import { getElementTheme, ThemeColor } from '../../../../theme/formThemes';
FUNCTIONS/METHODS:
  export const ImageProductView = memo(ImageProductViewComponent, arePropsEqual);
TYPES/INTERFACES:
  export interface ImageProductViewProps {
REACT COMPONENTS:
  const ImageProductViewComponent: React.FC<ImageProductViewProps> = ({
USED HOOKS:
  useCallback
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/SectionContainer.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
FUNCTIONS/METHODS:
    onClick: () => void;
        effects: (
        effects: (
TYPES/INTERFACES:
  export type CardVariant =
  export type CardSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  export interface CardBadge {
  export interface CardAction {
  export interface SectionContainerProps {
REACT COMPONENTS:
  const SectionContainer: React.FC<SectionContainerProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/index.ts ---
IMPORTS:
  export { default as UnifiedHeader } from './UnifiedHeader';
  export type { HeaderVariant, HeaderStat, HeaderAction } from './UnifiedHeader';
  export { default as SectionContainer } from './SectionContainer';
  export { default as UnifiedGradeDisplay } from './UnifiedGradeDisplay';
  export { default as GlassmorphismHeader } from './GlassmorphismHeader';
  export { default as FormHeader } from './FormHeader';
  export { default as EmptyState } from './EmptyState';
  export { default as FormActionButtons } from './FormActionButtons';
  export { Glow, Shimmer } from './FormElements';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type { HeaderVariant, HeaderStat, HeaderAction } from './UnifiedHeader';
  export type {
  export type {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/ImageAnalysisIndicator.tsx ---
IMPORTS:
  import React from 'react';
  import { Loader2 } from 'lucide-react';
FUNCTIONS/METHODS:
  export const ImageAnalysisIndicator: React.FC<ImageAnalysisIndicatorProps> = ({
TYPES/INTERFACES:
  interface ImageAnalysisIndicatorProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/OptimizedImageView.tsx ---
IMPORTS:
  import React, { memo, useEffect, useRef, useState } from 'react';
  import { Package } from 'lucide-react';
  import { getElementTheme, ThemeColor } from '../../theme/formThemes';
FUNCTIONS/METHODS:
  export const OptimizedImageView = memo(
TYPES/INTERFACES:
  interface OptimizedImageViewProps {
REACT COMPONENTS:
  const OptimizedImageViewComponent: React.FC<OptimizedImageViewProps> = ({
USED HOOKS:
  useEffect
  useRef
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/ActivityStatCard.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
  import { PokemonCard } from '../../atoms/design-system';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface ActivityStatCardProps {
REACT COMPONENTS:
  const ActivityStatCard: React.FC<ActivityStatCardProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/DateRangeFilter.tsx ---
IMPORTS:
  import React, { useState } from 'react';
  import { Calendar, Filter, X } from 'lucide-react';
  import Button from './Button';
  import {
FUNCTIONS/METHODS:
    onChange: (dateRange: DateRangeState) => void;
TYPES/INTERFACES:
  export interface DateRangeState {
  interface DateRangeFilterProps {
REACT COMPONENTS:
  const DateRangeFilter: React.FC<DateRangeFilterProps> = ({
USED HOOKS:
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/ActivityFilterHub.tsx ---
IMPORTS:
  import React from 'react';
  import { Search, Calendar, LucideIcon } from 'lucide-react';
  import {
FUNCTIONS/METHODS:
    setSearchInput: (value: string) => void;
    handleSearch: (e: React.FormEvent) => void;
    clearSearch: () => void;
    handleFilterChange: (filterValue: string) => void;
    handleDateRangeChange: (range: string) => void;
TYPES/INTERFACES:
  interface FilterOption {
  interface DateRangeOption {
  interface ActivityFilters {
  interface ActivityFilterHubProps {
REACT COMPONENTS:
  const ActivityFilterHub: React.FC<ActivityFilterHubProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/SalesStatCard.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface SalesStatCardProps {
REACT COMPONENTS:
  const SalesStatCard: React.FC<SalesStatCardProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/CategorySalesCard.tsx ---
IMPORTS:
  import React from 'react';
  import { displayPrice } from '../../../utils/helpers/formatting';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface CategoryConfig {
  interface CategorySalesCardProps {
REACT COMPONENTS:
  const CategorySalesCard: React.FC<CategorySalesCardProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/GlassmorphismHeader.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface GlassmorphismHeaderProps {
REACT COMPONENTS:
  const GlassmorphismHeader: React.FC<GlassmorphismHeaderProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/ProductCard.tsx ---
IMPORTS:
  import React from 'react';
  import { ExternalLink } from 'lucide-react';
  import { IProduct } from '../../../domain/models/product';
FUNCTIONS/METHODS:
    convertToDKK: (eurPrice: number) => number;
TYPES/INTERFACES:
  interface ProductCardProps {
REACT COMPONENTS:
  const ProductCard: React.FC<ProductCardProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/RecentSaleListItem.tsx ---
IMPORTS:
  import React from 'react';
  import { displayPrice } from '../../../utils/helpers/formatting';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface SaleItem {
  interface RecentSaleListItemProps {
REACT COMPONENTS:
  const RecentSaleListItem: React.FC<RecentSaleListItemProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/FormActionButtons.tsx ---
IMPORTS:
  import React from 'react';
  import { PokemonButton } from '../../atoms/design-system/PokemonButton';
  import { buildThemeClasses, ThemeColor } from '../../../../theme/formThemes';
FUNCTIONS/METHODS:
    onCancel: () => void;
TYPES/INTERFACES:
  interface FormActionButtonsProps {
REACT COMPONENTS:
  const FormActionButtons: React.FC<FormActionButtonsProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/FormHeader.tsx ---
IMPORTS:
  import React from 'react';
  import { LucideIcon } from 'lucide-react';
  import { ThemeColor } from '../../theme/formThemes';
  import GlassmorphismHeader from './GlassmorphismHeader';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  interface FormHeaderProps {
REACT COMPONENTS:
  const FormHeader: React.FC<FormHeaderProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/LoadingStates.tsx ---
IMPORTS:
  import React from 'react';
  import LoadingSpinner from './LoadingSpinner';
  import { ThemeColor } from '../../theme/formThemes';
FUNCTIONS/METHODS:
  export const ButtonLoading: React.FC<BaseLoadingProps & { text?: string }> = ({
  export const PageLoading: React.FC<BaseLoadingProps & { text?: string }> = ({
  export const ContentLoading: React.FC<BaseLoadingProps & { text?: string }> = ({
  export const InlineLoading: React.FC<BaseLoadingProps & { text?: string }> = ({
  export const ModalLoading: React.FC<BaseLoadingProps & { text?: string }> = ({
  export const CardLoading: React.FC<BaseLoadingProps & { text?: string }> = ({
TYPES/INTERFACES:
  interface BaseLoadingProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/ProductSearchFilters.tsx ---
IMPORTS:
  import React from 'react';
  import { Search, Filter, Package } from 'lucide-react';
  import { ProductCategory } from '../../../domain/models/product';
  import { ISetProduct } from '../../../domain/models/setProduct';
FUNCTIONS/METHODS:
    setSearchTerm: (term: string) => void;
    setCategoryFilter: (category: string) => void;
    setSetProductFilter: (setProduct: ISetProduct | null) => void;
    setSetNameFilter: (setName: string) => void;
    setAvailableOnly: (available: boolean) => void;
    handleSearch: () => void;
    handleClearFilters: () => void;
    handleKeyPress: (event: React.KeyboardEvent) => void;
TYPES/INTERFACES:
  interface ProductSearchFiltersProps {
REACT COMPONENTS:
  const ProductSearchFilters: React.FC<ProductSearchFiltersProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/FormElements/Glow.tsx ---
IMPORTS:
  import React from 'react';
  import { useCentralizedTheme } from '../../../../utils/ui/themeConfig';
FUNCTIONS/METHODS:
  export const Glow: React.FC<GlowProps> = ({
TYPES/INTERFACES:
  interface GlowProps {
REACT COMPONENTS:
USED HOOKS:
  useCentralizedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/FormElements/Shimmer.tsx ---
IMPORTS:
  import React from 'react';
  import { useCentralizedTheme } from '../../../../utils/ui/themeConfig';
FUNCTIONS/METHODS:
  export const Shimmer: React.FC<ShimmerProps> = ({ className = '' }) => {
TYPES/INTERFACES:
  interface ShimmerProps {
REACT COMPONENTS:
  export const Shimmer: React.FC<ShimmerProps> = ({ className = '' }) => {
USED HOOKS:
  useCentralizedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/FormElements/index.ts ---
IMPORTS:
  export { default as FormWrapper } from './FormWrapper';
  export { default as Label } from './Label';
  export { default as ErrorMessage } from './ErrorMessage';
  export { default as HelperText } from './HelperText';
  export { default as Shimmer } from './Shimmer';
  export { default as Glow } from './Glow';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/FormElements/HelperText.tsx ---
IMPORTS:
  import React from 'react';
  import { useCentralizedTheme } from '../../../../utils/ui/themeConfig';
FUNCTIONS/METHODS:
  export const HelperText: React.FC<HelperTextProps> = ({
TYPES/INTERFACES:
  interface HelperTextProps {
REACT COMPONENTS:
USED HOOKS:
  useCentralizedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/FormElements/ErrorMessage.tsx ---
IMPORTS:
  import React from 'react';
  import { useCentralizedTheme } from '../../../../utils/ui/themeConfig';
FUNCTIONS/METHODS:
  export const ErrorMessage: React.FC<ErrorMessageProps> = ({
TYPES/INTERFACES:
  interface ErrorMessageProps {
REACT COMPONENTS:
USED HOOKS:
  useCentralizedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/FormElements/FormWrapper.tsx ---
IMPORTS:
  import React, { ReactNode } from 'react';
  import { useCentralizedTheme } from '../../../../utils/ui/themeConfig';
FUNCTIONS/METHODS:
  export const FormWrapper: React.FC<FormWrapperProps> = ({
TYPES/INTERFACES:
  interface FormWrapperProps {
REACT COMPONENTS:
USED HOOKS:
  useCentralizedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/FormElements/UnifiedFormElement.tsx ---
IMPORTS:
  import React from 'react';
  import { useUnifiedTheme } from '../../../contexts/theme/UnifiedThemeProvider';
FUNCTIONS/METHODS:
  export const UnifiedFormElement: React.FC<UnifiedFormElementProps> = ({
  export const ErrorMessage: React.FC<{
  export const HelperText: React.FC<{
  export const Label: React.FC<{
  export const Glow: React.FC<{
  export const Shimmer: React.FC<{
  export const CompoundFormElement: React.FC<CompoundFormElementProps> = ({
TYPES/INTERFACES:
  interface UnifiedFormElementProps {
  interface CompoundFormElementProps {
REACT COMPONENTS:
USED HOOKS:
  useUnifiedTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/molecules/common/FormElements/Label.tsx ---
IMPORTS:
  import React from 'react';
FUNCTIONS/METHODS:
  export const Label: React.FC<LabelProps> = ({
TYPES/INTERFACES:
  interface LabelProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/layout/layouts/MainLayout.tsx ---
IMPORTS:
  import React from 'react';
  import {
FUNCTIONS/METHODS:
  const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
TYPES/INTERFACES:
  interface MainLayoutProps {
  interface NavigationItem {
  interface DropdownItem {
REACT COMPONENTS:
  const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
USED HOOKS:
  useEffect
  useEvent
  useState
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/layout/layouts/PageLayout.tsx ---
IMPORTS:
  import React from 'react';
  import LoadingSpinner from '../../molecules/common/LoadingSpinner';
  import GlassmorphismHeader from '../../molecules/common/GlassmorphismHeader';
FUNCTIONS/METHODS:
  export const PageLayout: React.FC<PageLayoutProps> = ({
TYPES/INTERFACES:
  export interface PageLayoutProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/PokemonIcon.tsx ---
IMPORTS:
  import React from 'react';
  import { cn } from '../../../utils/common';
FUNCTIONS/METHODS:
  export const PokemonIcon: React.FC<PokemonIconProps> = ({
TYPES/INTERFACES:
  export interface PokemonIconProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/PokemonInput.tsx ---
IMPORTS:
  import React, { forwardRef } from 'react';
  import { cn } from '../../../utils/helpers/common';
  import { Loader2 } from 'lucide-react';
  import {
  import { inputClasses } from '../../../utils/ui/classNameUtils';
  import { FormWrapper } from '../../molecules/common/FormElements/FormWrapper';
  import { Label } from '../../molecules/common/FormElements/Label';
  import { HelperText } from '../../molecules/common/FormElements/HelperText';
  import type {
FUNCTIONS/METHODS:
  export const PokemonInput = forwardRef<HTMLInputElement, PokemonInputProps>(
TYPES/INTERFACES:
  export interface PokemonInputProps
REACT COMPONENTS:
USED HOOKS:
  useAnimationTheme
  useLayoutTheme
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/PokemonBadge.tsx ---
IMPORTS:
  import React from 'react';
  import { cn } from '../../../utils/helpers/common';
FUNCTIONS/METHODS:
  export const PokemonBadge: React.FC<PokemonBadgeProps> = ({
  export const COSMIC_TIMER_CONFIG = {
TYPES/INTERFACES:
  export interface PokemonBadgeProps {
REACT COMPONENTS:
  const TimerIcon: React.FC<{ className?: string }> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/index.ts ---
IMPORTS:
  export { PokemonCard } from './PokemonCard';
  export type { PokemonCardProps } from './PokemonCard';
  export { PokemonButton } from './PokemonButton';
  export type { PokemonButtonProps } from './PokemonButton';
  export { PokemonInput } from './PokemonInput';
  export type { PokemonInputProps } from './PokemonInput';
  export { PokemonSelect } from './PokemonSelect';
  export type { PokemonSelectProps, SelectOption } from './PokemonSelect';
  export { PokemonModal, PokemonConfirmModal } from './PokemonModal';
  export { PokemonBadge } from './PokemonBadge';
  export type { PokemonBadgeProps } from './PokemonBadge';
  export { PokemonPageContainer } from './PokemonPageContainer';
  export type { PokemonPageContainerProps } from './PokemonPageContainer';
  export { PokemonForm } from './PokemonForm';
  export type { PokemonFormProps, PokemonFormField, PokemonFormSection } from './PokemonForm';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export type { PokemonCardProps } from './PokemonCard';
  export type { PokemonButtonProps } from './PokemonButton';
  export type { PokemonInputProps } from './PokemonInput';
  export type { PokemonSelectProps, SelectOption } from './PokemonSelect';
  export type {
  export type { PokemonBadgeProps } from './PokemonBadge';
  export type { PokemonPageContainerProps } from './PokemonPageContainer';
  export type { PokemonFormProps, PokemonFormField, PokemonFormSection } from './PokemonForm';
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/PokemonSearch.tsx ---
IMPORTS:
  import React, {
  import { Search, Loader2, LucideIcon } from 'lucide-react';
  import {
  import { SearchResult, useSearch } from '../../../hooks/useSearch';
  import {
  import {
  import { getElementTheme, ThemeColor } from '../../../../theme/formThemes';
  import { cn } from '../../../utils/helpers/unifiedUtilities';
FUNCTIONS/METHODS:
    onSelect: (result: SearchResult) => void;
      onSelect: (result: SearchResult) => void;
  const SearchFallback = () => (
  export const PokemonSearch: React.FC<PokemonSearchProps> = ({
TYPES/INTERFACES:
  interface SearchSuggestion {
  export interface PokemonSearchProps {
REACT COMPONENTS:
USED HOOKS:
  useAnimationTheme
  useCallback
  useEffect
  useExternalSearch
  useLayoutTheme
  useMemo
  useOptimizedSearch
  useRef
  useSearch
  useSearchResultSelector
  useState
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/PokemonPageContainer.tsx ---
IMPORTS:
  import React from 'react';
  import { cn } from '../../../utils/helpers/common';
FUNCTIONS/METHODS:
  export const PokemonPageContainer: React.FC<PokemonPageContainerProps> = ({
TYPES/INTERFACES:
  export interface PokemonPageContainerProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/PokemonCard.tsx ---
IMPORTS:
  import React from 'react';
  import { cn } from '../../../utils/helpers/common';
FUNCTIONS/METHODS:
  export const PokemonCard: React.FC<PokemonCardProps> = ({
TYPES/INTERFACES:
  export interface PokemonCardProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/PokemonForm.tsx ---
IMPORTS:
  import React, { forwardRef, useEffect } from 'react';
  import { cn } from '../../../utils/helpers/common';
  import {
  import { PokemonButton } from './PokemonButton';
  import { PokemonInput } from './PokemonInput';
  import { FormWrapper } from '../common/FormWrapper';
  import { Label } from '../../molecules/common/FormElements/Label';
  import { ErrorMessage } from '../../molecules/common/FormElements/ErrorMessage';
  import { HelperText } from '../../molecules/common/FormElements/HelperText';
  import LoadingSpinner from '../../molecules/common/LoadingSpinner';
  import { useVisualTheme } from '../../../hooks/theme/useVisualTheme';
  import { useLayoutTheme } from '../../../hooks/theme/useLayoutTheme';
  import { useAnimationTheme } from '../../../hooks/theme/useAnimationTheme';
  import type {
FUNCTIONS/METHODS:
    onSubmit: (data: T) => void | Promise<void>;
  export const PokemonForm = forwardRef<HTMLFormElement, PokemonFormProps>(
  export const PokemonCardForm = (props: Omit<PokemonFormProps, 'formType'>) => (
  export const PokemonProductForm = (
  export const PokemonAuctionForm = (
  export const PokemonSaleForm = (props: Omit<PokemonFormProps, 'formType'>) => (
  export const PokemonSearchForm = (
  export const PokemonFilterForm = (
TYPES/INTERFACES:
  export interface PokemonFormField {
  export interface PokemonFormSection {
  export interface PokemonFormProps<T extends FieldValues = FieldValues> {
REACT COMPONENTS:
  export const PokemonCardForm = (props: Omit<PokemonFormProps, 'formType'>) => (
  export const PokemonSaleForm = (props: Omit<PokemonFormProps, 'formType'>) => (
USED HOOKS:
  useAnimationTheme
  useEffect
  useForm
  useLayoutTheme
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/PokemonButton.tsx ---
IMPORTS:
  import React, { ButtonHTMLAttributes, forwardRef } from 'react';
  import { Glow, Shimmer } from '../../molecules/common/FormElements';
  import { StandardButtonProps } from '../../types/themeTypes';
  import {
  import { generateThemeClasses } from '../../../utils/ui/themeUtils';
  import { focusRing } from '../../../utils/ui/classNameUtils';
  import {
FUNCTIONS/METHODS:
  export const PokemonButton = forwardRef<HTMLButtonElement, PokemonButtonProps>(
TYPES/INTERFACES:
  export interface PokemonButtonProps
REACT COMPONENTS:
USED HOOKS:
  useAnimationTheme
  useEvent
  useLayoutTheme
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/PokemonSelect.tsx ---
IMPORTS:
  import React, { forwardRef } from 'react';
  import { ChevronDown, X } from 'lucide-react';
  import { cn } from '../../../utils/helpers/common';
FUNCTIONS/METHODS:
  export const PokemonSelect = forwardRef<HTMLSelectElement, PokemonSelectProps>(
TYPES/INTERFACES:
  export interface SelectOption {
  export interface PokemonSelectProps
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./shared/components/atoms/design-system/PokemonModal.tsx ---
IMPORTS:
  import React, { useEffect, forwardRef } from 'react';
  import { X, Check, AlertTriangle, Info } from 'lucide-react';
  import { StandardModalProps, ComponentSize } from '../../types/themeTypes';
  import {
  import { cardClasses } from '../../../utils/ui/classNameUtils';
  import {
  import { PokemonButton } from './PokemonButton';
FUNCTIONS/METHODS:
    onClose: () => void;
  export const PokemonModal = forwardRef<HTMLDivElement, PokemonModalProps>(
  export const PokemonConfirmModal: React.FC<
  export const PokemonItemSelectorModal = <T extends any>({
    onItemSelect: (item: T) => void;
TYPES/INTERFACES:
  export interface PokemonModalProps extends Omit<StandardModalProps, 'size'> {
REACT COMPONENTS:
USED HOOKS:
  useAnimationTheme
  useEffect
  useLayoutTheme
  useVisualTheme
API CALLS/ENDPOINTS:

--- FILE: ./app/config/cacheConfig.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const CACHE_TTL = {
  export const CACHE_PRESETS = {
  export const getCacheTTL = (dataType: keyof typeof CACHE_TTL): number => {
  export const getCachePreset = (preset: keyof typeof CACHE_PRESETS): number => {
  export const API_CACHE_CONFIG = {
  export const getApiCacheTTL = (
  export const HIERARCHICAL_CACHE_STRATEGIES = {
  export const CACHE_INVALIDATION = {
  export const CACHE_CLEANUP = {
  export const DEV_CACHE_TTL = {
  export const getEnvironmentCacheTTL = (
  export const getHierarchicalCacheTTL = (
  export const getCacheInvalidationPattern = (
  export const shouldUseHierarchicalCache = (operation: string): boolean => {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./app/lib/queryClient.ts ---
IMPORTS:
  import { QueryClient, QueryCache, MutationCache } from '@tanstack/react-query';
  import { log } from '../../shared/utils/performance/logger';
FUNCTIONS/METHODS:
  export const CACHE_TIMES = {
    onError: (error, query) => {
    onSuccess: (data, query) => {
    onError: (error, variables, context, mutation) => {
    onSuccess: (data, variables, context, mutation) => {
  export const queryClient = new QueryClient({
        retry: (failureCount, error: any) => {
        retryDelay: (attemptIndex) => {
        refetchOnWindowFocus: (query) => {
        refetchOnReconnect: (query) => {
  export const queryKeys = {
    psaCards: (filters?: any) =>
    rawCards: (filters?: any) =>
    sealedProducts: (filters?: any) =>
    soldItems: (filters?: any) =>
    collectionStats: () => [...queryKeys.collection, 'stats'] as const,
    collectionValue: () => [...queryKeys.collection, 'value'] as const,
    collectionItem: (type: string, id: string) =>
    itemHistory: (type: string, id: string) =>
    itemImages: (type: string, id: string) => ['item-images', type, id] as const,
    cardsReference: (params?: any) =>
    setsReference: (params?: any) =>
    productsReference: (params?: any) =>
    gradesReference: () => [...queryKeys.reference, 'grades'] as const,
    conditionsReference: () => [...queryKeys.reference, 'conditions'] as const,
    searchCards: (query: string, filters?: any) =>
    searchSets: (query: string, filters?: any) =>
    searchProducts: (query: string, filters?: any) =>
    searchHistory: () => [...queryKeys.search, 'history'] as const,
    searchSuggestions: (type: string, query: string) =>
    salesAnalytics: (dateRange?: any) =>
    valueAnalytics: (dateRange?: any) =>
    gradeDistribution: () =>
    setDistribution: () => [...queryKeys.analytics, 'set-distribution'] as const,
    profitAnalytics: (dateRange?: any) =>
    activityFeed: (filters?: any) =>
    recentActivity: () => [...queryKeys.activity, 'recent'] as const,
    auditLog: (filters?: any) =>
    auctionsList: (filters?: any) =>
    auctionDetail: (id: string) => [...queryKeys.auctions, 'detail', id] as const,
    auctionItems: (id: string) => [...queryKeys.auctions, 'items', id] as const,
    auctionStats: () => [...queryKeys.auctions, 'stats'] as const,
    dbaSelections: (params?: any) =>
    dbaSelectionStats: () => [...queryKeys.dbaSelection, 'stats'] as const,
    dbaExport: (params?: any) =>
    userPreferences: () => [...queryKeys.user, 'preferences'] as const,
    userSettings: () => [...queryKeys.user, 'settings'] as const,
    userSession: () => [...queryKeys.user, 'session'] as const,
    systemStatus: () => [...queryKeys.system, 'status'] as const,
    appConfig: () => [...queryKeys.system, 'config'] as const,
    cacheStats: () => [...queryKeys.system, 'cache-stats'] as const,
  export const cacheInvalidation = {
    onAddItem: (itemType: string) => {
    onUpdateItem: (itemType: string, itemId: string) => {
    onDeleteItem: (itemType: string, itemId: string) => {
    onSaleItem: (itemType: string, itemId: string) => {
    onCreateAuction: () => {
    onUpdateAuction: (auctionId: string) => {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./app/App.tsx ---
IMPORTS:
  import { lazy, Suspense, useEffect, useState, useTransition } from 'react';
  import { QueryClientProvider } from '@tanstack/react-query';
  import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
  import { log } from '../shared/utils/performance/logger';
  import { Toaster } from 'react-hot-toast';
  import LoadingSpinner from '../shared/components/molecules/common/LoadingSpinner';
  import { queryClient } from './lib/queryClient';
  import { UnifiedThemeProvider as ThemeProvider } from '../shared/contexts/theme/UnifiedThemeProvider';
  import MainLayout from '../shared/components/layout/layouts/MainLayout';
FUNCTIONS/METHODS:
  const Dashboard = lazy(() => import('../features/dashboard/pages/Dashboard'));
  function App() {
TYPES/INTERFACES:
REACT COMPONENTS:
USED HOOKS:
  useEffect
  useState
  useTransition
API CALLS/ENDPOINTS:

--- FILE: ./app/main.tsx ---
IMPORTS:
  import React from 'react';
  import ReactDOM from 'react-dom/client';
  import { ThemeProvider } from 'next-themes';
  import App from './App.tsx';
  import '../index.css';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./types/collection/CollectionTypes.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export function isPsaGradedCard(item: CollectionItem): item is PsaGradedCard {
  export function isRawCard(item: CollectionItem): item is RawCard {
  export function isSealedProduct(item: CollectionItem): item is SealedProduct {
  export function isCard(item: CollectionItem): item is PsaGradedCard | RawCard {
  export function isSoldItem(
TYPES/INTERFACES:
  interface BaseCollectionItem {
  export interface SaleDetails {
  export interface PsaGradedCard extends BaseCollectionItem {
  export interface RawCard extends BaseCollectionItem {
  export interface SealedProduct extends BaseCollectionItem {
  export type CollectionItem = PsaGradedCard | RawCard | SealedProduct;
  export interface CardReference {
  export interface SetReference {
  export interface ProductReference {
  export type ItemType = CollectionItem['itemType'];
  export type ItemByType<T extends ItemType> = Extract<
  export type SoldCollectionItem = CollectionItem & {
  export type ActiveCollectionItem = CollectionItem & {
  export interface CollectionStatistics {
  export interface CollectionFilters {
  export interface CollectionSortOptions {
  export interface PsaCardFormData {
  export interface RawCardFormData {
  export interface SealedProductFormData {
  export type CollectionItemFormData =
  export interface AuctionItem {
  export interface Auction {
  export type {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./types/api/ApiResponse.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export function isSuccessResponse<T>(
  export function isErrorResponse(
  export function isPaginatedResponse<T>(
  export function isCollectionResponse<T>(
  export function transformApiResponse<T>(
  export function createErrorResponse(
TYPES/INTERFACES:
  export interface BaseApiResponse {
  export interface ApiSuccessResponse<T = any> extends BaseApiResponse {
  export interface ApiErrorResponse extends BaseApiResponse {
  export type ApiResponse<T = any> = ApiSuccessResponse<T> | ApiErrorResponse;
  export interface PaginatedResponse<T> extends BaseApiResponse {
  export interface CollectionResponse<T> extends BaseApiResponse {
  export interface ResourceResponse<T> extends BaseApiResponse {
  export interface ResponseMetadata {
  export interface FileUploadResponse extends BaseApiResponse {
  export interface BulkOperationResponse<T = any> extends BaseApiResponse {
  export interface HealthCheckResponse extends BaseApiResponse {
  export interface ActivityResponse {
  export interface ActivityListResponse
  export interface CardResponse {
  export interface CardListResponse extends CollectionResponse<CardResponse> {}
  export interface SetResponse {
  export interface SetListResponse extends CollectionResponse<SetResponse> {}
  export interface AuctionResponse {
  export interface AuctionListResponse
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./types/form/FormTypes.ts ---
IMPORTS:
  import {
FUNCTIONS/METHODS:
  export function isFormFieldValue(value: unknown): value is FormFieldValue {
  export function isFormDataRecord(value: unknown): value is FormDataRecord {
  export function isCardFormData(data: FormDataRecord): data is CardFormData {
  export function isProductFormData(
  export function isAuctionFormData(
TYPES/INTERFACES:
  export type FormFieldValue =
  export interface FormDataRecord {
  export interface TypeSafeFormHandlers<
  export type SelectionChangeHandler<T = unknown> = (selectedData: T) => void;
  export type FormSubmissionHandler<T extends FormDataRecord = FormDataRecord> = (
  export type FormValidationHandler<T extends FormDataRecord = FormDataRecord> = (
  export interface CardFormData extends FormDataRecord {
  export interface ProductFormData extends FormDataRecord {
  export interface AuctionFormData extends FormDataRecord {
  export interface AuctionItemFormData extends FormDataRecord {
  export interface SaleDetailsFormData extends FormDataRecord {
  export interface SearchFormData extends FormDataRecord {
  export interface FilterFormData extends FormDataRecord {
  export type FormFieldKeys<T extends FormDataRecord> = keyof T;
  export type FormFieldType<T extends FormDataRecord, K extends keyof T> = T[K];
  export interface FormValidationResult {
  export interface FormSubmissionResult {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./components/debug/profilerUtils.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const updateMetricsStore = (store: Map<string, AggregatedMetrics>) => {
  export const updateRenderHistory = (history: ProfilerMetrics[]) => {
  export const updateWebVitals = (vitals: CoreWebVitals) => {
  export const getAggregatedMetrics = (): Map<string, AggregatedMetrics> => {
  export const getRenderHistory = (): ProfilerMetrics[] => {
  export const getWebVitals = (): CoreWebVitals => {
  export const clearMetrics = (): void => {
  const generateRecommendations = (metrics: AggregatedMetrics): string[] => {
  export const analyzeComponentPerformance = (componentId: string) => {
TYPES/INTERFACES:
  interface ProfilerMetrics {
  interface AggregatedMetrics {
  interface CoreWebVitals {
USED HOOKS:
API CALLS/ENDPOINTS:
    const metrics = metricsStore.get(componentId);

--- FILE: ./components/debug/PerformanceMonitor.tsx ---
IMPORTS:
  import React, { useEffect, useRef, useState } from 'react';
  import { Activity, Clock, Zap } from 'lucide-react';
FUNCTIONS/METHODS:
  export const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({
          memoryUsage: (performance as any).memory?.usedJSHeapSize || 0,
TYPES/INTERFACES:
  interface PerformanceMetrics {
  interface PerformanceMonitorProps {
REACT COMPONENTS:
USED HOOKS:
  useEffect
  useRef
  useState
API CALLS/ENDPOINTS:

--- FILE: ./components/debug/ReactProfiler.tsx ---
IMPORTS:
  import React, {
  import { Activity, AlertTriangle, BarChart3, Clock, Zap } from 'lucide-react';
  import {
FUNCTIONS/METHODS:
  export const ReactProfiler: React.FC<ReactProfilerProps> = ({
            renderCount: (existing?.renderCount || 0) + 1,
            totalBaseDuration: (existing?.totalBaseDuration || 0) + baseDuration,
TYPES/INTERFACES:
  interface ProfilerMetrics {
  interface AggregatedMetrics {
  interface CoreWebVitals {
  interface ReactProfilerProps {
REACT COMPONENTS:
USED HOOKS:
  useCallback
  useEffect
  useRef
  useState
API CALLS/ENDPOINTS:
          const existing = metricsStore.get(profileId);

--- FILE: ./components/modals/AddItemToAuctionModal.tsx ---
IMPORTS:
  import React, { useMemo } from 'react';
  import { Calendar, DollarSign, Star } from 'lucide-react';
  import {
  import { useCollectionOperations } from '../../shared/hooks/useCollectionOperations';
  import { IPsaGradedCard, IRawCard } from '../../domain/models/card';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
FUNCTIONS/METHODS:
    onClose: () => void;
    onAddItems: (
            setName: (card as any).setName,
            setName: (card as any).setName,
TYPES/INTERFACES:
  interface AddItemToAuctionModalProps {
  type CollectionItem = SelectableItem & {
REACT COMPONENTS:
  const AddItemToAuctionModal: React.FC<AddItemToAuctionModalProps> = ({
USED HOOKS:
  useCollectionOperations
  useMemo
API CALLS/ENDPOINTS:

--- FILE: ./components/modals/ItemSelectorModal.tsx ---
IMPORTS:
  import React, { useEffect, useMemo, useState } from 'react';
  import { Check, Package, Search } from 'lucide-react';
  import { PokemonModal } from '../../shared/components/atoms/design-system/PokemonModal';
  import { PokemonButton } from '../../shared/components/atoms/design-system/PokemonButton';
  import { PokemonInput } from '../../shared/components/atoms/design-system/PokemonInput';
  import { PokemonSelect } from '../../shared/components/atoms/design-system/PokemonSelect';
  import LoadingSpinner from '../../shared/components/molecules/common/LoadingSpinner';
FUNCTIONS/METHODS:
    onToggle: (itemId: string) => void;
    onClose: () => void;
    onSelectItems: (items: T[]) => Promise<void>;
  export function ItemSelectorModal<T extends SelectableItem>({
TYPES/INTERFACES:
  export interface SelectableItem {
  export interface FilterOption {
  export interface ItemRenderProps<T extends SelectableItem> {
  export interface ItemSelectorModalProps<T extends SelectableItem> {
REACT COMPONENTS:
  export function ItemSelectorModal<T extends SelectableItem>({
USED HOOKS:
  useEffect
  useMemo
  useState
API CALLS/ENDPOINTS:
        newSelected.delete(itemId);

--- FILE: ./components/PriceHistoryDisplay.tsx ---
IMPORTS:
  import React, { useState } from 'react';
  import {
  import { PokemonButton } from '../shared/components/atoms/design-system/PokemonButton';
  import { PokemonInput } from '../shared/components/atoms/design-system/PokemonInput';
  import { log } from '../shared/utils/performance/logger';
  import { showWarningToast } from '../shared/components/organisms/ui/toastNotifications';
FUNCTIONS/METHODS:
  export const PriceHistoryDisplay: React.FC<PriceHistoryDisplayProps> = ({
TYPES/INTERFACES:
  interface IPriceHistoryEntry {
  export interface PriceHistoryDisplayProps {
REACT COMPONENTS:
USED HOOKS:
  useState
API CALLS/ENDPOINTS:

--- FILE: ./components/lists/ItemOrderingSection.tsx ---
IMPORTS:
  import React, { memo, useCallback, useMemo, useState } from 'react';
  import {
  import { UnifiedCategoryList } from './UnifiedCategoryList';
  import {
FUNCTIONS/METHODS:
    onReorderItems: (newOrder: string[]) => void;
    onMoveItemUp: (itemId: string) => void;
    onMoveItemDown: (itemId: string) => void;
    onAutoSortByPrice: (ascending?: boolean) => void;
    onSortCategoryByPrice: (category: ItemCategory, ascending?: boolean) => void;
    onResetOrder: () => void;
  export const ItemOrderingSection = memo(
TYPES/INTERFACES:
  export interface ItemOrderingSectionProps {
  type ViewMode = 'categories' | 'list';
  type SortDirection = 'asc' | 'desc' | null;
REACT COMPONENTS:
  const ItemOrderingSectionComponent: React.FC<ItemOrderingSectionProps> = ({
USED HOOKS:
  useCallback
  useMemo
  useState
API CALLS/ENDPOINTS:

--- FILE: ./components/lists/CollectionExportModal.tsx ---
IMPORTS:
  import React, { useState } from 'react';
  import { ArrowUpDown, Download, FileText, Image, Package } from 'lucide-react';
  import { PokemonModal } from '../../shared/components/atoms/design-system/PokemonModal';
  import LoadingSpinner from '../../shared/components/molecules/common/LoadingSpinner';
  import { CollectionItem } from './CollectionItemCard';
  import {
  import { ItemOrderingSection } from './ItemOrderingSection';
  import { ItemCategory, SortMethod } from '../../domain/models/ordering';
FUNCTIONS/METHODS:
    onClose: () => void;
    onToggleItemSelection: (itemId: string) => void;
    onSelectAllItems: () => void;
    onClearSelection: () => void;
    onExportSelected: (format: ExportFormat) => void;
  export const CollectionExportModal: React.FC<CollectionExportModalProps> = ({
TYPES/INTERFACES:
  export interface CollectionExportModalProps {
REACT COMPONENTS:
USED HOOKS:
  useState
API CALLS/ENDPOINTS:

--- FILE: ./components/lists/CollectionItemCard.tsx ---
IMPORTS:
  import React, { memo, useCallback, useMemo } from 'react';
  import { ImageProductView } from '../../shared/components/molecules/common/ImageProductView';
  import { formatCardNameForDisplay } from '../../shared/utils/helpers/formatting';
  import { IPsaGradedCard, IRawCard } from '../../domain/models/card';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
FUNCTIONS/METHODS:
    onViewDetails: (
  export const CollectionItemCard = memo(
TYPES/INTERFACES:
  export type CollectionItem = IPsaGradedCard | IRawCard | ISealedProduct;
  export interface CollectionItemCardProps {
REACT COMPONENTS:
  const CollectionItemCardComponent: React.FC<CollectionItemCardProps> = ({
USED HOOKS:
  useCallback
  useMemo
API CALLS/ENDPOINTS:

--- FILE: ./components/lists/CollectionStats.tsx ---
IMPORTS:
  import React from 'react';
  import { Archive, CheckCircle, Package, Star } from 'lucide-react';
  import { PokemonCard } from '../../shared/components/atoms/design-system';
FUNCTIONS/METHODS:
  export const CollectionStats: React.FC<CollectionStatsProps> = ({
TYPES/INTERFACES:
  export interface CollectionStatsProps {
  interface StatCardProps {
REACT COMPONENTS:
  const StatCard: React.FC<StatCardProps> = ({
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./components/lists/CollectionTabs.tsx ---
IMPORTS:
  import React, { memo } from 'react';
  import { Archive, CheckCircle, Package, Plus, Star } from 'lucide-react';
  import LoadingSpinner from '../../shared/components/molecules/common/LoadingSpinner';
  import CollectionItemCard, { CollectionItem } from './CollectionItemCard';
  import { IPsaGradedCard, IRawCard } from '../../domain/models/card';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
FUNCTIONS/METHODS:
    onTabChange: (tab: TabType) => void;
    soldItems: (IPsaGradedCard | IRawCard | ISealedProduct)[];
    onAddNewItem: () => void;
    onViewItemDetail: (
    onMarkAsSold: (item: CollectionItem, type: 'psa' | 'raw' | 'sealed') => void;
  export const CollectionTabs: React.FC<CollectionTabsProps> = memo(
              itemMongoId: (item as any)._id,
              cardId: (item as any).cardId,
              productId: (item as any).productId,
TYPES/INTERFACES:
  export type TabType =
  export interface TabConfig {
  export interface CollectionTabsProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./components/lists/UnifiedCategoryList.tsx ---
IMPORTS:
  import React, { memo, useCallback, useMemo, useState } from 'react';
  import { DragEndEvent, DragStartEvent } from '@dnd-kit/core';
  import {
  import {
  import { PokemonCard } from '../../shared/components/atoms/design-system/PokemonCard';
  import { CollectionItem, ItemCategory } from '../../shared/domain/models/ordering';
  import { applyItemOrder, getItemCategory } from '../../shared/utils/helpers/orderingUtils';
FUNCTIONS/METHODS:
  export const UnifiedCategoryList: React.FC<UnifiedCategoryListProps> = memo(
TYPES/INTERFACES:
  export type ListMode = 'static' | 'sortable';
  export interface UnifiedCategoryListProps {
REACT COMPONENTS:
USED HOOKS:
  useCallback
  useMemo
  useState
API CALLS/ENDPOINTS:

--- FILE: ./components/routing/utils/routeUtils.ts ---
IMPORTS:
  import { RouteParams, RouteMatch } from '../types/RouterTypes';
FUNCTIONS/METHODS:
  export function parseRoute(path: string): string[] {
  export function matchRoute(
  export function generatePath(pattern: string, params: RouteParams): string {
  export function extractParams(
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./components/routing/types/RouterTypes.ts ---
IMPORTS:
  import { ComponentType } from 'react';
FUNCTIONS/METHODS:
TYPES/INTERFACES:
  export interface RouteConfig {
  export interface RouteParams {
  export interface RouteMatch {
  export interface RouteHandler {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./components/routing/Router.tsx ---
IMPORTS:
  import React, { lazy } from 'react';
  import { RouteConfig, RouteHandler } from './types/RouterTypes';
  import { matchRoute } from './utils/routeUtils';
FUNCTIONS/METHODS:
  const Dashboard = lazy(() => import('../../pages/Dashboard'));
  const Collection = lazy(() => import('../../pages/Collection'));
      paramHandler: (params) => ({ auctionId: params.id }),
      paramHandler: (params) => ({ auctionId: params.id }),
      validateParams: (params) => {
      validateParams: (params) => {
  const Router: React.FC<RouterProps> = ({ currentPath }) => {
  function findMatchingRoute(currentPath: string): RouteHandler | null {
TYPES/INTERFACES:
  interface RouterProps {
REACT COMPONENTS:
  const Router: React.FC<RouterProps> = ({ currentPath }) => {
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./components/error/ErrorBoundary.tsx ---
IMPORTS:
  import { Component, lazy, ReactNode, Suspense } from 'react';
  import { Activity, AlertTriangle, Code, Home, RefreshCw } from 'lucide-react';
  import { updateErrorMetrics } from './errorBoundaryUtils';
FUNCTIONS/METHODS:
  const ReactProfiler = lazy(() => import('../debug/ReactProfiler'));
    resetErrorBoundary = () => {
    handleRetry = () => {
    handleGoHome = () => {
TYPES/INTERFACES:
  interface ErrorInfo {
  interface ErrorBoundaryState {
  interface ErrorBoundaryProps {
REACT COMPONENTS:
USED HOOKS:
API CALLS/ENDPOINTS:
        errorMetrics.errorsByComponent.get(componentName) || 0;

--- FILE: ./components/error/errorBoundaryUtils.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const updateErrorMetrics = (metrics: typeof errorMetrics) => {
  export const getErrorMetrics = () => ({
  export const clearErrorMetrics = () => {
TYPES/INTERFACES:
USED HOOKS:
API CALLS/ENDPOINTS:

--- FILE: ./components/ImageUploader.tsx ---
IMPORTS:
  import React, {
  import { Upload, X } from 'lucide-react';
  import { PokemonConfirmModal } from '../shared/components/atoms/design-system/PokemonModal';
  import { ImageAnalysisIndicator } from '../shared/components/molecules/common/ImageAnalysisIndicator';
  import { useDragAndDrop } from '../shared/hooks/useDragAndDrop';
  import { useImageRemoval } from '../shared/hooks/useImageRemoval';
  import {
  import { cn } from '../shared/utils/helpers/unifiedUtilities';
FUNCTIONS/METHODS:
    onImagesChange: (files: File[], remainingExistingUrls?: string[]) => void;
TYPES/INTERFACES:
  interface ImageUploaderProps {
REACT COMPONENTS:
  const ImageUploader: React.FC<ImageUploaderProps> = ({
USED HOOKS:
  useCallback
  useDragAndDrop
  useEffect
  useImageRemoval
  useRef
  useState
API CALLS/ENDPOINTS:

--- FILE: ./theme/formThemes.ts ---
IMPORTS:
FUNCTIONS/METHODS:
  export const formThemes: Record<ThemeColor, FormThemeConfig> = {
  export const getFormTheme = (color: ThemeColor = 'dark'): FormThemeConfig => {
  export const getHeaderTheme = (color: ThemeColor = 'dark'): FormHeaderTheme => {
  export const getButtontheme = (color: ThemeColor = 'dark'): FormButtonTheme => {
  export const getElementTheme = (
  export const buildThemeClasses = {
    headerBackground: (color: ThemeColor) =>
    headerBorder: (color: ThemeColor) => `border ${getHeaderTheme(color).border}`,
    buttonPrimary: (color: ThemeColor) => {
    elementGradient: (color: ThemeColor) =>
    elementGlow: (color: ThemeColor) =>
TYPES/INTERFACES:
  export type ThemeColor =
  export interface FormHeaderTheme {
  export interface FormButtonTheme {
  export interface PremiumElementTheme {
  export interface FormThemeConfig {
USED HOOKS:
API CALLS/ENDPOINTS:

=== DEPENDENCY ANALYSIS ===

=== IMPORT/EXPORT RELATIONSHIPS ===

LOCAL IMPORTS MAP:
./features/search/pages/SetSearch.tsx imports:
  import * as setsApi from '../../../shared/api/setsApi';
  import { searchSets } from '../../../shared/api/searchApi';
  import { PokemonInput } from '../../../shared/components/atoms/design-system/PokemonInput';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import { useFetchCollectionItems } from '../../../shared/hooks/useFetchCollectionItems';
  import { usePageLayout } from '../../../shared/hooks/usePageLayout';
  import { log } from '../../../shared/utils/performance/logger';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
./features/search/pages/SealedProductSearch.tsx imports:
  } from '../../../shared/api/productsApi';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import ProductSearchFilters from '../../../shared/components/molecules/common/ProductSearchFilters';
  import ProductCard from '../../../shared/components/molecules/common/ProductCard';
  import PaginationControls from '../../../shared/components/molecules/common/PaginationControls';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  } from '../../../shared/domain/models/product';
  import { ISetProduct } from '../../../shared/domain/models/setProduct';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { log } from '../../../shared/utils/performance/logger';
./features/auction/pages/Auctions.tsx imports:
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import { useAuction } from '../../../shared/hooks/useAuction';
  } from '../../../shared/utils/helpers/auctionStatusUtils';
  import { formatDateWithTime } from '../../../shared/utils/helpers/formatting';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  } from '../../../shared/components/atoms/design-system';
./features/auction/pages/AuctionDetail.tsx imports:
  import AuctionItemsSection from '../components/auction/sections/AuctionItemsSection';
  } from '../../../shared/components/atoms/design-system/PokemonModal';
  import { PokemonButton } from '../../../shared/components/atoms/design-system/PokemonButton';
  import { MarkSoldForm } from '../../../shared/components/forms/MarkSoldForm';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import AddItemToAuctionModal from '../../../components/modals/AddItemToAuctionModal';
  import { AuctionItemCard } from '../components/auction/AuctionItemCard';
  import { ISaleDetails } from '../../../shared/domain/models/common';
  import { useAuction } from '../../../shared/hooks/useAuction';
  import { useCollectionOperations } from '../../../shared/hooks/useCollectionOperations';
  import { useModal, useConfirmModal } from '../../../shared/hooks/useModal';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  } from '../../../shared/components/organisms/ui/toastNotifications';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  } from '../../../shared/utils/helpers/itemDisplayHelpers';
./features/auction/pages/CreateAuction.tsx imports:
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import { IAuctionItem } from '../../../shared/domain/models/auction';
  import { IPsaGradedCard, IRawCard } from '../../../shared/domain/models/card';
  import { ISealedProduct } from '../../../shared/domain/models/sealedProduct';
  import { useAuction } from '../../../shared/hooks/useAuction';
  import { useFetchCollectionItems } from '../../../shared/hooks/useFetchCollectionItems';
  import { useBaseForm } from '../../../shared/hooks/useBaseForm';
  import { getCollectionApiService } from '../../../shared/services/ServiceRegistry';
  import { processImageUrl } from '../../../shared/utils/helpers/formatting';
  import { log } from '../../../shared/utils/performance/logger';
  import AuctionFormContainer from '../../../shared/components/forms/containers/AuctionFormContainer';
  import AuctionItemSelectionSection from '../../../shared/components/forms/sections/AuctionItemSelectionSection';
  import { useCentralizedTheme } from '../../../shared/utils/ui/themeConfig';
  } from '../../../shared/components/organisms/effects';
./features/auction/pages/AuctionEdit.tsx imports:
  import AuctionItemsSection from '../components/auction/sections/AuctionItemsSection';
  import { PokemonButton } from '../../../shared/components/atoms/design-system/PokemonButton';
  import { PokemonConfirmModal } from '../../../shared/components/atoms/design-system/PokemonModal';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  } from '../../../components/lists/CollectionItemCard';
  import AddItemToAuctionModal from '../../../components/modals/AddItemToAuctionModal';
  import { useAuction } from '../../../shared/hooks/useAuction';
  import { showSuccessToast } from '../../../shared/components/organisms/ui/toastNotifications';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
./features/auction/components/auction/index.ts imports:
  export { AuctionItemCard } from './AuctionItemCard';
  export type { AuctionItemCardProps } from './AuctionItemCard';
./features/auction/components/auction/AuctionItemCard.tsx imports:
  import { PokemonButton } from '../../../../shared/components/atoms/design-system/PokemonButton';
  } from '../../../../shared/utils/helpers/itemDisplayHelpers';
./features/auction/components/auction/sections/AuctionItemsSection.tsx imports:
  import { PokemonButton } from '../../../../../shared/components/atoms/design-system/PokemonButton';
./features/auction/components/auction/RefactoredAuctionContent.tsx imports:
  import { UnifiedHeader, SectionContainer } from '../common';
  import { Context7Background } from '../effects';
  import { PokemonButton } from '../design-system';
./features/auction/components/auction/AuctionEditLayout.tsx imports:
  import { PokemonButton } from '../design-system/PokemonButton';
  import LoadingSpinner from '../common/LoadingSpinner';
  import { PageLayout } from '../layouts/PageLayout';
  import { AuctionFormData } from '../../hooks/useAuctionFormData';
./features/dashboard/pages/Dashboard.tsx imports:
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import { useRecentActivities } from '../../../shared/hooks/useActivity';
  import { useCollectionStats } from '../../../shared/hooks/useCollectionStats';
  import { getDataCounts } from '../../../shared/api/statusApi';
  import { displayPrice } from '../../../shared/utils/helpers/formatting';
  } from '../../../shared/utils/helpers/activityHelpers';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  } from '../../../shared/components/organisms/effects/GlassmorphismContainer';
  import { ActivityTimeline } from '../../../shared/components/analytics/ActivityTimeline';
  import { ParticleSystem } from '../../../shared/components/organisms/effects';
  } from '../components/dashboard';
./features/dashboard/pages/DbaExport.tsx imports:
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import { useDbaExport } from '../../../shared/hooks/useDbaExport';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import { PokemonCard } from '../../../shared/components/atoms/design-system/PokemonCard';
./features/dashboard/components/dba/DbaExportActionsCosmic.tsx imports:
  import { PokemonButton } from '../../../../shared/components/atoms/design-system/PokemonButton';
./features/dashboard/components/dba/DbaExportActions.tsx imports:
  import { PokemonButton } from '../design-system/PokemonButton';
./features/dashboard/components/dba/DbaExportConfiguration.tsx imports:
  import { PokemonInput } from '../../../../shared/components/atoms/design-system/PokemonInput';
  import DbaExportActionsCosmic from './DbaExportActionsCosmic';
  import ItemCustomizationCard from './itemDisplay/ItemCustomizationCard';
./features/dashboard/components/dba/UnifiedDbaEmptyState.tsx imports:
  import { GlassmorphismContainer } from '../effects/GlassmorphismContainer';
  import { PokemonCard } from '../design-system/PokemonCard';
./features/dashboard/components/dba/DbaCosmicBackground.tsx imports:
  import { CosmicBackground } from '../../../../shared/components/organisms/effects';
./features/dashboard/components/dba/DbaEmptyStateCosmic.tsx imports:
  import { PokemonCard } from '../../../../shared/components/atoms/design-system/PokemonCard';
./features/dashboard/components/dba/itemDisplay/ItemCustomizationCard.tsx imports:
  import { processImageUrl } from '../../../../../shared/utils/helpers/common';
./features/dashboard/components/dba/DbaCustomDescriptionInput.tsx imports:
  import { PokemonInput } from '../design-system/PokemonInput';
./features/dashboard/components/dba/DbaHeaderGalaxyCosmic.tsx imports:
  import { PokemonPageContainer } from '../../../../shared/components/atoms/design-system/PokemonPageContainer';
./features/dashboard/components/dashboard/index.ts imports:
  } from './DashboardStatCard';
  export type { DashboardStatCardProps } from './DashboardStatCard';
./features/dashboard/components/dashboard/DashboardStatCard.tsx imports:
  } from '../../../../shared/components/organisms/effects/GlassmorphismContainer';
./features/collection/pages/CollectionItemDetail.tsx imports:
  } from '../../../shared/components/atoms/design-system/PokemonModal';
  import { PokemonPageContainer } from '../../../shared/components/atoms/design-system/PokemonPageContainer';
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import { MarkSoldForm } from '../../../shared/components/forms/MarkSoldForm';
  import { useModal } from '../../../shared/hooks/useModal';
  import { useCollectionItemFromUrl } from '../../../shared/hooks/collection/useCollectionItem';
  import { useItemOperations } from '../../../shared/hooks/collection/useItemOperations';
  import { usePriceManagement } from '../../../shared/hooks/collection/usePriceManagement';
  import { useImageDownload } from '../../../shared/hooks/collection/useImageDownload';
  } from '../components/collection';
  import { getItemDisplayData } from '../../../shared/utils/helpers/itemDisplayHelpers';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
./features/collection/pages/Collection.tsx imports:
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import { CollectionItem } from '../../../components/lists/CollectionItemCard';
  import CollectionStats from '../../../components/lists/CollectionStats';
  } from '../../../components/lists/CollectionTabs';
  import { useCollectionExport } from '../../../shared/hooks/useCollectionExport';
  import { useCollectionOperations } from '../../../shared/hooks/useCollectionOperations';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  } from '../../../shared/components/atoms/design-system';
./features/collection/pages/AddEditItem.tsx imports:
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import { IPsaGradedCard, IRawCard } from '../../../shared/domain/models/card';
  import { ISealedProduct } from '../../../shared/domain/models/sealedProduct';
  import { useCollectionOperations } from '../../../shared/hooks/useCollectionOperations';
  import { getCollectionApiService } from '../../../shared/services/ServiceRegistry';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { log } from '../../../shared/utils/performance/logger';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  import { useCentralizedTheme } from '../../../shared/utils/ui/themeConfig';
./features/collection/components/collection/ItemImageGallery.tsx imports:
  import { CollectionItem } from '../../hooks/collection/useCollectionItem';
  import { PokemonCard } from '../../../../shared/components/atoms/design-system/PokemonCard';
  import { ImageProductView } from '../../../../shared/components/molecules/common/ImageProductView';
  import LoadingSpinner from '../../../../shared/components/molecules/common/LoadingSpinner';
  import { navigationHelper } from '../../../../shared/utils/helpers/navigation';
./features/collection/components/collection/CollectionItemHeader.tsx imports:
  import { CollectionItem } from '../../hooks/collection/useCollectionItem';
  import GlassmorphismHeader from '../../../../shared/components/molecules/common/GlassmorphismHeader';
  import FormActionButtons from '../../../../shared/components/molecules/common/FormActionButtons';
./features/collection/components/collection/ItemSaleDetails.tsx imports:
  import { CollectionItem } from '../../hooks/collection/useCollectionItem';
./features/collection/components/collection/index.ts imports:
  } from './ItemDetailSection';
  } from './ItemDetailSection';
  export { CollectionItemHeader } from './CollectionItemHeader';
  export { ItemEssentialDetails } from './ItemEssentialDetails';
  export { ItemImageGallery } from './ItemImageGallery';
  export { ItemPriceHistory } from './ItemPriceHistory';
  export { ItemSaleDetails } from './ItemSaleDetails';
  } from './CollectionItemHeader';
  export type { ItemEssentialDetailsProps } from './ItemEssentialDetails';
  export type { ItemImageGalleryProps } from './ItemImageGallery';
  export type { ItemPriceHistoryProps } from './ItemPriceHistory';
  export type { ItemSaleDetailsProps } from './ItemSaleDetails';
./features/collection/components/collection/ItemPriceHistory.tsx imports:
  import { CollectionItem } from '../../hooks/collection/useCollectionItem';
  import { PokemonCard } from '../../../../shared/components/atoms/design-system/PokemonCard';
  import { PriceHistoryDisplay } from '../../../../components/PriceHistoryDisplay';
./features/collection/components/collection/ItemEssentialDetails.tsx imports:
  import { CollectionItem } from '../../hooks/collection/useCollectionItem';
  import { PokemonCard } from '../../../../shared/components/atoms/design-system/PokemonCard';
  } from '../../../../shared/utils/helpers/itemDisplayHelpers';
  import { navigationHelper } from '../../../../shared/utils/helpers/navigation';
./features/analytics/pages/Activity.tsx imports:
  import LoadingSpinner from '../../../shared/components/molecules/common/LoadingSpinner';
  import ActivityStatCard from '../../../shared/components/molecules/common/ActivityStatCard';
  import ActivityListItem from '../../../shared/components/molecules/common/ActivityListItem';
  import ActivityFilterHub from '../../../shared/components/molecules/common/ActivityFilterHub';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import { ACTIVITY_TYPES, useActivity } from '../../../shared/hooks/useActivity';
  } from '../../../shared/utils/helpers/formatting';
  } from '../../../shared/components/atoms/design-system';
./features/analytics/pages/SalesAnalytics.tsx imports:
  import { PokemonButton } from '../../../shared/components/atoms/design-system/PokemonButton';
  import { DateRangeState } from '../../../shared/components/molecules/common/DateRangeFilter';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import GlassmorphismHeader from '../../../shared/components/molecules/common/GlassmorphismHeader';
  import SalesStatCard from '../../../shared/components/molecules/common/SalesStatCard';
  import CategorySalesCard from '../../../shared/components/molecules/common/CategorySalesCard';
  import RecentSaleListItem from '../../../shared/components/molecules/common/RecentSaleListItem';
  import SalesDateRangeFilter from '../../../shared/components/molecules/common/SalesDateRangeFilter';
  import { useExportOperations } from '../../../shared/hooks/useExportOperations';
  import { useSalesAnalytics } from '../../../shared/hooks/useSalesAnalytics';
  import { showSuccessToast } from '../../../shared/components/organisms/ui/toastNotifications';
  import { displayPrice } from '../../../shared/utils/helpers/formatting';
./features/analytics/pages/Analytics.tsx imports:
  } from '../../../shared/components/molecules/common/DateRangeFilter';
  import { PageLayout } from '../../../shared/components/layout/layouts/PageLayout';
  import { GlassmorphismContainer } from '../../../shared/components/organisms/effects/GlassmorphismContainer';
  } from '../../../shared/components/analytics';
  } from '../../../shared/hooks/useActivity';
  import { useCollectionStats } from '../../../shared/hooks/useCollectionStats';
  import { useAnalyticsData } from '../../../shared/hooks/useAnalyticsData';
./features/analytics/components/analytics/ActivityTimeline.tsx imports:
  import { GlassmorphismContainer } from '../effects/GlassmorphismContainer';
  import { ContentLoading } from '../common/LoadingStates';
  } from '../../../shared/utils/helpers/activityHelpers';
  import { displayPrice, getRelativeTime } from '../../../shared/utils/helpers/formatting';
./features/analytics/components/analytics/index.ts imports:
  export { default as AnalyticsBackground } from './AnalyticsBackground';
  export { default as AnalyticsHeader } from './AnalyticsHeader';
  export { default as ActivityTimeline } from './ActivityTimeline';
  export { default as CategoryStats } from './CategoryStats';
  export { default as MetricCard } from './MetricCard';
  export { default as MetricsGrid } from './MetricsGrid';
  export type { AnalyticsBackgroundProps } from './AnalyticsBackground';
  export type { AnalyticsHeaderProps } from './AnalyticsHeader';
  export type { ActivityTimelineProps } from './ActivityTimeline';
  export type { CategoryStatsProps } from './CategoryStats';
  export type { MetricCardProps } from './MetricCard';
  export type { MetricsGridProps } from './MetricsGrid';
./features/analytics/components/analytics/CategoryStats.tsx imports:
  import { GlassmorphismContainer } from '../effects/GlassmorphismContainer';
./features/analytics/components/analytics/AnalyticsHeader.tsx imports:
  import GlassmorphismHeader from '../common/GlassmorphismHeader';
./features/analytics/components/analytics/MetricsGrid.tsx imports:
  import { MetricCard } from './MetricCard';
  import { getRelativeTime } from '../../../shared/utils/helpers/formatting';
./shared/utils/transformers/unifiedResponseTransformer.ts imports:
  } from './responseTransformer';
./shared/utils/ui/imageUtils.ts imports:
  import { generateId } from '../helpers/common';
./shared/utils/ui/themeExport.ts imports:
  } from '../types/themeTypes';
  import { exportToJSON } from './fileOperations';
./shared/utils/ui/cosmicEffects.ts imports:
  // Import from: import { getContext7HolographicBorderStyles } from '../../ui/context7Styles';
  // Import from: import { COSMIC_TIMER_CONFIG } from '../components/atoms/design-system/PokemonBadge';
./shared/utils/ui/classNameUtils.ts imports:
  } from '../types/themeTypes';
  import { VisualTheme, Density, AnimationIntensity } from '../types/themeTypes';
  import { cn } from './themeUtils';
./shared/utils/ui/themeConfig.ts imports:
  } from '../../contexts/theme';
./shared/utils/ui/context7Styles.ts imports:
  import { ImageAspectInfo, ResponsiveImageConfig } from './file/imageProcessing';
./shared/utils/ui/themeDebug.ts imports:
  } from './theme/validation';
  } from './theme/performance';
  } from './theme/debugging';
./shared/utils/ui/themeUtils.ts imports:
  } from '../types/themeTypes';
  import { ThemeColor, getFormTheme } from '../../../theme/formThemes';
  import { VisualTheme } from '../types/themeTypes';
./shared/utils/file/imageProcessing.ts imports:
  } from '../ui/context7Styles';
./shared/utils/helpers/exportUtils.ts imports:
  } from '../interfaces/api/IExportApiService';
  } from '../domain/models/ordering';
  } from './orderingUtils';
./shared/utils/helpers/performanceTest.ts imports:
  import { unifiedApiClient } from '../api/unifiedApiClient';
./shared/utils/helpers/common.ts imports:
  } from '../transformers/responseTransformer';
  export { useDebounce, useDebouncedCallback } from '../../hooks/useDebounce';
  export { cn } from '../ui/themeUtils';
  } from './formatting';
  } from './constants';
  export { debounce } from './debounceUtils';
./shared/utils/helpers/orderingUtils.ts imports:
  } from '../domain/models/ordering';
./shared/utils/helpers/fileOperations.ts imports:
  } from '../file/csvExport';
  } from '../file/exportFormats';
  } from '../file/imageProcessing';
./shared/utils/helpers/validation/RuntimeValidator.ts imports:
  } from '../typeGuards/TypeGuards';
./shared/utils/helpers/activityHelpers.ts imports:
  import { ACTIVITY_TYPES } from '../../hooks/useActivity';
./shared/utils/helpers/errorHandler.ts imports:
  import { error as logError } from '../performance/logger';
  import { APIResponse } from './responseTransformer';
  } from '../../components/organisms/ui/toastNotifications';
./shared/utils/helpers/navigation.ts imports:
  import { log } from '../performance/logger';
./shared/utils/helpers/constants.ts imports:
  // Import from: import { getStatusColor, getStatusPriority } from './auctionStatusUtils';
./shared/utils/helpers/searchHelpers.ts imports:
  import { SearchResult, SearchParams } from '../types/searchTypes';
  // import { debounce } from './common';
./shared/utils/helpers/storageUtils.ts imports:
  import { ItemOrderingState, SortMethod } from '../domain/models/ordering';
./shared/utils/helpers/performanceOptimization.ts imports:
  import { CACHE_TTL } from '../config/cacheConfig';
./shared/utils/helpers/unifiedUtilities.ts imports:
  } from '../types/themeTypes';
  import { ThemeColor, getFormTheme } from '../theme/formThemes';
  } from '../transformers/responseTransformer';
  } from './formatting';
  } from './constants';
  } from '../../hooks/useDebounce';
   * import { cn, getSizeClasses, getVariantClasses, getGlassmorphismClasses } from './unifiedUtilities';
   * import { cn } from './classNameUtils'; // Now redirects to unified system
   * import { cn } from './themeUtils'; // Now redirects to unified system
./shared/utils/theme/debugging.ts imports:
  } from '../../types/themeTypes';
  import { validateThemeConfiguration } from './validation';
  import { getThemePerformanceMetrics } from './performance';
./shared/utils/theme/performance.ts imports:
  import { VisualTheme } from '../../types/themeTypes';
./shared/utils/theme/validation.ts imports:
  import { VisualTheme, ThemeConfiguration } from '../../types/themeTypes';
  import { formThemes } from '../../theme/formThemes';
./shared/interfaces/api/ICollectionApiService.ts imports:
  import { IPsaGradedCard, IRawCard } from '../../domain/models/card';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
  import { ISaleDetails } from '../../domain/models/common';
./shared/interfaces/api/ISetProductApiService.ts imports:
  import { ISetProduct } from '../../domain/models/setProduct';
./shared/interfaces/api/ISearchApiService.ts imports:
  import { ISet } from '../../domain/models/card';
  import { IProduct } from '../../domain/models/product';
  import { ISetProduct } from '../../domain/models/setProduct';
./shared/domain/services/SalesAnalyticsService.ts imports:
  import { ISale, ISalesGraphData } from '../models/sale';
./shared/domain/models/sealedProduct.ts imports:
  import { IPriceHistoryEntry, ISaleDetails } from './common';
./shared/domain/models/card.ts imports:
  import { IPriceHistoryEntry, ISaleDetails } from './common';
./shared/domain/models/product.ts imports:
  import { ISetProduct } from './setProduct';
./shared/domain/models/ordering.ts imports:
  import { IPsaGradedCard, IRawCard } from './card';
  import { ISealedProduct } from './sealedProduct';
./shared/services/SetProductApiService.ts imports:
  import * as setProductsApi from '../api/setProductsApi';
  import * as productsApi from '../api/productsApi';
  } from '../api/searchApi';
  import { ISetProduct } from '../domain/models/setProduct';
  import { IProduct } from '../domain/models/product';
  } from '../interfaces/api/ISetProductApiService';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { log } from '../utils/performance/logger';
./shared/services/CollectionApiService.ts imports:
  import * as collectionApi from '../api/collectionApi';
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISaleDetails } from '../domain/models/common';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { ICollectionApiService } from '../interfaces/api/ICollectionApiService';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { log } from '../utils/performance/logger';
./shared/services/SearchApiService.ts imports:
  import { ISet } from '../domain/models/card';
  import { IProduct } from '../domain/models/product';
  import { ISetProduct } from '../domain/models/setProduct';
  } from '../interfaces/api/ISearchApiService';
  } from '../api/searchApi';
./shared/services/CompositeCollectionApiService.ts imports:
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { ISaleDetails } from '../domain/models/common';
  } from '../interfaces/api/ICollectionApiService';
./shared/services/ServiceRegistry.ts imports:
  import { ICollectionApiService, IPsaCardApiService, IRawCardApiService, ISealedProductApiService } from '../interfaces/api/ICollectionApiService';
  import { IExportApiService } from '../interfaces/api/IExportApiService';
  import { ISearchApiService } from '../interfaces/api/ISearchApiService';
  import { IUploadApiService } from '../interfaces/api/IUploadApiService';
  import { unifiedHttpClient } from './base/UnifiedHttpClient';
  import { PsaCardApiService } from './collection/PsaCardApiService';
  import { RawCardApiService } from './collection/RawCardApiService';
  import { SealedProductApiService } from './collection/SealedProductApiService';
  import { CompositeCollectionApiService } from './CompositeCollectionApiService';
  import { exportApiService } from './ExportApiService';
  import { searchApiService } from './SearchApiService';
  import { uploadApiService } from './UploadApiService';
./shared/services/collection/SealedProductApiService.ts imports:
  import * as collectionApi from '../../api/collectionApi';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
  import { ISaleDetails } from '../../domain/models/common';
  import { BaseApiService } from '../base/BaseApiService';
  import { IHttpClient } from '../base/HttpClientInterface';
  } from '../../interfaces/api/ICollectionApiService';
./shared/services/collection/index.ts imports:
  export { PsaCardApiService } from './PsaCardApiService';
  export { RawCardApiService } from './RawCardApiService';
  export { SealedProductApiService } from './SealedProductApiService';
./shared/services/collection/RawCardApiService.ts imports:
  import * as collectionApi from '../../api/collectionApi';
  import { IRawCard } from '../../domain/models/card';
  import { ISaleDetails } from '../../domain/models/common';
  import { BaseApiService } from '../base/BaseApiService';
  import { IHttpClient } from '../base/HttpClientInterface';
  } from '../../interfaces/api/ICollectionApiService';
./shared/services/collection/PsaCardApiService.ts imports:
  import * as collectionApi from '../../api/collectionApi';
  import { IPsaGradedCard } from '../../domain/models/card';
  import { ISaleDetails } from '../../domain/models/common';
  import { BaseApiService } from '../base/BaseApiService';
  import { IHttpClient } from '../base/HttpClientInterface';
  } from '../../interfaces/api/ICollectionApiService';
./shared/services/base/HttpClientInterface.ts imports:
  import { EnhancedRequestConfig } from '../../api/unifiedApiClient';
./shared/services/base/BaseApiService.ts imports:
  import { IHttpClient } from './HttpClientInterface';
  import { ErrorHandlingService } from './ErrorHandlingService';
  import { EnhancedRequestConfig } from '../../api/unifiedApiClient';
./shared/services/base/index.ts imports:
  export { IHttpClient } from './HttpClientInterface';
  export { UnifiedHttpClient, unifiedHttpClient } from './UnifiedHttpClient';
  export { ErrorHandlingService } from './ErrorHandlingService';
  export { BaseApiService } from './BaseApiService';
./shared/services/base/UnifiedHttpClient.ts imports:
  } from '../../api/unifiedApiClient';
  import { IHttpClient } from './HttpClientInterface';
./shared/services/base/ErrorHandlingService.ts imports:
  import { handleApiError } from '../../utils/helpers/errorHandler';
  import { log } from '../../utils/performance/logger';
./shared/services/ExportApiService.ts imports:
  import * as exportApi from '../api/exportApi';
  } from '../interfaces/api/IExportApiService';
  } from '../utils/helpers/exportUtils';
  import { CollectionItem } from '../domain/models/ordering';
./shared/services/UploadApiService.ts imports:
  import { uploadMultipleImages } from '../api/uploadApi';
  import { IUploadApiService } from '../interfaces/api/IUploadApiService';
./shared/contexts/ThemeContext.tsx imports:
  import { ThemeColor, formThemes } from '../../theme/formThemes';
  import { ThemePropertyManager } from '../utils/theme/ThemePropertyManager';
  } from '../types/themeTypes';
  // - VisualThemeProvider from './theme/VisualThemeProvider'
  // - LayoutThemeProvider from './theme/LayoutThemeProvider'
  // - AnimationThemeProvider from './theme/AnimationThemeProvider'
  // - AccessibilityThemeProvider from './theme/AccessibilityThemeProvider'
  // - ThemeStorageProvider from './theme/ThemeStorageProvider'
  // - ComposedThemeProvider from './theme/ComposedThemeProvider'
./shared/contexts/theme/VisualThemeProvider.tsx imports:
  import { VisualTheme, ThemePreset } from '../../types/themeTypes';
  import { themePresets } from '../ThemeContext';
./shared/contexts/theme/index.ts imports:
  } from './UnifiedThemeProvider';
  export { ComposedThemeProvider } from './ComposedThemeProvider';
./shared/contexts/theme/UnifiedThemeProvider.tsx imports:
  } from '../../types/themeTypes';
  import { ThemeColor } from '../../theme/formThemes';
./shared/contexts/theme/LayoutThemeProvider.tsx imports:
  import { Density } from '../../types/themeTypes';
./shared/contexts/theme/ComposedThemeProvider.tsx imports:
  import { ThemeConfiguration, ColorScheme } from '../../types/themeTypes';
  import { ThemePropertyManager } from '../../../shared/utils/theme/ThemePropertyManager';
  import { defaultConfig as originalDefaultConfig } from '../ThemeContext';
  import { ThemeColor } from '../../../theme/formThemes';
  import { VisualThemeProvider, VisualThemeState } from './VisualThemeProvider';
  import { LayoutThemeProvider, LayoutThemeState } from './LayoutThemeProvider';
  } from './AnimationThemeProvider';
  } from './AccessibilityThemeProvider';
  import { ThemeStorageProvider } from './ThemeStorageProvider';
  import { formThemes } from '../../../theme/formThemes';
./shared/contexts/theme/AnimationThemeProvider.tsx imports:
  import { AnimationIntensity } from '../../types/themeTypes';
./shared/contexts/theme/ThemeStorageProvider.tsx imports:
  import { ThemeConfiguration } from '../../types/themeTypes';
./shared/hooks/useOptimizedSearch.ts imports:
  import { useSearch, SearchResult } from './useSearch';
  import { searchApiService } from '../services/SearchApiService';
./shared/hooks/useExportOperations.ts imports:
  import { useAsyncOperation } from './useAsyncOperation';
  } from '../utils/helpers/fileOperations';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
./shared/hooks/useItemActions.ts imports:
  import { ServiceRegistry } from '../services/ServiceRegistry';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { navigationHelper } from '../utils/helpers/navigation';
./shared/hooks/useCollectionImageExport.ts imports:
  import { getExportApiService } from '../services/ServiceRegistry';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
  import { log } from '../utils/performance/logger';
  import { useAsyncOperation } from './useAsyncOperation';
./shared/hooks/useSearch.ts imports:
  } from '../api/searchApi';
  import { log } from '../utils/performance/logger';
  import { useDebouncedValue } from './useDebounce';
  import { getDisplayName } from '../utils/helpers/searchHelpers';
  import { queryKeys } from '../../app/lib/queryClient';
  import { SearchResult } from '../types/searchTypes';
./shared/hooks/useDbaExport.ts imports:
  import * as dbaSelectionApi from '../api/dbaSelectionApi';
  import * as exportApi from '../api/exportApi';
  import { useCollectionOperations } from './useCollectionOperations';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
  import { queryKeys } from '../../app/lib/queryClient';
  import { CACHE_TTL } from '../../app/config/cacheConfig';
./shared/hooks/useAccessibilityTheme.ts imports:
  import { useCentralizedTheme } from '../utils/ui/themeConfig';
  import { useAccessibilityTheme as useAccessibilityProvider } from '../contexts/theme/AccessibilityThemeProvider';
./shared/hooks/useAuctionFormData.ts imports:
  import { useBaseForm } from './useBaseForm';
  import { useFetchCollectionItems } from './useFetchCollectionItems';
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { IAuctionItem } from '../domain/models/auction';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  import { processImageUrl } from '../utils/helpers/formatting';
  import { log } from '../utils/performance/logger';
./shared/hooks/useCollectionExport.ts imports:
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { exportApiService } from '../services/ExportApiService';
  } from '../interfaces/api/IExportApiService';
  } from '../domain/models/ordering';
  } from '../utils/helpers/storageUtils';
  import { handleApiError } from '../utils/helpers/errorHandler';
  } from '../components/organisms/ui/toastNotifications';
  } from '../utils/helpers/exportUtils';
  } from '../utils/helpers/orderingUtils';
./shared/hooks/usePsaCardOperations.ts imports:
  import { IPsaGradedCard } from '../domain/models/card';
  import { ISaleDetails } from '../domain/models/common';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  } from './useGenericCrudOperations';
./shared/hooks/useCollectionOperations.ts imports:
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { ISaleDetails } from '../domain/models/common';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  import { log } from '../utils/performance/logger';
  import { queryKeys } from '../../app/lib/queryClient';
  import { usePsaCardOperations } from './usePsaCardOperations';
  import { useRawCardOperations } from './useRawCardOperations';
  import { useSealedProductOperations } from './useSealedProductOperations';
  import { useCollectionImageExport } from './useCollectionImageExport';
./shared/hooks/useThemeSwitch.ts imports:
  import { useCentralizedTheme } from '../utils/ui/themeConfig';
  import { useVisualTheme } from '../contexts/theme/VisualThemeProvider';
  import { useLayoutTheme } from '../contexts/theme/LayoutThemeProvider';
  import { useAnimationTheme } from '../contexts/theme/AnimationThemeProvider';
  import { useAccessibilityTheme } from '../contexts/theme/AccessibilityThemeProvider';
  } from '../contexts/ThemeContext';
  import { ThemeColor } from '../theme/formThemes';
./shared/hooks/useImageUpload.ts imports:
  import { getUploadApiService } from '../services/ServiceRegistry';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
  import { log } from '../utils/performance/logger';
  import { useAsyncOperation } from './useAsyncOperation';
./shared/hooks/useFetchCollectionItems.ts imports:
  import { useAsyncOperation } from './useAsyncOperation';
  import { log } from '../utils/performance/logger';
./shared/hooks/useAutocomplete.ts imports:
  import { SearchResult, useSearch } from './useSearch';
  import { searchApiService } from '../services/SearchApiService';
./shared/hooks/useCollectionState.ts imports:
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { log } from '../utils/performance/logger';
./shared/hooks/index.ts imports:
  export { useModal, useConfirmModal, useMultiModal } from './useModal';
  } from './useModal';
  } from './useItemActions';
  } from './useItemActions';
  } from './useItemDisplayData';
  } from './useItemDisplayData';
./shared/hooks/useImageRemoval.ts imports:
  import { ImagePreview } from '../utils/ui/imageUtils';
./shared/hooks/useMarkSold.ts imports:
  import { ISaleDetails } from '../domain/models/common';
  import { useCollectionOperations } from './useCollectionOperations';
  import { navigationHelper } from '../utils/helpers/navigation';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
./shared/hooks/useRawCardOperations.ts imports:
  import { IRawCard } from '../domain/models/card';
  import { ISaleDetails } from '../domain/models/common';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  } from './useGenericCrudOperations';
./shared/hooks/crud/entitySpecificHooks.ts imports:
  import { getCollectionApiService } from '../../services/ServiceRegistry';
  import { useCollectionOperations } from './useCollectionOperations';
  } from './collectionEntityConfigs';
./shared/hooks/crud/collectionEntityConfigs.ts imports:
  import { CrudApiOperations, CrudMessages } from './useGenericCrudOperations';
./shared/hooks/crud/useCollectionOperations.ts imports:
  import { useGenericCrudOperations } from './useGenericCrudOperations';
  } from './collectionEntityConfigs';
./shared/hooks/crud/index.ts imports:
  } from './useGenericCrudOperations';
  export { useCollectionOperations } from './useCollectionOperations';
  } from './collectionEntityConfigs';
  } from './entitySpecificHooks';
./shared/hooks/crud/useGenericCrudOperations.ts imports:
  import { ISaleDetails } from '../../domain/models/common';
  import { showSuccessToast } from '../../components/organisms/ui/toastNotifications';
  import { log } from '../../utils/performance/logger';
  import { useAsyncOperation } from '../useAsyncOperation';
./shared/hooks/useCollectionStats.ts imports:
  import { useCollectionOperations } from './useCollectionOperations';
  import { displayPrice } from '../utils/helpers/formatting';
./shared/hooks/useDebounce.ts imports:
  export { useDebounce } from '../utils/helpers/debounceUtils';
./shared/hooks/usePageLayout.ts imports:
  } from './useAsyncOperation';
./shared/hooks/useAuction.ts imports:
  import * as auctionsApi from '../api/auctionsApi';
  import * as exportApi from '../api/exportApi';
  import { IAuction } from '../domain/models/auction';
  import { queryKeys, CACHE_TIMES } from '../../app/lib/queryClient';
  import { handleApiError } from '../utils/helpers/errorHandler';
./shared/hooks/collection/usePriceManagement.ts imports:
  import { CollectionItem } from './useCollectionItem';
  import { getCollectionApiService } from '../../services/ServiceRegistry';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { showSuccessToast } from '../../components/organisms/ui/toastNotifications';
  import { log } from '../../../shared/utils/performance/logger';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
./shared/hooks/collection/useCollectionItem.ts imports:
  import { IPsaGradedCard, IRawCard } from '../../domain/models/card';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
  import { getCollectionApiService } from '../../services/ServiceRegistry';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { log } from '../../../shared/utils/performance/logger';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
./shared/hooks/collection/useItemOperations.ts imports:
  import { CollectionItem, ItemType } from './useCollectionItem';
  import { getCollectionApiService } from '../../services/ServiceRegistry';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { showSuccessToast } from '../../components/organisms/ui/toastNotifications';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
  import { useConfirmModal } from '../useModal';
./shared/hooks/collection/useImageDownload.ts imports:
  import { CollectionItem } from './useCollectionItem';
  import { getExportApiService } from '../../services/ServiceRegistry';
  import { handleApiError } from '../../../shared/utils/helpers/errorHandler';
  import { showSuccessToast } from '../../components/organisms/ui/toastNotifications';
  import { log } from '../../../shared/utils/performance/logger';
  import { navigationHelper } from '../../../shared/utils/helpers/navigation';
./shared/hooks/useHierarchicalSearch.tsx imports:
  import { SearchResult, useSearch } from './useSearch';
  import { useDebouncedValue } from './useDebounce';
  import { autoFillFromProductSelection } from '../utils/helpers/searchHelpers';
./shared/hooks/useAsyncOperation.ts imports:
  import { log } from '../utils/performance/logger';
./shared/hooks/useAnalyticsData.ts imports:
  import { processActivitiesForAnalytics } from '../utils/helpers/activityHelpers';
./shared/hooks/useBaseForm.ts imports:
  import { useFormValidation, ValidationRules } from './useFormValidation';
  import { useImageUpload } from './useImageUpload';
  import { usePriceHistory } from './usePriceHistory';
./shared/hooks/useGenericCrudOperations.ts imports:
  } from './crud';
  export { debounce, useDebounce } from '../utils/helpers/debounceUtils';
  export { useGenericCrudOperations as default } from './crud';
./shared/hooks/useSealedProductOperations.ts imports:
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { ISaleDetails } from '../domain/models/common';
  import { getCollectionApiService } from '../services/ServiceRegistry';
  } from './useGenericCrudOperations';
./shared/hooks/useActivity.ts imports:
  } from '../api/activityApi';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { showSuccessToast } from '../components/organisms/ui/toastNotifications';
  import { log } from '../utils/performance/logger';
./shared/hooks/useSalesAnalytics.ts imports:
  import { ISale, ISalesGraphData, ISalesSummary } from '../domain/models/sale';
  } from '../api/salesApi';
  } from '../domain/services/SalesAnalyticsService';
  import { commonCSVColumns, exportToCSV } from '../utils/helpers/fileOperations';
  import { log } from '../utils/performance/logger';
./shared/hooks/useUnifiedSearch.ts imports:
  } from '../api/searchApi';
  import { useDebouncedValue } from './useDebounce';
  import { SearchResult } from '../types/searchTypes';
  import { queryKeys } from '../../app/lib/queryClient';
  import { log } from '../utils/performance/logger';
./shared/hooks/form/useCardSelection.ts imports:
  import { transformRequestData } from '../../utils/transformers/responseTransformer';
./shared/hooks/useItemDisplayData.ts imports:
  } from '../utils/helpers/itemDisplayHelpers';
./shared/hooks/theme/useAnimationTheme.ts imports:
  export { useAnimationTheme } from '../../contexts/theme/AnimationThemeProvider';
./shared/hooks/theme/useAccessibilityTheme.ts imports:
  export { useAccessibilityTheme } from '../../contexts/theme/AccessibilityThemeProvider';
./shared/hooks/theme/useTheme.ts imports:
  } from '../../contexts/ThemeContext';
  import { useVisualTheme } from './useVisualTheme';
  import { useLayoutTheme } from './useLayoutTheme';
  import { useAnimationTheme } from './useAnimationTheme';
  import { useAccessibilityTheme } from './useAccessibilityTheme';
  import { useThemeStorage } from './useThemeStorage';
  import { formThemes } from '../../theme/formThemes';
./shared/hooks/theme/useVisualTheme.ts imports:
  export { useVisualTheme } from '../../contexts/theme/VisualThemeProvider';
./shared/hooks/theme/useLayoutTheme.ts imports:
  export { useLayoutTheme } from '../../contexts/theme/LayoutThemeProvider';
./shared/hooks/theme/useThemeStorage.ts imports:
  export { useThemeStorage } from '../../contexts/theme/ThemeStorageProvider';
./shared/types/themeTypes.ts imports:
  import { ThemeColor } from '../theme/formThemes';
./shared/api/genericApiOperations.ts imports:
  import { EnhancedRequestConfig, unifiedApiClient } from './unifiedApiClient';
  import { ApiTransformers } from '../utils/transformers/unifiedResponseTransformer';
./shared/api/collectionApi.ts imports:
  import { unifiedApiClient } from './unifiedApiClient';
  import { IPsaGradedCard, IRawCard } from '../domain/models/card';
  import { ISealedProduct } from '../domain/models/sealedProduct';
  import { ISaleDetails } from '../domain/models/common';
  import { createApiLogger } from '../utils/performance/apiLogger';
./shared/api/salesApi.ts imports:
  import { createResourceOperations, SALES_CONFIG } from './genericApiOperations';
  import { unifiedApiClient } from './unifiedApiClient';
  import { ISale, ISalesGraphData, ISalesSummary } from '../domain/models/sale';
./shared/api/activityApi.ts imports:
  } from './genericApiOperations';
  import { unifiedApiClient } from './unifiedApiClient';
./shared/api/exportApi.ts imports:
  } from './genericApiOperations';
  import { unifiedApiClient } from './unifiedApiClient';
  import { ZipImageUtility } from '../utils/api/ZipImageUtility';
./shared/api/unifiedApiClient.ts imports:
  import { API_BASE_URL } from '../utils/helpers/constants';
  import { handleApiError } from '../utils/helpers/errorHandler';
  import { log } from '../utils/performance/logger';
  import { optimizedApiRequest } from '../utils/transformers/apiOptimization';
  } from '../utils/transformers/responseTransformer';
./shared/api/statusApi.ts imports:
  import unifiedApiClient from './unifiedApiClient';
./shared/api/productsApi.ts imports:
  } from './genericApiOperations';
  import unifiedApiClient from './unifiedApiClient';
  import { searchProducts } from './searchApi';
  import { IProduct } from '../domain/models/product';
  } from './searchApi';
./shared/api/auctionsApi.ts imports:
  } from './genericApiOperations';
  import { unifiedApiClient } from './unifiedApiClient';
  import { IAuction } from '../domain/models/auction';
./shared/api/TypeSafeApiClient.ts imports:
  } from '../types/api/ApiResponse';
  import { unifiedApiClient, EnhancedRequestConfig } from './unifiedApiClient';
./shared/api/dbaSelectionApi.ts imports:
  } from './genericApiOperations';
  import unifiedApiClient from './unifiedApiClient';
./shared/api/searchApi.ts imports:
  import { ICard, ISet } from '../domain/models/card';
  import { IProduct } from '../domain/models/product';
  import { ISetProduct } from '../domain/models/setProduct';
  import { buildQueryParams } from '../utils/helpers/searchHelpers';
  import { ApiTransformers } from '../utils/transformers/unifiedResponseTransformer';
./shared/api/setsApi.ts imports:
  import { createResourceOperations, SET_CONFIG } from './genericApiOperations';
  import { unifiedApiClient } from './unifiedApiClient';
  import { ISet } from '../domain/models/card';
  import { searchSets as searchSetsApi, type SetSearchParams } from './searchApi';
  export { getSetSuggestions, getBestMatchSet } from './searchApi';
./shared/api/cardsApi.ts imports:
  import { CARD_CONFIG, createResourceOperations } from './genericApiOperations';
  import { ICard } from '../domain/models/card';
  import { searchCards as searchCardsApi } from './searchApi';
  } from './searchApi';
./shared/api/uploadApi.ts imports:
  import unifiedApiClient from './unifiedApiClient';
./shared/api/setProductsApi.ts imports:
  } from './genericApiOperations';
  import unifiedApiClient from './unifiedApiClient';
  import { ISetProduct } from '../domain/models/setProduct';
./shared/api/cardMarket/cardMarketApi.ts imports:
  import { ICardMarketReferenceProduct } from '../../domain/models/sealedProduct';
./shared/components/organisms/effects/GlassmorphismContainer.tsx imports:
  import { cn } from '../../../utils/helpers/common';
./shared/components/organisms/effects/CosmicBackground.tsx imports:
  import { useCentralizedTheme, themeUtils } from '../../../utils/ui/themeConfig';
  } from '../../../utils/ui/cosmicEffects';
./shared/components/organisms/effects/index.ts imports:
  export { default as ParticleSystem } from './ParticleSystem';
  export type { ParticleSystemProps } from './ParticleSystem';
  export { default as NeuralNetworkBackground } from './NeuralNetworkBackground';
  export type { NeuralNetworkBackgroundProps } from './NeuralNetworkBackground';
  export { default as FloatingGeometry } from './FloatingGeometry';
  } from './FloatingGeometry';
  export { default as CosmicBackground } from './CosmicBackground';
  export type { CosmicBackgroundProps } from './CosmicBackground';
  export { default as HolographicBorder } from './HolographicBorder';
  export type { HolographicBorderProps } from './HolographicBorder';
./shared/components/organisms/effects/HolographicBorder.tsx imports:
  import { cn } from '../../../utils/helpers/common';
./shared/components/organisms/effects/ParticleSystem.tsx imports:
  import { useCentralizedTheme, themeUtils } from '../../../utils/ui/themeConfig';
./shared/components/organisms/effects/UnifiedEffectSystem.tsx imports:
  import { useUnifiedTheme } from '../../contexts/theme/UnifiedThemeProvider';
./shared/components/organisms/effects/NeuralNetworkBackground.tsx imports:
  import { useCentralizedTheme, themeUtils } from '../../../utils/ui/themeConfig';
./shared/components/organisms/effects/FloatingGeometry.tsx imports:
  import { useCentralizedTheme, themeUtils } from '../../../utils/ui/themeConfig';
  import { useAnimationTheme } from '../../../hooks/theme/useAnimationTheme';
./shared/components/organisms/theme/ThemePicker.tsx imports:
  import { themePresets, VisualTheme } from '../../contexts/ThemeContext';
  import { useVisualTheme, useLayoutTheme } from '../../contexts/theme';
  import { PokemonCard } from '../design-system/PokemonCard';
  import { PokemonButton } from '../design-system/PokemonButton';
  import { cn } from '../../../utils/common';
./shared/components/organisms/theme/FocusManagementTheme.tsx imports:
  import { useAccessibilityTheme as useAccessibilityThemeContext } from '../../contexts/theme';
  import { useAccessibilityTheme } from '../../hooks/useAccessibilityTheme';
  import { cn } from '../../../utils/unifiedUtilities';
./shared/components/organisms/theme/ThemeImporter.tsx imports:
  import { cn } from '../../../utils/unifiedUtilities';
  import type { ThemeExportData } from './utils/themeExportUtils';
  import { parseThemeFile, validateThemeData } from './utils/themeExportUtils';
./shared/components/organisms/theme/utils/themeExportUtils.ts imports:
  } from '../../../types/theme';
./shared/components/organisms/theme/ThemeBackupManager.tsx imports:
  import { cn } from '../../../utils/unifiedUtilities';
  import type { ThemeBackup, ThemeExportData } from './utils/themeExportUtils';
  } from './utils/themeExportUtils';
./shared/components/organisms/theme/ReducedMotionTheme.tsx imports:
  import { useAccessibilityTheme as useAccessibilityThemeContext } from '../../contexts/theme';
  import { useAccessibilityTheme } from '../../hooks/useAccessibilityTheme';
  import { cn } from '../../../utils/unifiedUtilities';
./shared/components/organisms/theme/ThemePerformanceMonitor.tsx imports:
  import { cn } from '../../../utils/unifiedUtilities';
./shared/components/organisms/theme/index.ts imports:
  export { default as ThemeDebugger } from './ThemeDebugger';
  export type { ThemeDebuggerProps } from './ThemeDebugger';
  export { default as ThemePicker } from './ThemePicker';
  export type { ThemePickerProps } from './ThemePicker';
  export { default as ThemeExporter } from './ThemeExporter';
  export type { ThemeExporterProps } from './ThemeExporter';
  } from './AccessibilityTheme';
./shared/components/organisms/theme/ThemeExportManager.tsx imports:
  import { cn } from '../../../utils/unifiedUtilities';
  import type { ThemeExportData } from './utils/themeExportUtils';
  } from './utils/themeExportUtils';
./shared/components/organisms/theme/ThemeDebugger.tsx imports:
  import { ThemePerformanceMonitor } from './ThemePerformanceMonitor';
  import { ThemeDebugPanel } from './ThemeDebugPanel';
  import { validateThemeConfig } from './utils/themeValidationUtils';
  import { useVisualTheme, useLayoutTheme, useAnimationTheme, useAccessibilityTheme } from '../../contexts/theme';
  import { useCentralizedTheme } from '../../../utils/ui/themeConfig';
  } from '../../../utils/unifiedUtilities';
./shared/components/organisms/theme/ThemeExporter.tsx imports:
  import { useVisualTheme, useLayoutTheme, useAnimationTheme, useAccessibilityTheme } from '../../contexts/theme';
  } from '../../../utils/themeExport';
  import { cn } from '../../../utils/unifiedUtilities';
./shared/components/organisms/theme/AccessibilityControls.tsx imports:
  import { useAccessibilityTheme as useAccessibilityThemeContext } from '../../contexts/theme';
  import { useAccessibilityTheme } from '../../hooks/useAccessibilityTheme';
  import { cn } from '../../../utils/unifiedUtilities';
./shared/components/organisms/theme/AccessibilityTheme.tsx imports:
  import { useAccessibilityTheme as useAccessibilityThemeContext } from '../../contexts/theme';
  import { useAccessibilityTheme } from '../../hooks/useAccessibilityTheme';
  import { cn } from '../../../utils/unifiedUtilities';
  export { HighContrastTheme } from './HighContrastTheme';
  export { ReducedMotionTheme } from './ReducedMotionTheme';
  export { FocusManagementTheme } from './FocusManagementTheme';
  export { AccessibilityControls } from './AccessibilityControls';
./shared/components/organisms/theme/ThemeDebugPanel.tsx imports:
  import { cn } from '../../../utils/unifiedUtilities';
  import type { ValidationResult } from './utils/themeValidationUtils';
./shared/components/organisms/theme/HighContrastTheme.tsx imports:
  import { useAccessibilityTheme as useAccessibilityThemeContext } from '../../contexts/theme';
  import { useAccessibilityTheme } from '../../hooks/useAccessibilityTheme';
  import { cn } from '../../../utils/unifiedUtilities';
./shared/components/forms/MarkSoldForm.tsx imports:
  import { IBuyerAddress, ISaleDetails } from '../../../domain/models/common';
  import { DeliveryMethod, PaymentMethod, Source } from '../../../shared/utils/helpers/constants';
  } from '../atoms/design-system/PokemonForm';
  import { useMarkSold } from '../../hooks/useMarkSold';
./shared/components/forms/fields/ProductInformationFields.tsx imports:
  import { PokemonSelect } from '../../../atoms/design-system/PokemonSelect';
  import { ProductCategory } from '../../../domain/models/product';
./shared/components/forms/fields/index.ts imports:
  export { default as CardInformationFields } from './CardInformationFields';
  export { default as ProductInformationFields } from './ProductInformationFields';
  export { default as InformationFieldRenderer } from './InformationFieldRenderer';
./shared/components/forms/fields/InformationFieldRenderer.tsx imports:
  import CardInformationFields from './CardInformationFields';
  import ProductInformationFields from './ProductInformationFields';
./shared/components/forms/fields/CardInformationFields.tsx imports:
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
  import { IGrades } from '../../../domain/models/card';
./shared/components/forms/fields/ValidationField.tsx imports:
  import { PokemonSelect } from '../../atoms/design-system/PokemonSelect';
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
  } from '../../../hooks/useFormValidation';
./shared/components/forms/AddEditCardForm.tsx imports:
  import { IRawCard, IPsaGradedCard } from '../../../domain/models/card';
  import { useCollectionOperations } from '../../hooks/useCollectionOperations';
  import { useBaseForm } from '../../hooks/useBaseForm';
  import { commonValidationRules } from '../../hooks/useFormValidation';
  } from '../../hooks/form/useFormInitialization';
  } from '../../hooks/form/useCardSelection';
  } from './wrappers/FormSubmissionWrapper';
  import CardFormContainer from './containers/CardFormContainer';
  import HierarchicalCardSearch from './sections/HierarchicalCardSearch';
  import CardInformationFields from './fields/CardInformationFields';
  import GradingPricingSection from './sections/GradingPricingSection';
  import SaleDetailsSection from './sections/SaleDetailsSection';
  import ImageUploadSection from './sections/ImageUploadSection';
./shared/components/forms/AddEditSealedProductForm.tsx imports:
  import { ISealedProduct } from '../../../domain/models/sealedProduct';
  import { useCollectionOperations } from '../../hooks/useCollectionOperations';
  import { useBaseForm } from '../../hooks/useBaseForm';
  import { commonValidationRules } from '../../hooks/useFormValidation';
  } from './wrappers/FormSubmissionWrapper';
  import { PokemonInput } from '../atoms/design-system/PokemonInput';
  import LoadingSpinner from '../molecules/common/LoadingSpinner';
  import FormHeader from '../molecules/common/FormHeader';
  import FormActionButtons from '../molecules/common/FormActionButtons';
  import { PokemonSearch } from '../design-system/PokemonSearch';
  import ImageUploader from '../../../components/ImageUploader';
  import { PriceHistoryDisplay } from '../../../components/PriceHistoryDisplay';
  import ValidationField from './fields/ValidationField';
  import HierarchicalProductSearch from './sections/HierarchicalProductSearch';
  } from '../../services/forms/FormValidationService';
  } from '../../../shared/utils/transformers/responseTransformer';
./shared/components/forms/sections/HierarchicalProductSearch.tsx imports:
  } from './HierarchicalCardSearch';
./shared/components/forms/sections/ImageUploadSection.tsx imports:
  import ImageUploader from '../../../../components/ImageUploader';
./shared/components/forms/sections/AuctionItemSelectionSection.tsx imports:
  import { PokemonSelect } from '../../atoms/design-system/PokemonSelect';
  import { PokemonSearch } from '../../atoms/design-system/PokemonSearch';
  import { PokemonButton } from '../../atoms/design-system/PokemonButton';
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
./shared/components/forms/sections/CardInformationDisplaySection.tsx imports:
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
./shared/components/forms/sections/HierarchicalCardSearch.tsx imports:
  import { useHierarchicalSearch } from '../../../hooks/useHierarchicalSearch';
  import { PokemonSearch } from '../../atoms/design-system/PokemonSearch';
./shared/components/forms/sections/GradingPricingSection.tsx imports:
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
  import { PokemonSelect } from '../../atoms/design-system/PokemonSelect';
  import { PriceHistoryDisplay } from '../../../../components/PriceHistoryDisplay';
  import ValidationField from '../fields/ValidationField';
./shared/components/forms/sections/SaleDetailsSection.tsx imports:
  import { PokemonSelect } from '../../atoms/design-system/PokemonSelect';
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
  import ValidationField from '../fields/ValidationField';
./shared/components/forms/containers/CardFormContainer.tsx imports:
  import FormHeader from '../../molecules/common/FormHeader';
  import FormActionButtons from '../../molecules/common/FormActionButtons';
  import HierarchicalCardSearch from '../sections/HierarchicalCardSearch';
  import CardInformationDisplaySection from '../sections/CardInformationDisplaySection';
  import GradingPricingSection from '../sections/GradingPricingSection';
  import ImageUploadSection from '../sections/ImageUploadSection';
  import SaleDetailsSection from '../sections/SaleDetailsSection';
./shared/components/forms/containers/AuctionFormContainer.tsx imports:
  import { PokemonSelect } from '../../atoms/design-system/PokemonSelect';
  import { PokemonInput } from '../../atoms/design-system/PokemonInput';
  import FormActionButtons from '../../molecules/common/FormActionButtons';
./shared/components/molecules/common/ImageSlideshow.tsx imports:
  import { getElementTheme, ThemeColor } from '../../../../theme/formThemes';
./shared/components/molecules/common/LoadingSpinner.tsx imports:
  import { useVisualTheme } from '../../../contexts/theme';
  import { getElementTheme, ThemeColor } from '../../../../theme/formThemes';
./shared/components/molecules/common/UnifiedHeader.tsx imports:
  import { PokemonButton } from '../design-system/PokemonButton';
./shared/components/molecules/common/SalesDateRangeFilter.tsx imports:
  import { DateRangeState } from './DateRangeFilter';
./shared/components/molecules/common/UnifiedGradeDisplay.tsx imports:
  import { IGrades } from '../../domain/models/card';
./shared/components/molecules/common/EmptyState.tsx imports:
  import { PokemonButton } from '../design-system/PokemonButton';
./shared/components/molecules/common/ActivityListItem.tsx imports:
  import { PokemonCard, PokemonBadge } from '../../atoms/design-system';
  } from '../../../utils/helpers/formatting';
./shared/components/molecules/common/ImageProductView.tsx imports:
  import { ImageSlideshow } from './ImageSlideshow';
  import { getElementTheme, ThemeColor } from '../../../../theme/formThemes';
./shared/components/molecules/common/index.ts imports:
  export { default as UnifiedHeader } from './UnifiedHeader';
  export type { HeaderVariant, HeaderStat, HeaderAction } from './UnifiedHeader';
  export { default as SectionContainer } from './SectionContainer';
  } from './SectionContainer';
  export { default as UnifiedGradeDisplay } from './UnifiedGradeDisplay';
  } from './UnifiedGradeDisplay';
  export { default as GlassmorphismHeader } from './GlassmorphismHeader';
  export { default as FormHeader } from './FormHeader';
  export { default as EmptyState } from './EmptyState';
  export { default as FormActionButtons } from './FormActionButtons';
  export { Glow, Shimmer } from './FormElements';
./shared/components/molecules/common/OptimizedImageView.tsx imports:
  import { getElementTheme, ThemeColor } from '../../theme/formThemes';
./shared/components/molecules/common/ActivityStatCard.tsx imports:
  import { PokemonCard } from '../../atoms/design-system';
./shared/components/molecules/common/DateRangeFilter.tsx imports:
  import Button from './Button';
  } from '../../theme/formThemes';
./shared/components/molecules/common/ActivityFilterHub.tsx imports:
  } from '../../atoms/design-system';
./shared/components/molecules/common/CategorySalesCard.tsx imports:
  import { displayPrice } from '../../../utils/helpers/formatting';
./shared/components/molecules/common/ProductCard.tsx imports:
  import { IProduct } from '../../../domain/models/product';
./shared/components/molecules/common/RecentSaleListItem.tsx imports:
  import { displayPrice } from '../../../utils/helpers/formatting';
./shared/components/molecules/common/FormActionButtons.tsx imports:
  import { PokemonButton } from '../../atoms/design-system/PokemonButton';
  import { buildThemeClasses, ThemeColor } from '../../../../theme/formThemes';
./shared/components/molecules/common/FormHeader.tsx imports:
  import { ThemeColor } from '../../theme/formThemes';
  import GlassmorphismHeader from './GlassmorphismHeader';
./shared/components/molecules/common/LoadingStates.tsx imports:
  import LoadingSpinner from './LoadingSpinner';
  import { ThemeColor } from '../../theme/formThemes';
./shared/components/molecules/common/ProductSearchFilters.tsx imports:
  import { ProductCategory } from '../../../domain/models/product';
  import { ISetProduct } from '../../../domain/models/setProduct';
./shared/components/molecules/common/FormElements/Glow.tsx imports:
  import { useCentralizedTheme } from '../../../../utils/ui/themeConfig';
./shared/components/molecules/common/FormElements/Shimmer.tsx imports:
  import { useCentralizedTheme } from '../../../../utils/ui/themeConfig';
./shared/components/molecules/common/FormElements/index.ts imports:
  export { default as FormWrapper } from './FormWrapper';
  export { default as Label } from './Label';
  export { default as ErrorMessage } from './ErrorMessage';
  export { default as HelperText } from './HelperText';
  export { default as Shimmer } from './Shimmer';
  export { default as Glow } from './Glow';
./shared/components/molecules/common/FormElements/HelperText.tsx imports:
  import { useCentralizedTheme } from '../../../../utils/ui/themeConfig';
./shared/components/molecules/common/FormElements/ErrorMessage.tsx imports:
  import { useCentralizedTheme } from '../../../../utils/ui/themeConfig';
./shared/components/molecules/common/FormElements/FormWrapper.tsx imports:
  import { useCentralizedTheme } from '../../../../utils/ui/themeConfig';
./shared/components/molecules/common/FormElements/UnifiedFormElement.tsx imports:
  import { useUnifiedTheme } from '../../../contexts/theme/UnifiedThemeProvider';
./shared/components/layout/layouts/PageLayout.tsx imports:
  import LoadingSpinner from '../../molecules/common/LoadingSpinner';
  import GlassmorphismHeader from '../../molecules/common/GlassmorphismHeader';
./shared/components/atoms/design-system/PokemonIcon.tsx imports:
  import { cn } from '../../../utils/common';
./shared/components/atoms/design-system/PokemonInput.tsx imports:
  import { cn } from '../../../utils/helpers/common';
  } from '../../../contexts/theme';
  import { inputClasses } from '../../../utils/ui/classNameUtils';
  import { FormWrapper } from '../../molecules/common/FormElements/FormWrapper';
  import { Label } from '../../molecules/common/FormElements/Label';
  import { HelperText } from '../../molecules/common/FormElements/HelperText';
  } from '../../../../types/themeTypes';
./shared/components/atoms/design-system/PokemonBadge.tsx imports:
  import { cn } from '../../../utils/helpers/common';
./shared/components/atoms/design-system/index.ts imports:
  export { PokemonCard } from './PokemonCard';
  export type { PokemonCardProps } from './PokemonCard';
  export { PokemonButton } from './PokemonButton';
  export type { PokemonButtonProps } from './PokemonButton';
  export { PokemonInput } from './PokemonInput';
  export type { PokemonInputProps } from './PokemonInput';
  export { PokemonSelect } from './PokemonSelect';
  export type { PokemonSelectProps, SelectOption } from './PokemonSelect';
  export { PokemonModal, PokemonConfirmModal } from './PokemonModal';
  } from './PokemonModal';
  export { PokemonBadge } from './PokemonBadge';
  export type { PokemonBadgeProps } from './PokemonBadge';
  export { PokemonPageContainer } from './PokemonPageContainer';
  export type { PokemonPageContainerProps } from './PokemonPageContainer';
  export { PokemonForm } from './PokemonForm';
  export type { PokemonFormProps, PokemonFormField, PokemonFormSection } from './PokemonForm';
./shared/components/atoms/design-system/PokemonSearch.tsx imports:
  import { SearchResult, useSearch } from '../../../hooks/useSearch';
  } from '../../hooks/useOptimizedSearch';
  } from '../../../contexts/theme';
  import { getElementTheme, ThemeColor } from '../../../../theme/formThemes';
  import { cn } from '../../../utils/helpers/unifiedUtilities';
./shared/components/atoms/design-system/PokemonPageContainer.tsx imports:
  import { cn } from '../../../utils/helpers/common';
./shared/components/atoms/design-system/PokemonCard.tsx imports:
  import { cn } from '../../../utils/helpers/common';
./shared/components/atoms/design-system/PokemonForm.tsx imports:
  import { cn } from '../../../utils/helpers/common';
  import { PokemonButton } from './PokemonButton';
  import { PokemonInput } from './PokemonInput';
  import { FormWrapper } from '../common/FormWrapper';
  import { Label } from '../../molecules/common/FormElements/Label';
  import { ErrorMessage } from '../../molecules/common/FormElements/ErrorMessage';
  import { HelperText } from '../../molecules/common/FormElements/HelperText';
  import LoadingSpinner from '../../molecules/common/LoadingSpinner';
  import { useVisualTheme } from '../../../hooks/theme/useVisualTheme';
  import { useLayoutTheme } from '../../../hooks/theme/useLayoutTheme';
  import { useAnimationTheme } from '../../../hooks/theme/useAnimationTheme';
  } from '../../types/themeTypes';
./shared/components/atoms/design-system/PokemonButton.tsx imports:
  import { Glow, Shimmer } from '../../molecules/common/FormElements';
  import { StandardButtonProps } from '../../types/themeTypes';
  } from '../../../utils/helpers/unifiedUtilities';
  import { generateThemeClasses } from '../../../utils/ui/themeUtils';
  import { focusRing } from '../../../utils/ui/classNameUtils';
  } from '../../../contexts/theme';
./shared/components/atoms/design-system/PokemonSelect.tsx imports:
  import { cn } from '../../../utils/helpers/common';
./shared/components/atoms/design-system/PokemonModal.tsx imports:
  import { StandardModalProps, ComponentSize } from '../../types/themeTypes';
  } from '../../../utils/helpers/unifiedUtilities';
  import { cardClasses } from '../../../utils/ui/classNameUtils';
  } from '../../../contexts/theme';
  import { PokemonButton } from './PokemonButton';
./app/lib/queryClient.ts imports:
  import { log } from '../../shared/utils/performance/logger';
./app/App.tsx imports:
  import { log } from '../shared/utils/performance/logger';
  import LoadingSpinner from '../shared/components/molecules/common/LoadingSpinner';
  import { queryClient } from './lib/queryClient';
  import { UnifiedThemeProvider as ThemeProvider } from '../shared/contexts/theme/UnifiedThemeProvider';
  import MainLayout from '../shared/components/layout/layouts/MainLayout';
./app/main.tsx imports:
  import App from './App.tsx';
./components/debug/ReactProfiler.tsx imports:
  } from './profilerUtils';
./components/modals/AddItemToAuctionModal.tsx imports:
  } from './ItemSelectorModal';
  import { useCollectionOperations } from '../../shared/hooks/useCollectionOperations';
  import { IPsaGradedCard, IRawCard } from '../../domain/models/card';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
./components/modals/ItemSelectorModal.tsx imports:
  import { PokemonModal } from '../../shared/components/atoms/design-system/PokemonModal';
  import { PokemonButton } from '../../shared/components/atoms/design-system/PokemonButton';
  import { PokemonInput } from '../../shared/components/atoms/design-system/PokemonInput';
  import { PokemonSelect } from '../../shared/components/atoms/design-system/PokemonSelect';
  import LoadingSpinner from '../../shared/components/molecules/common/LoadingSpinner';
./components/PriceHistoryDisplay.tsx imports:
  import { PokemonButton } from '../shared/components/atoms/design-system/PokemonButton';
  import { PokemonInput } from '../shared/components/atoms/design-system/PokemonInput';
  import { log } from '../shared/utils/performance/logger';
  import { showWarningToast } from '../shared/components/organisms/ui/toastNotifications';
./components/lists/ItemOrderingSection.tsx imports:
  import { UnifiedCategoryList } from './UnifiedCategoryList';
  } from '../../domain/models/ordering';
./components/lists/CollectionExportModal.tsx imports:
  import { PokemonModal } from '../../shared/components/atoms/design-system/PokemonModal';
  import LoadingSpinner from '../../shared/components/molecules/common/LoadingSpinner';
  import { CollectionItem } from './CollectionItemCard';
  } from '../../interfaces/api/IExportApiService';
  import { ItemOrderingSection } from './ItemOrderingSection';
  import { ItemCategory, SortMethod } from '../../domain/models/ordering';
./components/lists/CollectionItemCard.tsx imports:
  import { ImageProductView } from '../../shared/components/molecules/common/ImageProductView';
  import { formatCardNameForDisplay } from '../../shared/utils/helpers/formatting';
  import { IPsaGradedCard, IRawCard } from '../../domain/models/card';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
./components/lists/CollectionStats.tsx imports:
  import { PokemonCard } from '../../shared/components/atoms/design-system';
./components/lists/CollectionTabs.tsx imports:
  import LoadingSpinner from '../../shared/components/molecules/common/LoadingSpinner';
  import CollectionItemCard, { CollectionItem } from './CollectionItemCard';
  import { IPsaGradedCard, IRawCard } from '../../domain/models/card';
  import { ISealedProduct } from '../../domain/models/sealedProduct';
./components/lists/UnifiedCategoryList.tsx imports:
  } from '../../shared/contexts/DragDropContext';
  import { PokemonCard } from '../../shared/components/atoms/design-system/PokemonCard';
  import { CollectionItem, ItemCategory } from '../../shared/domain/models/ordering';
  import { applyItemOrder, getItemCategory } from '../../shared/utils/helpers/orderingUtils';
./components/routing/utils/routeUtils.ts imports:
  import { RouteParams, RouteMatch } from '../types/RouterTypes';
./components/routing/Router.tsx imports:
  import { RouteConfig, RouteHandler } from './types/RouterTypes';
  import { matchRoute } from './utils/routeUtils';
./components/error/ErrorBoundary.tsx imports:
  import { updateErrorMetrics } from './errorBoundaryUtils';
./components/ImageUploader.tsx imports:
  import { PokemonConfirmModal } from '../shared/components/atoms/design-system/PokemonModal';
  import { ImageAnalysisIndicator } from '../shared/components/molecules/common/ImageAnalysisIndicator';
  import { useDragAndDrop } from '../shared/hooks/useDragAndDrop';
  import { useImageRemoval } from '../shared/hooks/useImageRemoval';
  } from '../shared/utils/ui/imageUtils';
  import { cn } from '../shared/utils/helpers/unifiedUtilities';

=== PROJECT STATISTICS ===

Total source files: 328
React components (.tsx/.jsx): 154
Custom hooks (use*.ts/tsx): 55
API-related files: 35

=== END OF ANALYSIS ===
